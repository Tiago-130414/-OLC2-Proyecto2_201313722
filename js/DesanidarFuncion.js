/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var DesanidarFuncion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[2,3],$V2=[1,8],$V3=[1,37],$V4=[1,39],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,41],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,23],$Vf=[1,26],$Vg=[1,27],$Vh=[1,24],$Vi=[1,38],$Vj=[5,17],$Vk=[2,6],$Vl=[2,5,11,12,17,41,42,43,44,48,49,56,61,62,63,66,68,69,71,96],$Vm=[2,5,11,12,17,41,42,43,44,48,49,54,55,56,61,62,63,66,68,69,71,96],$Vn=[1,50],$Vo=[1,60],$Vp=[2,5,11,12,17,41,42,43,44,46,48,49,54,55,56,61,62,63,66,68,69,71,96],$Vq=[1,81],$Vr=[1,82],$Vs=[1,80],$Vt=[1,73],$Vu=[1,72],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[2,153],$VC=[1,88],$VD=[1,91],$VE=[15,17,18,40,57,67,68,69,79,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122],$VF=[1,98],$VG=[40,79],$VH=[1,105],$VI=[1,104],$VJ=[2,80],$VK=[1,109],$VL=[1,113],$VM=[1,114],$VN=[1,115],$VO=[1,116],$VP=[15,17,18,40,68,69,79,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122],$VQ=[15,17,18,40,57,68,69,79,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122],$VR=[1,119],$VS=[1,128],$VT=[2,13],$VU=[1,136],$VV=[1,137],$VW=[1,138],$VX=[1,139],$VY=[1,140],$VZ=[1,141],$V_=[1,142],$V$=[1,143],$V01=[1,144],$V11=[1,145],$V21=[1,146],$V31=[1,147],$V41=[1,148],$V51=[1,149],$V61=[15,17,18,40,79,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122],$V71=[15,79],$V81=[2,120],$V91=[15,17,18,40,57,67,68,69,79,80,82,109,110,111,112,113,114,115,116,117,118,119,120,121,122],$Va1=[1,169],$Vb1=[1,168],$Vc1=[2,100],$Vd1=[1,176],$Ve1=[1,184],$Vf1=[1,180],$Vg1=[1,181],$Vh1=[1,182],$Vi1=[1,183],$Vj1=[15,17,40,79],$Vk1=[1,191],$Vl1=[17,54,55],$Vm1=[2,12,17,41,42,43,44,48,49,54,55,56,61,62,63,66,68,69,71,96],$Vn1=[1,238],$Vo1=[79,82],$Vp1=[1,253],$Vq1=[15,16,17,40,67,79,80],$Vr1=[1,260],$Vs1=[1,259],$Vt1=[17,40,79],$Vu1=[12,13,41,68,69,118,124,125,126,127,128],$Vv1=[15,17,18,40,79,82,109,110],$Vw1=[15,17,18,40,79,82,109,110,111,112,113,114,115,116],$Vx1=[15,17,18,40,79,82,109,110,111,112,113,114,115,116,117,118],$Vy1=[15,17,18,40,79,82,109,110,111,112,113,114,115,116,117,118,119,120],$Vz1=[1,289],$VA1=[1,298],$VB1=[15,17,40,67,79,80],$VC1=[17,55],$VD1=[1,319];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONT":4,"EOF":5,"LISTA_CONTENIDO":6,"CONTENIDO":7,"LISTA_CONTENIDO_PRIM":8,"FUNCIONES":9,"ESTRUCTURAS_DE_CONTROL":10,"R_Funcion":11,"Identificador":12,"S_ParentesisAbre":13,"PARAM":14,"S_ParentesisCierra":15,"S_LlaveAbre":16,"S_LlaveCierra":17,"S_DosPuntos":18,"TIPOS_DE_DATO":19,"EDD":20,"LISTADO_ESTRUCTURAS":21,"CONT_ESTRUCTURAS_CONTROL":22,"VARIABLES":23,"ASIGNACION":24,"LISTADO_IF":25,"ELSE":26,"SWITCH":27,"IMPRIMIR":28,"WHILE":29,"DO_WHILE":30,"FOR":31,"FOR_OF":32,"FOR_IN":33,"SENTENCIAS_TRANSFERENCIA":34,"LLAMADA_FUNC":35,"TYPES":36,"M_STRING":37,"ATRIBUTOS":38,"MET_STRING":39,"S_PuntoComa":40,"Cadena":41,"R_Break":42,"R_Continue":43,"R_Return":44,"EXPRESION_G":45,"R_Else":46,"IF":47,"R_If":48,"R_Switch":49,"CASE":50,"DEFINIR_DEFAULT":51,"LISTA_CASE":52,"DEFINIR_CASE":53,"R_Case":54,"R_Default":55,"R_Console":56,"S_Punto":57,"R_Log":58,"PARAMETROS_FUNC":59,"FUNC":60,"R_While":61,"R_Do":62,"R_For":63,"CONT_FOR":64,"FIN_FOR":65,"R_Let":66,"S_Igual":67,"OP_Incremento":68,"OP_Decremento":69,"CONT_FOR_IN":70,"R_Const":71,"R_In":72,"CONT_FOR_OF":73,"R_Of":74,"LISTA_DE_ASIGNACIONES":75,"COMPLETAR_ASIGNACION":76,"LISTADO_ASIGNACION":77,"CONTENIDO_ASIGNACION":78,"S_Coma":79,"S_CorcheteAbre":80,"CONT_ASIG_ARRAY":81,"S_CorcheteCierra":82,"LISTA_DECLARACION_TYPES":83,"L_CORCHETE":84,"L_C":85,"LISTA_CORCHETE":86,"L_CORCHETE_V":87,"L_C_V":88,"LISTA_AS_MV":89,"LISTA_ASIGN_ARRAY":90,"CONT_ARRAY_ASIGN_VV":91,"LISTADO_VAR":92,"CONT_VAR":93,"LISTA_PARAMETROS":94,"PARAMETROS":95,"T_Type":96,"LISTA_TYPES":97,"FIN_TYPES":98,"SEPARADOR":99,"CONTENIDO_TYPES":100,"SEPARADOR_DECLARACION_TYPES":101,"CONTENIDO_DECLARACION_TYPES":102,"T_Number":103,"T_Boolean":104,"T_String":105,"T_Void":106,"TIPAR_FUNCION":107,"CONT_ATRIBUTOS":108,"LOG_Concatenar":109,"LOG_OR":110,"REL_IgualIgual":111,"REL_MayorIgualQue":112,"REL_MayorQue":113,"REL_MenorIgualQue":114,"REL_MenorQue":115,"REL_Distinto":116,"OP_Mas":117,"OP_Menos":118,"OP_Multiplicacion":119,"OP_Division":120,"OP_Exponenciacion":121,"OP_Modulo":122,"CONTENIDO_EXPRESION":123,"LOG_Not":124,"Entero":125,"Decimal":126,"R_True":127,"R_False":128,"OPCIONAL":129,"R_Length":130,"L_MET_STRING":131,"CONT_MET_STRING":132,"R_CharAt":133,"R_Tlower":134,"R_Touppper":135,"R_Concat":136,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"R_Funcion",12:"Identificador",13:"S_ParentesisAbre",15:"S_ParentesisCierra",16:"S_LlaveAbre",17:"S_LlaveCierra",18:"S_DosPuntos",40:"S_PuntoComa",41:"Cadena",42:"R_Break",43:"R_Continue",44:"R_Return",46:"R_Else",48:"R_If",49:"R_Switch",54:"R_Case",55:"R_Default",56:"R_Console",57:"S_Punto",58:"R_Log",61:"R_While",62:"R_Do",63:"R_For",66:"R_Let",67:"S_Igual",68:"OP_Incremento",69:"OP_Decremento",71:"R_Const",72:"R_In",74:"R_Of",79:"S_Coma",80:"S_CorcheteAbre",82:"S_CorcheteCierra",96:"T_Type",103:"T_Number",104:"T_Boolean",105:"T_String",106:"T_Void",109:"LOG_Concatenar",110:"LOG_OR",111:"REL_IgualIgual",112:"REL_MayorIgualQue",113:"REL_MayorQue",114:"REL_MenorIgualQue",115:"REL_MenorQue",116:"REL_Distinto",117:"OP_Mas",118:"OP_Menos",119:"OP_Multiplicacion",120:"OP_Division",121:"OP_Exponenciacion",122:"OP_Modulo",124:"LOG_Not",125:"Entero",126:"Decimal",127:"R_True",128:"R_False",130:"R_Length",133:"R_CharAt",134:"R_Tlower",135:"R_Touppper",136:"R_Concat"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[8,2],[8,0],[7,1],[7,1],[7,1],[9,8],[9,10],[20,1],[20,0],[21,2],[21,1],[22,1],[22,1],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[37,3],[37,3],[34,2],[34,2],[34,2],[34,3],[25,3],[25,1],[47,7],[26,4],[26,0],[27,8],[50,1],[50,0],[52,2],[52,1],[53,4],[51,3],[51,0],[28,7],[60,1],[60,0],[29,7],[30,9],[31,10],[64,7],[64,5],[64,2],[64,4],[65,3],[65,2],[65,2],[65,2],[65,2],[33,7],[70,4],[70,4],[70,3],[32,7],[73,4],[73,4],[73,3],[24,4],[24,4],[24,4],[24,4],[24,4],[76,1],[76,0],[77,2],[77,1],[78,4],[78,3],[78,3],[78,3],[78,3],[75,1],[75,3],[75,3],[84,1],[85,2],[85,1],[86,2],[87,1],[88,2],[88,1],[89,3],[81,1],[81,0],[90,3],[90,1],[91,1],[91,3],[91,3],[23,3],[23,3],[92,3],[92,1],[93,3],[93,5],[93,5],[93,4],[93,6],[93,7],[93,5],[35,5],[59,3],[59,1],[59,0],[14,1],[14,0],[94,3],[94,1],[95,3],[95,5],[95,4],[95,6],[36,6],[97,3],[97,1],[100,3],[100,4],[99,1],[99,1],[98,2],[98,1],[83,3],[83,1],[102,3],[101,1],[101,1],[19,1],[19,1],[19,1],[19,1],[19,1],[107,2],[107,0],[38,3],[38,1],[108,2],[108,1],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[45,2],[45,2],[45,2],[45,2],[45,2],[45,1],[123,1],[123,1],[123,1],[123,1],[123,1],[123,3],[123,4],[123,3],[123,1],[123,3],[123,2],[123,2],[123,5],[123,4],[123,4],[129,3],[129,1],[39,1],[131,2],[131,1],[132,5],[132,4],[132,4],[132,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
var t = { tipo : "contenidoGlobal" , contenido : $$[$0-1]};var tErr = tablaErrores;limpiarErrores();return {traduccion : traducir($$[$0-1]) , errores : tErr};
break;
case 3: case 42: case 45: case 50: case 80: case 100: case 120:
this.$ = [];
break;
case 4: case 5: case 82: case 88: case 93: case 97: case 103: case 109: case 139: case 151: case 183: case 194:
this.$ = $$[$0];
break;
case 6:

                                                                var pila = eval('$$');
                                                                var valSintetizar = pila[pila.length - 1 ];
                                                                this.$ = valSintetizar;
                                                                
break;
case 7:
 
                                        var pila = eval('$$');
                                        //console.log(pila);
                                        var anterior = pila[pila.length - 2]; 
                                        if(Array.isArray(anterior)){
                                            var temp = anterior.concat($$[$0]);
                                            //console.log(temp);
                                        }else{
                                            if(Array.isArray($$[$0])){
                                                var temp = $$[$0];
                                                //console.log(temp);
                                            }else{

                                                var temp  = [$$[$0]];
                                                //console.log(temp);
                                            }
                                        }
                                        this.$ = temp;
                                        
break;
case 8:
 
                                        var pila = eval('$$');
                                        //console.log(pila);
                                        var anterior = pila[pila.length - 2];  
                                        if(Array.isArray(anterior)){
                                            var temp = anterior.concat($$[$0]);
                                        }else{
                                            if(Array.isArray($$[$0])){
                                                var temp = $$[$0];
                                            }else{
                                                var temp  = [$$[$0]];
                                            }
                                        }
                                        this.$ = temp;
                                        
break;
case 9: case 17:
this.$ ='';tablaErrores.push({ tipo  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
case 10:
var json  = { tipo: "funcion" , contenido : [{tipo : "identificador", contenido : $$[$0-6]},{tipo : "parametros", contenido : $$[$0-4]},{tipo : "instrucciones", contenido : $$[$0-1]}]};this.$ =recorrerJson(json);
break;
case 11:
var json = {tipo : "funcionT" ,contenido : [{tipo : "identificador", contenido : $$[$0-8]},{tipo : "parametros", contenido : $$[$0-6]},{tipo : "tipoDato", contenido : $$[$0-3]},{tipo : "instrucciones", contenido : $$[$0-1]}] }; this.$ =recorrerJson(json);
break;
case 12:
this.$ = {tipo : "estructuras" , contenido : $$[$0]};
break;
case 13:
this.$ = {tipo : "estructuras" , contenido : []};
break;
case 14:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1];
break;
case 15: case 47:
this.$ = [$$[$0]];
break;
case 20:
var json = $$[$0-1]; json =  json.concat($$[$0]) ;this.$ = {tipo : "condicionalIf" , contenido : json };
break;
case 32:
var json = $$[$0-2].concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$={tipo : "mstring" , contenido : json};
break;
case 33:
var json = [{tipo : "concatenar" , contenido : $$[$0-2]}].concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "mstring" , contenido : json};
break;
case 34:
this.$ = {tipo : "break" , contenido : []};
break;
case 35:
this.$ = {tipo : "continue" , contenido : []};
break;
case 36:
this.$ = {tipo : "return" , contenido : []};
break;
case 37:
var exp = returnVector($$[$0-1]);var json = [{tipo : "expresion" , contenido : exp}];this.$ = {tipo : "returnE" , contenido : json};
break;
case 38:
var json = $$[$0-2];var temp = [{ tipo : "elseIf" , contenido : $$[$0]}]; json = json.concat(temp);this.$ = json;
break;
case 39:
this.$ = [{ tipo : "if" , contenido : $$[$0]}];
break;
case 40:
var exp ; if(Array.isArray($$[$0-4])){exp = $$[$0-4];}else{exp = [$$[$0-4]];} ;var json = [{tipo : "condicionIf" , contenido : exp},$$[$0-1]];this.$ =json;
break;
case 41:
var json = [{tipo : "else" , contenido : [$$[$0-1]]}];this.$ = json;
break;
case 43:
var exp ; if(Array.isArray($$[$0-5])){exp = $$[$0-5];}else{exp = [$$[$0-5]];} ;var json = [{tipo : "expresion" , contenido : exp}]; json = json.concat($$[$0-2]);json = json.concat($$[$0-1]);this.$ = {tipo : "switch" , contenido : json};
break;
case 46: case 81: case 92: case 96:
var json = $$[$0-1]; json = json.concat($$[$0]);this.$ = json;
break;
case 48:
var exp ; if(Array.isArray($$[$0-2])){exp = $$[$0-2];}else{exp = [$$[$0-2]];} ;var json = [{tipo : "expresion" , contenido : exp} , {tipo : "concatenar" , contenido : " " + $$[$0-1] + "\n"} ,$$[$0]]; this.$ = {tipo : "case" , contenido : json};
break;
case 49:
this.$ = [{tipo : "default" , contenido : [$$[$0]]}];
break;
case 51:
this.$ = {tipo : "imprimir" , contenido : $$[$0-2] };
break;
case 52:
var json; if(Array.isArray($$[$0])){json = $$[$0];}else{json = [$$[$0]];};this.$ = json;
break;
case 53: case 122:
this.$=[];
break;
case 54:
 var exp = returnVector($$[$0-4]) ; var json = [{ tipo : "condicionWhile" , contenido : exp} , $$[$0-1] ]; this.$ = {tipo : "while" , contenido : json}; 
break;
case 55:
var exp ; if(Array.isArray($$[$0-2])){exp = $$[$0-2];}else{exp = [$$[$0-2]];} ;var json = [$$[$0-6] , { tipo : "condicionDoWhile" , contenido : exp}]; this.$ = {tipo : "doWhile" , contenido : json};
break;
case 56:
var exp ; if(Array.isArray($$[$0-6])){exp = $$[$0-6];}else{exp = [$$[$0-6]];} ; var json = [{tipo : "inicioFor" , contenido : $$[$0-7]},{tipo : "condicionFor" , contenido : exp},{tipo : "finFor" , contenido : $$[$0-4]},$$[$0-1]]; this.$ = {tipo : "for" , contenido : json}; 
break;
case 57:
var exp = returnVector($$[$0-1]); var json = [{tipo : "variable_let" , contenido : $$[$0-6]},{tipo : "identificador" , contenido : $$[$0-5]},{tipo : "concatenar" , contenido : $$[$0-4]},{tipo : "tipoDato" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : " " + $$[$0-2]+ " "},{tipo : "expresion" , contenido : exp},{tipo : "concatenar" , contenido : $$[$0] +" "}];this.$=json;
break;
case 58:
var exp = returnVector($$[$0-1]);var json = [{tipo : "variable_let", contenido : $$[$0-4]},{tipo : "identificador" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : " "+$$[$0-2]+" "},{tipo : "expresion" , contenido : exp},{tipo : "concatenar" , contenido : $$[$0]}]; this.$ = json;
break;
case 59:
 var json = [{tipo : "identificador", contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}];this.$ = json;
break;
case 60:
var exp = returnVector($$[$0-1]);var json = [{tipo : "identificador", contenido : $$[$0-3]},{tipo : "concatenar" , contenido : " " + $$[$0-2] + " "},{tipo : "expresion" , contenido : exp},{tipo : "concatenar" , contenido : $$[$0]}];this.$ = json;
break;
case 61:
 var exp = returnVector($$[$0]);var  json = [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "expresion" , contenido : exp}]; this.$ = json;
break;
case 62: case 64:
 var  json = [{tipo : "identificador" , contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}]; this.$ = json;
break;
case 63: case 65:
 var  json = [{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "identificador" , contenido : $$[$0]}]; this.$ = json;
break;
case 66:
var json = [{tipo : "condicionForIn" , contenido : $$[$0-4]},$$[$0-1]];this.$ = {tipo : "ForIn" , contenido : json};
break;
case 67: case 71:
var json = [{tipo : "variable_const" , contenido : $$[$0-3] + " "},{tipo : "identificador" , contenido : $$[$0-2] + " "},{tipo : "concatenar" , contenido : $$[$0-1] + " "},{tipo : "identificador" , contenido : $$[$0]}];this.$ = json;
break;
case 68: case 72:
var json = [{tipo : "variable_let" , contenido : $$[$0-3] + " "},{tipo : "identificador" , contenido : $$[$0-2] + " "},{tipo : "concatenar" , contenido : $$[$0-1] + " "},{tipo : "identificador" , contenido : $$[$0]}];this.$ = json;
break;
case 69: case 73:
var json = [{tipo : "identificador" , contenido : $$[$0-2] + " "},{tipo : "concatenar" , contenido : $$[$0-1] + " "},{tipo : "identificador" , contenido : $$[$0] + " "}];this.$ = json;
break;
case 70:
var json = [{tipo : "condicionForOf" , contenido : $$[$0-4]},$$[$0-1]];this.$ = {tipo : "ForOf" , contenido : json};
break;
case 74:
var json = $$[$0-3]; json.push({tipo : "concatenar" , contenido : " " + $$[$0-2] + " "}); json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "asignacion" , contenido : json};
break;
case 75: case 77:
var json = $$[$0-3]; json.push({tipo : "concatenar" , contenido : $$[$0-2]}); json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "asignacion" , contenido : json};
break;
case 76:
var json = [{tipo : "concatenar", contenido : $$[$0-3]}]; json = json.concat($$[$0-2]);json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "asignacion" , contenido : json};
break;
case 78:
var json = [{tipo : "concatenar", contenido : $$[$0-3]}]; json = json.concat($$[$0-2]); json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "asignacion" , contenido : json};
break;
case 83:
 var json = [{tipo : "concatenar" , contenido : $$[$0-3] + " "},{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : " " + $$[$0-1] + " "}]; json = json.concat($$[$0]);this.$ = json;
break;
case 84: case 86:
 var json = [{tipo : "concatenar" , contenido : $$[$0-2] + " "},{tipo : "identificador" , contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}];this.$ = json;
break;
case 85: case 87:
 var json = [{tipo : "concatenar" , contenido : $$[$0-2] + " "},{tipo : "concatenar"    , contenido : $$[$0-1]},{tipo : "identificador" , contenido : $$[$0]}]; this.$ = json;
break;
case 89: case 90: case 104: case 105:
var json = []; json.push({tipo : "concatenar" , contenido : $$[$0-2]});json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]}); this.$ = json;
break;
case 94:
this.$ = [{tipo : "concatenar" , contenido : "["+"]" }];
break;
case 98:
var json = [{tipo : "concatenar" , contenido : $$[$0-2]}].concat($$[$0-1]); json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = json;
break;
case 101:
var json = [] ; $$[$0-2].push({tipo : "concatenar" , contenido : $$[$0-1] + " "}); json = $$[$0-2].concat($$[$0]); this.$ = json;
break;
case 102:
var val; if(Array.isArray($$[$0])){val = $$[$0];}else{val = [$$[$0]];};this.$ = val;
break;
case 106:
var json = []; json = json.concat($$[$0-1]); json.push({tipo : "concatenar" , contenido : $$[$0]}); this.$ = {tipo : "variable_let" , contenido : json};
break;
case 107:
var json = []; json = json.concat($$[$0-1]); json.push({tipo : "concatenar" , contenido : $$[$0]}); this.$ = {tipo : "variable_const" , contenido : json};
break;
case 108:
$$[$0-2].push({tipo : "concatenar" , contenido : $$[$0-1] +" "});var json = $$[$0-2].concat($$[$0]);this.$ = json;
break;
case 110:
var json = [{tipo : "identificador" ,contenido : $$[$0-2]},{tipo : "concatenar" ,contenido : $$[$0-1]},{tipo : "tipoDato" ,contenido : $$[$0]}];this.$ = json;
break;
case 111:
var json = [{tipo : "identificador" ,contenido : $$[$0-4]},{tipo : "concatenar" ,contenido : $$[$0-3]},{tipo : "tipoDato" ,contenido : $$[$0-2]},{tipo : "tipoDato" ,contenido : " " + $$[$0-1] + " "}];json = json.concat($$[$0]);this.$ = json;
break;
case 112:
var json = [{tipo : "identificador" ,contenido : $$[$0-4]},{tipo : "concatenar" ,contenido : " " + $$[$0-3] + " "},{tipo : "concatenar" ,contenido : $$[$0-2]}]; json = json.concat($$[$0-1]);json.push({tipo : "concatenar" ,contenido : $$[$0]});this.$ = json;
break;
case 113:
var json = [{tipo : "identificador" ,contenido : $$[$0-3]},{tipo : "concatenar" ,contenido : $$[$0-2]},{tipo : "tipoDato" ,contenido : $$[$0-1]},{tipo : "concatenar" ,contenido : $$[$0]}];this.$ = json;
break;
case 114:
var json = [{tipo : "identificador" ,contenido : $$[$0-5]},{tipo : "concatenar" ,contenido : $$[$0-4]},{tipo : "tipoDato" ,contenido : $$[$0-3]},{tipo : "concatenar" ,contenido : $$[$0-2]},{tipo : "concatenar" ,contenido : " " + $$[$0-1] + " "},{tipo : "expresion" ,contenido : $$[$0]}];this.$ = json;
break;
case 115:
var json = [{tipo : "identificador" ,contenido : $$[$0-6]},{tipo : "concatenar" ,contenido : $$[$0-5]},{tipo : "tipoDato" ,contenido : $$[$0-4]},{tipo : "concatenar" ,contenido : " " + $$[$0-3] + " "},{tipo : "concatenar" ,contenido : $$[$0-2]}];json = json.concat($$[$0-1]);json.push({tipo : "concatenar" ,contenido : $$[$0]});this.$ = json;
break;
case 116:
var json = [{tipo : "identificador" ,contenido : $$[$0-4]},{tipo : "concatenar" ,contenido : " " + $$[$0-3] + " "},{tipo : "concatenar" ,contenido : $$[$0-2]}]; json = json.concat($$[$0-1]);json.push({tipo : "concatenar" ,contenido : $$[$0]});this.$=json;
break;
case 117:
var temp = []; temp.push({tipo : "identificador" , contenido : $$[$0-4]});temp.push({tipo : "concatenar" , contenido : $$[$0-3]}); temp = temp.concat($$[$0-2]);temp.push({tipo : "concatenar" , contenido : $$[$0-1]});temp.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = { tipo : "llamadaF" , contenido : temp};
break;
case 118:
var json = $$[$0-2]; json.push({tipo : "concatenar" , contenido : $$[$0-1] + " "}); json = json.concat($$[$0]);this.$ = json;
break;
case 119:
var json;if(Array.isArray($$[$0])){json = $$[$0];}else{json = [$$[$0]]};this.$ = json;
break;
case 123:
$$[$0-2].push({tipo:"concatenar",contenido : $$[$0-1] + " "});$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 124:
this.$=[$$[$0]];
break;
case 125:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "tipoDato" , contenido : $$[$0]}]} ; this.$ = json;
break;
case 126:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-4]},{tipo : "concatenar" , contenido : $$[$0-3]},{tipo : "tipoDato" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "expresion" , contenido : $$[$0]}]} ; this.$ = json;
break;
case 127:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : $$[$0-2]},{tipo : "tipoDato" , contenido : $$[$0-1]}].concat($$[$0])} ; this.$ = json;
break;
case 128:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-5]},{tipo : "concatenar" , contenido : $$[$0-4]},{tipo : "tipoDato" , contenido : $$[$0-3]}].concat($$[$0-2])} ;json.push({tipo : "concatenar" , contenido : $$[$0-1]}); json.push({tipo : "expresion" , contenido : $$[$0]});this.$ = json;
break;
case 129:
var json = [{tipo : "concatenar" , contenido : $$[$0-5] + " "},{tipo : "identificador" , contenido : $$[$0-4] + " "},{tipo : "concatenar" , contenido : " " + $$[$0-3] + " "},{tipo : "concatenar" , contenido : $$[$0-2] + "\n"}]; json = json.concat($$[$0-1]);json = json.concat($$[$0]); this.$ = {tipo : "type" , contenido : json};
break;
case 130:
var json = []; $$[$0-2].push($$[$0-1]);json = $$[$0-2].concat($$[$0]);this.$ = json;
break;
case 131:
this.$=$$[$0];
break;
case 132:
var json = [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "tipoDato" , contenido : $$[$0]}];this.$ = json;
break;
case 133:
var json = [{tipo : "identificador" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : $$[$0-2]},{tipo : "tipoDato" , contenido : $$[$0-1]}].concat($$[$0]);this.$ = json;
break;
case 134: case 135:
this.$  = {tipo : "concatenar", contenido : $$[$0] + "\n"};
break;
case 136:
var json = [{tipo : "concatenar", contenido : "\n" +  $$[$0-1]},{tipo : "concatenar", contenido : $$[$0] + "\n"}];this.$=json;
break;
case 137:
this.$ = [{tipo : "concatenar", contenido : "\n" + $$[$0] + "\n"}];
break;
case 138:
var json = $$[$0-2];json.push($$[$0-1]); json = json.concat($$[$0]);this.$ =json;
break;
case 140:
var json = [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]}].concat($$[$0]);this.$ = json;
break;
case 141: case 142:
this.$ = {tipo : "concatenar" , contenido : $$[$0]};
break;
case 150:
var json = $$[$0-2] ; json.push({tipo : "concatenar" , contenido : $$[$0-1]});json = json.concat($$[$0]);this.$=json;
break;
case 152:
 var json = [{tipo : "identificador" , contenido : $$[$0-1]}].concat($$[$0]); this.$ = json;
break;
case 153:
 var json  = [{tipo : "identificador" , contenido : $$[$0]}]; this.$ = json;
break;
case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165: case 166: case 167:
 this.$ = expresion($$[$0-2],{ tipo : "concatenar", contenido : " " + $$[$0-1] + " "},$$[$0]);
break;
case 168: case 169:
 this.$ = unaria($$[$0-1],{ tipo : "concatenar", contenido : $$[$0] +" "}); 
break;
case 170: case 171: case 172: case 173:
 this.$ = unaria({ tipo : "concatenar", contenido : $$[$0-1]},$$[$0]); 
break;
case 175: case 176: case 177: case 178: case 179:
var json  = {tipo : "valor" , contenido : $$[$0]}; this.$ = json;
break;
case 180:
var json = [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}]; this.$ = json;
break;
case 181:
var json = [{tipo : "identificador" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : $$[$0-2]}]; var temp = json.concat($$[$0-1]); temp.push({tipo : "concatenar" , contenido : $$[$0]}); this.$ = temp;
break;
case 182:
this.$ = expresion({ tipo : "concatenar", contenido : $$[$0-2]},$$[$0-1],{ tipo : "concatenar", contenido : $$[$0]});
break;
case 184:
$$[$0-2].push({tipo : "concatenar" , contenido : $$[$0-1] });$$[$0-2].push({tipo : "concatenar" , contenido : $$[$0] });this.$=$$[$0-2];
break;
case 185:
var json  = [{tipo : "valor" , contenido : $$[$0-1]}].concat($$[$0]);this.$ = json;
break;
case 186:
var json = $$[$0-1].concat($$[$0]);this.$= json;
break;
case 187:
var json = [{tipo : "identificador" , contenido : $$[$0-4]},{tipo : "concatenar" , contenido : $$[$0-3] }].concat($$[$0-2]);json.push({tipo : "concatenar" , contenido : $$[$0-1] });json = json.concat($$[$0]);this.$ = json;
break;
case 188:
var exp;if(Array.isArray($$[$0-2])){exp = $$[$0-2];}else{exp = [$$[$0-2]];};var json = [{tipo : "concatenar" , contenido : $$[$0-3] }].concat(exp); json.push({tipo : "concatenar" , contenido : $$[$0-1] });json = json.concat($$[$0]);this.$ = json;
break;
case 189:
var json = [{tipo : "concatenar" , contenido : $$[$0-3] },{tipo : "concatenar" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1] }].concat($$[$0]); this.$ = json;
break;
case 190:
var json = $$[$0-2] ;json.push({tipo : "concatenar" , contenido : $$[$0-1] + " "}); json = json.concat($$[$0]);this.$ = json;
break;
case 191:
var json ; if(Array.isArray($$[$0])){json = $$[$0];}else{json = [$$[$0]];} ;this.$ = json;
break;
case 193:
var v = []; v = $$[$0-1].concat($$[$0]);this.$=v;
break;
case 195: case 198:
var temp;var json = [];if(Array.isArray($$[$0-1])){temp = $$[$0-1];}else{temp = [$$[$0-1]];};json.push({tipo : "concatenar" , contenido :$$[$0-4]});json.push({tipo : "concatenar" , contenido :$$[$0-3]});json.push({tipo : "concatenar" , contenido :$$[$0-2]});json = json.concat(temp);json.push({tipo : "concatenar" , contenido :$$[$0]});this.$ = json
break;
case 196: case 197:
var json = [{tipo : "concatenar" , contenido :$$[$0-3]},{tipo : "concatenar" , contenido :$$[$0-2]},{tipo : "concatenar" , contenido :$$[$0-1]},{tipo : "concatenar" , contenido :$$[$0]}];this.$ = json;
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,9:5,10:6,11:$V2,12:$V3,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi,108:40},{1:[3]},{5:[1,42]},o($Vj,[2,2]),o($Vj,$Vk,{9:5,10:6,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,47:28,108:40,8:43,7:44,2:$V0,11:$V2,12:$V3,41:$V4,42:$V5,43:$V6,44:$V7,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi}),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),{12:[1,45]},o($Vm,[2,18]),o($Vm,[2,19]),o($Vm,[2,42],{26:46,46:[1,47]}),o($Vm,[2,21]),o($Vm,[2,22]),o($Vm,[2,23]),o($Vm,[2,24]),o($Vm,[2,25]),o($Vm,[2,26]),o($Vm,[2,27]),o($Vm,[2,28]),o($Vm,[2,29]),o($Vm,[2,30]),o($Vm,[2,31]),{12:$Vn,92:48,93:49},{12:$Vn,92:51,93:49},{39:55,57:[1,56],67:[1,52],68:[1,53],69:[1,54],131:57,132:58},{12:$Vo,38:59,108:40},{12:$Vo,38:61,108:40},o($Vp,[2,39]),{13:[1,62]},{57:[1,63]},{13:[1,64]},{16:[1,65]},{13:[1,66]},{40:[1,67]},{40:[1,68]},{12:$Vq,13:$Vr,38:83,40:[1,69],41:$Vs,45:70,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},o([57,67,68,69],$VB,{87:85,88:86,89:87,13:[1,84],80:$VC}),{12:[1,89]},{39:90,57:$VD,131:57,132:58},o($VE,[2,151]),{13:[1,92]},{1:[2,1]},o($Vj,[2,4]),o($Vj,$Vk,{9:5,10:6,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,47:28,108:40,7:44,8:93,2:$V0,11:$V2,12:$V3,41:$V4,42:$V5,43:$V6,44:$V7,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi}),{13:[1,94]},o($Vm,[2,20]),{16:[1,96],47:95,48:$V8},{40:[1,97],79:$VF},o($VG,[2,109]),{18:[1,99],67:[1,100]},{40:[1,101],79:$VF},{12:$Vq,13:$Vr,16:$VH,38:83,41:$Vs,45:103,68:$Vt,69:$Vu,75:102,80:$VI,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{40:$VJ,76:106,77:107,78:108,79:$VK},{40:$VJ,76:110,77:107,78:108,79:$VK},{40:[1,111]},{12:$Vo,108:112,133:$VL,134:$VM,135:$VN,136:$VO},o($VP,[2,192],{132:117,57:$VD}),o($VQ,[2,194]),{40:$VJ,57:$VR,76:118,77:107,78:108,79:$VK},o($VE,$VB,{87:85,88:86,89:87,80:$VC}),{40:$VJ,57:$VR,76:120,77:107,78:108,79:$VK},{12:$Vq,13:$Vr,38:83,41:$Vs,45:121,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{58:[1,122]},{12:$Vq,13:$Vr,38:83,41:$Vs,45:123,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{2:$VS,10:127,12:$V3,17:$VT,20:124,21:125,22:126,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi,108:40},{12:[1,133],64:129,66:[1,132],70:131,71:[1,134],73:130},o($Vm,[2,34]),o($Vm,[2,35]),o($Vm,[2,36]),{40:[1,135],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},o($V61,[2,174],{68:[1,151],69:[1,150]}),{12:$Vq,13:$Vr,38:83,41:$Vs,108:40,123:152,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,108:40,123:153,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,108:40,123:154,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:155,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},o($VP,[2,175]),o($VP,[2,176]),o($VP,[2,177]),o($VP,[2,178]),o($VP,[2,179],{131:57,132:58,39:156,57:$VD}),o($VQ,$VB,{87:85,88:86,89:87,13:[1,157],80:$VC}),{12:$Vq,13:$Vr,38:83,41:$Vs,45:158,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},o($VP,[2,183],{131:57,132:58,39:160,57:[1,159]}),o($V71,$V81,{108:40,123:71,38:83,59:161,45:162,12:$Vq,13:$Vr,41:$Vs,68:$Vt,69:$Vu,118:$Vv,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA}),o($VE,[2,152]),o($VE,[2,95],{89:163,80:$VC}),o($V91,[2,97]),{12:$Vq,13:$Vr,16:$Va1,38:83,41:$Vs,45:167,68:$Vt,69:$Vu,80:$Vb1,81:164,82:$Vc1,90:165,91:166,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{67:[1,170]},{40:[1,171]},{133:$VL,134:$VM,135:$VN,136:$VO},{12:$Vq,13:$Vr,38:83,41:$Vs,45:172,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},o($Vj,[2,5]),{12:$Vd1,14:173,15:[2,122],94:174,95:175},o($Vp,[2,38]),{2:$VS,10:127,12:$V3,17:$VT,20:177,21:125,22:126,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi,108:40},o($Vm,[2,106]),{12:$Vn,93:178},{12:$Ve1,19:179,103:$Vf1,104:$Vg1,105:$Vh1,106:$Vi1},{16:[1,186],80:[1,185]},o($Vm,[2,107]),{40:[1,187]},o($Vj1,[2,88],{109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),{12:$Vq,13:$Vr,16:$Va1,38:83,41:$Vs,45:167,68:$Vt,69:$Vu,80:$Vb1,81:188,82:$Vc1,90:165,91:166,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vk1,83:189,102:190},{40:[1,192]},{40:[2,79],78:193,79:$VK},o($VG,[2,82]),{12:[1,194],68:[1,195],69:[1,196]},{40:[1,197]},o($Vm,[2,32]),o($VE,[2,150]),{13:[1,198]},{13:[1,199]},{13:[1,200]},{13:[1,201]},o($VQ,[2,193]),{40:[1,202]},{12:$Vo,108:112},{40:[1,203]},{15:[1,204],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},{13:[1,205]},{15:[1,206],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},{17:[1,207]},o($Vl1,[2,12],{23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,47:28,108:40,10:127,22:208,2:$VS,12:$V3,41:$V4,42:$V5,43:$V6,44:$V7,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi}),o($Vm1,[2,15]),o($Vm1,[2,16]),o($Vm1,[2,17]),{12:$Vq,13:$Vr,38:83,41:$Vs,45:209,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{15:[1,210]},{15:[1,211]},{12:[1,212]},{40:[1,213],67:[1,214],72:[1,216],74:[1,215]},{12:[1,217]},o($Vm,[2,37]),{12:$Vq,13:$Vr,38:83,41:$Vs,45:218,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:219,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:220,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:221,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:222,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:223,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:224,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:225,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:226,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:227,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:228,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:229,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:230,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:231,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},o($V61,[2,168]),o($V61,[2,169]),o($V61,[2,170]),o($V61,[2,171]),o($V61,[2,172]),o($V61,[2,173]),o($VP,[2,185]),{12:$Vq,13:$Vr,15:[1,232],38:83,41:$Vs,45:234,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA,129:233},{15:[1,235],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},{12:$Vo,108:112,130:[1,236],133:$VL,134:$VM,135:$VN,136:$VO},o($VP,[2,186]),{15:[1,237],79:$Vn1},o($V71,[2,119],{109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($V91,[2,96]),{82:[1,239]},{79:[1,240],82:[2,99]},o($Vo1,[2,102]),o($Vo1,[2,103],{109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),{12:$Vq,13:$Vr,16:$Va1,38:83,41:$Vs,45:167,68:$Vt,69:$Vu,80:$Vb1,81:241,82:$Vc1,90:165,91:166,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vk1,83:242,102:190},{16:[1,243]},o($Vm,[2,33]),{15:[1,244],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},{15:[1,245]},{15:[2,121],79:[1,246]},o($V71,[2,124]),{18:[1,247]},{17:[1,248]},o($VG,[2,108]),o($VG,[2,110],{84:250,85:251,86:252,67:[1,249],80:$Vp1}),o($Vq1,[2,143]),o($Vq1,[2,144]),o($Vq1,[2,145]),o($Vq1,[2,146]),o($Vq1,[2,147]),{12:$Vq,13:$Vr,16:$Va1,38:83,41:$Vs,45:167,68:$Vt,69:$Vu,80:$Vb1,81:254,82:$Vc1,90:165,91:166,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vk1,83:255,102:190},o($Vm,[2,74]),{82:[1,256]},{17:[1,257],40:$Vr1,79:$Vs1,101:258},o($Vt1,[2,139]),{18:[1,261]},o($Vm,[2,75]),o($VG,[2,81]),{67:[1,262],68:[1,263],69:[1,264]},{12:[1,265]},{12:[1,266]},o($Vm,[2,77]),{12:$Vq,13:$Vr,38:83,41:$Vs,45:267,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{15:[1,268]},{15:[1,269]},{12:$Vq,13:$Vr,38:83,41:$Vs,45:234,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA,129:270},o($Vm,[2,76]),o($Vm,[2,78]),{16:[1,271]},o($V71,$V81,{108:40,123:71,38:83,45:162,59:272,12:$Vq,13:$Vr,41:$Vs,68:$Vt,69:$Vu,118:$Vv,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA}),{16:[1,273]},{61:[1,274]},o($Vm1,[2,14]),{40:[1,275],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},{16:[1,276]},{16:[1,277]},{18:[1,278],67:[1,279],72:[1,281],74:[1,280]},o($Vu1,[2,59]),{12:$Vq,13:$Vr,38:83,41:$Vs,45:282,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:[1,283]},{12:[1,284]},{72:[1,286],74:[1,285]},o($Vv1,[2,154],{111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($Vv1,[2,155],{111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($Vw1,[2,156],{117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($Vw1,[2,157],{117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($Vw1,[2,158],{117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($Vw1,[2,159],{117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($Vw1,[2,160],{117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($Vw1,[2,161],{117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($Vx1,[2,162],{119:$V21,120:$V31,121:$V41,122:$V51}),o($Vx1,[2,163],{119:$V21,120:$V31,121:$V41,122:$V51}),o($Vy1,[2,164],{121:$V41,122:$V51}),o($Vy1,[2,165],{121:$V41,122:$V51}),o($V61,[2,166]),o($V61,[2,167]),o($VP,[2,180],{131:57,132:58,39:287,57:$VD}),{15:[1,288],79:$Vz1},o($V71,[2,191],{109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($VP,[2,182],{131:57,132:58,39:290,57:$VD}),o($VP,[2,184]),{40:[1,291]},{12:$Vq,13:$Vr,38:83,41:$Vs,45:292,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},o($V91,[2,98]),{12:$Vq,13:$Vr,16:$Va1,38:83,41:$Vs,45:167,68:$Vt,69:$Vu,80:$Vb1,91:293,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{82:[1,294]},{17:[1,295],40:$Vr1,79:$Vs1,101:258},{12:$VA1,97:296,100:297},{16:[1,299]},{16:[1,300],18:[1,301]},{12:$Vd1,95:302},{12:$Ve1,19:303,103:$Vf1,104:$Vg1,105:$Vh1,106:$Vi1},o($Vm,[2,41]),{12:$Vq,13:$Vr,16:[1,305],38:83,41:$Vs,45:304,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},o($VG,[2,113],{67:[1,306]}),o([15,17,40,67,79],[2,91],{86:307,80:$Vp1}),o($VB1,[2,93]),{82:[1,308]},{82:[1,309]},{17:[1,310],40:$Vr1,79:$Vs1,101:258},o($Vj1,[2,89]),o($Vj1,[2,90]),{12:$Vk1,102:311},{12:[2,141]},{12:[2,142]},{12:$Vq,13:$Vr,16:$VH,38:83,41:$Vs,45:103,68:$Vt,69:$Vu,75:312,80:$VI,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:$Vq,13:$Vr,38:83,41:$Vs,45:313,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},o($VG,[2,84]),o($VG,[2,86]),o($VG,[2,85]),o($VG,[2,87]),{15:[1,314],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},o($VQ,[2,196]),o($VQ,[2,197]),{15:[1,315],79:$Vz1},o($VC1,[2,45],{50:316,52:317,53:318,54:$VD1}),{15:[1,320],79:$Vn1},{2:$VS,10:127,12:$V3,17:$VT,20:321,21:125,22:126,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi,108:40},{13:[1,322]},{12:[1,324],65:323,68:[1,325],69:[1,326]},{2:$VS,10:127,12:$V3,17:$VT,20:327,21:125,22:126,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi,108:40},{2:$VS,10:127,12:$V3,17:$VT,20:328,21:125,22:126,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi,108:40},{12:$Ve1,19:329,103:$Vf1,104:$Vg1,105:$Vh1,106:$Vi1},{12:$Vq,13:$Vr,38:83,41:$Vs,45:330,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{12:[1,331]},{12:[1,332]},{40:[1,333],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},{15:[2,73]},{15:[2,69]},{12:[1,334]},{12:[1,335]},o($VP,[2,189]),o($VP,[2,181],{131:57,132:58,39:336,57:$VD}),{12:$Vq,13:$Vr,38:83,41:$Vs,45:337,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},o($VP,[2,188]),o($Vm,[2,117]),o($V71,[2,118],{109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($Vo1,[2,101]),o($Vo1,[2,104]),o($Vo1,[2,105]),{17:[1,340],40:[1,342],79:[1,341],98:338,99:339},o($Vt1,[2,131]),{18:[1,343]},{2:$VS,10:127,12:$V3,17:$VT,20:344,21:125,22:126,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi,108:40},{2:$V0,4:345,6:3,7:4,9:5,10:6,11:$V2,12:$V3,17:$V1,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi,108:40},{12:$Ve1,19:346,103:$Vf1,104:$Vg1,105:$Vh1,106:$Vi1},o($V71,[2,123]),o($V71,[2,125],{85:251,86:252,84:348,67:[1,347],80:$Vp1}),o($VG,[2,111],{109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),{12:$Vk1,83:349,102:190},{80:$VC,87:350,88:86,89:87},o($VB1,[2,92]),o($VB1,[2,94]),o($VG,[2,112]),o($VG,[2,116]),o($Vt1,[2,138]),o($Vt1,[2,140]),o($VG,[2,83],{109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($VQ,[2,195]),o($VQ,[2,198]),{17:[2,50],51:351,55:[1,352]},o($VC1,[2,44],{53:353,54:$VD1}),o($Vl1,[2,47]),{12:$Vq,13:$Vr,38:83,41:$Vs,45:354,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{40:[1,355]},{17:[1,356]},{12:$Vq,13:$Vr,38:83,41:$Vs,45:357,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{15:[1,358]},{67:[1,359],68:[1,360],69:[1,361]},{12:[1,362]},{12:[1,363]},{17:[1,364]},{17:[1,365]},{67:[1,366]},{40:[1,367],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},{15:[2,72]},{15:[2,68]},o($Vu1,[2,60]),{15:[2,71]},{15:[2,67]},o($VP,[2,187]),o($V71,[2,190],{109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51}),o($Vm,[2,129]),{12:$VA1,100:368},o($Vm,[2,137],{40:[1,369]}),{12:[2,134]},{12:[2,135]},{12:$Ve1,19:370,103:$Vf1,104:$Vg1,105:$Vh1,106:$Vi1},{17:[1,371]},{17:[1,372]},{16:[1,373]},{12:$Vq,13:$Vr,16:$VH,38:83,41:$Vs,45:103,68:$Vt,69:$Vu,75:374,80:$VI,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},o($V71,[2,127],{67:[1,375]}),{17:[1,376],40:$Vr1,79:$Vs1,101:258},o($VG,[2,114]),{17:[1,377]},{18:[1,378]},o($Vl1,[2,46]),{18:[1,379],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},o($Vm,[2,51]),o($Vm,[2,54]),{15:[1,380],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},{16:[1,381]},{12:$Vq,13:$Vr,38:83,41:$Vs,45:382,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},{15:[2,62]},{15:[2,64]},{15:[2,63]},{15:[2,65]},o($Vm,[2,70]),o($Vm,[2,66]),{12:$Vq,13:$Vr,38:83,41:$Vs,45:383,68:$Vt,69:$Vu,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},o($Vu1,[2,58]),o($Vt1,[2,130]),o($Vm,[2,136]),o($Vt1,[2,132],{85:251,86:252,84:384,80:$Vp1}),o($Vp,[2,40]),o($Vl,[2,10]),{2:$V0,4:385,6:3,7:4,9:5,10:6,11:$V2,12:$V3,17:$V1,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi,108:40},o($V71,[2,126]),{12:$Vq,13:$Vr,16:$VH,38:83,41:$Vs,45:103,68:$Vt,69:$Vu,75:386,80:$VI,108:40,118:$Vv,123:71,124:$Vw,125:$Vx,126:$Vy,127:$Vz,128:$VA},o($VG,[2,115]),o($Vm,[2,43]),{2:$VS,10:127,12:$V3,17:$VT,20:387,21:125,22:126,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi,108:40},o($Vl1,$VT,{23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,47:28,108:40,21:125,22:126,10:127,20:388,2:$VS,12:$V3,41:$V4,42:$V5,43:$V6,44:$V7,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi}),{40:[1,389]},{2:$VS,10:127,12:$V3,17:$VT,20:390,21:125,22:126,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,96:$Vi,108:40},{15:[2,61],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},{40:[1,391],109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41,122:$V51},o($Vt1,[2,133]),{17:[1,392]},o($V71,[2,128]),{17:[2,49]},o($Vl1,[2,48]),o($Vm,[2,55]),{17:[1,393]},o($Vu1,[2,57]),o($Vl,[2,11]),o($Vm,[2,56])],
defaultActions: {42:[2,1],259:[2,141],260:[2,142],283:[2,73],284:[2,69],331:[2,72],332:[2,68],334:[2,71],335:[2,67],341:[2,134],342:[2,135],360:[2,62],361:[2,64],362:[2,63],363:[2,65],387:[2,49]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var tablaErrores = [];

// funcion que retorna vector de operaciones con 2 operadores
function expresion(valor1, operador, valor2) {
    var json = [];
    json = json.concat(returnVector(valor1));
    json = json.concat(returnVector(operador));
    json = json.concat(returnVector(valor2));
    return json;
}

// funcion que retorna vector de operaciones con 1 operador
function unaria(valor1,valor2){
    var json = [];
    json = json.concat(returnVector(valor1));
    json = json.concat(returnVector(valor2));
    return json;
}

//funcion que retorna 1 vector
function returnVector(val){
    if(Array.isArray(val)==true){
        return val;
    }else{
        return [val];
    }
}

//funcion que desanida funciones anidadas
function recorrerJson(json){
    var instr = [];
    var t = [];
    var fPadre = "";
    var fHijo = "";
    if(json.tipo == "funcion" || json.tipo == "funcionT" ){
        for( var element of json.contenido){
            if(element.tipo == "identificador"){          
                    fPadre = element.contenido;
            }
            if(element.tipo == "instrucciones"){
                for(var ele of element.contenido){
                    var index = element.contenido.indexOf(ele);
                    if(ele.tipo == "funcion"){
                        t.push(ele);
                    }else if(ele.tipo == "funcionT"){
                        t.push(ele);
                    }else{
                        instr.push(ele);
                    }
                }   
                if(t.length != 0){
                  recV(fPadre,t,instr);
                }      
                element.contenido = instr;
                break;
            }
        }
    }
    if(t.length == 0){
        return json;
    }else{
        return t.concat([json]);
    }
}

//funcion que recorre vector de funciones desanidadas
function recV (idP ,t,instr){
    for(var element of t){
        var fH = element.contenido[0].contenido;
        for(var e of t){
            recursiva(idP,fH,e);
        }

        for(var el of instr){
            recursiva(idP,fH,el);
        }
    }
}

//funcion que busca llamadas a funciones de la funcion padre
function recursiva(idP ,idB ,arbol){
    if(arbol.tipo == "identificador"){
        if(arbol.contenido == idB){
            arbol.contenido = idP+"_"+arbol.contenido;
        }
    }else{
        if(Array.isArray(arbol.contenido)){
            for(var e of arbol.contenido){
                recursiva(idP,idB,e);
            }
        }
    }
}

//funcion que analiza el json formado de funciones anidadas para generar traduccion
function traducir(json){
    var traduccion = ""
    for(var element of json){
        if(element.tipo == "funcion"){
            traduccion += tFuncion(element)
        }else if(element.tipo == "funcionT"){
            traduccion += tFuncionT(element)
        }else if(element.tipo == "variable_let"){
            traduccion += decVariable(element, "let ");
        }else if(element.tipo == "variable_const"){
            traduccion += decVariable(element , "const ");
        }else if(element.tipo == "asignacion"){
            traduccion += asignacionV(element);
        }else if(element.tipo == "type"){
            traduccion += typesTraduccion(element);
        }else if(element.tipo == "contenidoGlobal"){
            traduccion += traducir(element.contenido);
        }else if(element.tipo == "llamadaF"){
            traduccion += llamadasFuncion(element);
        }else if(element.tipo == "imprimir"){
            traduccion += imprimirConsole(element.contenido) ;
        }else if(element.tipo == "break"){
            traduccion += "break;\n"
        }else if(element.tipo == "continue"){
            traduccion += "continue;\n"
        }else if(element.tipo == "return"){
            traduccion += "return;\n"
        }else if(element.tipo == "returnE"){
            traduccion += rConValor(element.contenido);
        }else if(element.tipo == "while"){
            traduccion += eWhile(element.contenido);
        }else if(element.tipo == "doWhile"){
            traduccion += eDoWhile(element.contenido)
        }else if(element.tipo == "for"){
            traduccion += eFor(element.contenido);
        }else if(element.tipo == "ForOf"){
            traduccion += eForOf(element.contenido);
        }else if(element.tipo == "ForIn"){
            traduccion += eForIn(element.contenido);
        }else if(element.tipo == "switch"){
            traduccion += eSwitch(element.contenido);
        }else if(element.tipo == "condicionalIf"){
            traduccion += eIf(element.contenido);
        }else if(element.tipo == "mstring"){
            traduccion += mString(element.contenido);
        }
    }
    return traduccion;
}

//funcion que retorna funcion para traduccion
function tFuncion(f){
    var cad= "";
    var par = "";
    var inst ="";
    par = parametros(f.contenido[1].contenido);
    inst = traducir(f.contenido[2].contenido);
    cad += "function " + f.contenido[0].contenido  + "(" + par +  "){\n";
    cad += inst;
    cad += "}\n\n";
    return cad;
}

//funcion que retorna funcion con tipo para traduccion
function tFuncionT(f){
    var cad= "";
    var par = "";
    var inst ="";
    par = parametros(f.contenido[1].contenido);
    inst = traducir(f.contenido[3].contenido);
    cad += "function " + f.contenido[0].contenido  + "(" + par +  ") : "+ f.contenido[2].contenido +"{\n";
    cad += inst;
    cad += "}\n\n";
    return cad;
}

//funcion que retorna parametros para traduccion
function parametros(f){
    var cad = "";
    for(var element of f){
        if(element.tipo == "parametro"){
            for(var ele of element.contenido){
                if(ele.tipo == "expresion"){
                    for(var e of ele.contenido){
                        cad += e.contenido;
                    }
                }else{
                    cad += ele.contenido;
                }
            }
        }else if(element.tipo == "concatenar"){
            cad += element.contenido + " ";
        }
    }
    return cad;
}

// funcion que retorna declaracion de variables para traduccion
function decVariable (f, tip){
    var cad = tip;
    for(var ele of f.contenido){
        if(ele.tipo == "expresion"){
            for(var e of ele.contenido){
                cad+= e.contenido;
            }
        }else{
            if(Array.isArray(ele.contenido)){
                for(var e of ele.contenido){
                    cad += e.contenido;
                }
            }else{
             cad+= ele.contenido;   
            }
            //console.log(cad);
        }
    }
    cad+= "\n";
    return cad;
}

// funcion que retorna asignacion de valores para la traduccion
function asignacionV (f){
    var cad = "";
    for(var element of f.contenido){
        cad += element.contenido;
    }
    cad += "\n";
    return cad;
}

// funcion que retorna declaracion de types para la traduccion
function typesTraduccion (f){
    var cad = "";
    for(var element of f.contenido){
        cad += element.contenido;
    }
    cad += "\n";
    return cad;
}

//funcion que retorna las llamadas a funcion para la traduccion
function llamadasFuncion(f){
    var cad = "";
    for(var element of f.contenido){
        cad += element.contenido;
    }
    cad += "\n";
    return cad;
}

//funcion que retorna la funcion imprimir para la traduccion
function imprimirConsole(f){
    var cad = "console.log(";
    for(var element of f ){
        cad += element.contenido;
    }
    cad += ");\n";
    return cad;
}

//funcion que devuelve el return con valor para traduccion
function rConValor(f){
    var cad = "return "
    for(var element of f){
        if(element.tipo == "expresion"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
        }
    }
    cad += ";\n";
    return cad;
}

//funcion que devuelve el while para traduccion
function eWhile(f){
    cad ="\nwhile( ";
    for(var element of f){
        if(element.tipo == "condicionWhile"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad +=" ){\n";
        }else if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
        }
    }
    cad +="}\n";
    return cad;
}

//funcion que devuelve el dowhile para traduccion
function eDoWhile(f){
    var cad = "\ndo{\n";
    for(var element of f){
        if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
            cad += "}while( "
        }else if(element.tipo == "condicionDoWhile"){
            for(var e of element.contenido){
                cad += e.contenido;
            }
        }
    }
    cad += " );\n"
    return cad;
}

//funcion que devuelve el for para traduccion
function eFor(f){
    var cad = "\nfor( ";
    for(var element of f){
        if(element.tipo == "inicioFor"){
            for(var ele of element.contenido){
                if(ele.tipo == "expresion"){
                    for(var e of ele.contenido){
                        cad += e.contenido; 
                    }
                }else{
                    cad+=ele.contenido;
                }
            }
        }else if(element.tipo == "condicionFor"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad += "; ";
        }else if(element.tipo == "finFor"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad+=" ){\n"
        }else if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
        }
    }
    cad+= "}\n";
    return cad;
}
//funcion que devuelve el for in para traduccion
function eForIn(f){
    var cad = "\nfor( ";
    for(var element of f){
        if(element.tipo == "condicionForIn"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad += " ){\n";
        }else if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
        }

    }
    cad += "}\n";
    return cad;
}
//funcion que devuelve el for of para traduccion
function eForOf(f){
    var cad = "\nfor( ";
    for(var element of f){
        if(element.tipo == "condicionForOf"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad += " ){\n";
        }else if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
        }
    }
    cad += "}\n"
    return cad;
}
//funcion que devuelve el switch para traduccion
function eSwitch(f){
    var cad = "switch( ";
    for(var element of f){
        if(element.tipo == "expresion"){
            for(var e of element.contenido){
                cad += e.contenido;
            }
            cad += " ){\n"
        }else if(element.tipo == "case"){
            cad += "case ";
            for(var ele of element.contenido){
                if(ele.tipo == "expresion"){
                    for(var p of ele.contenido){
                        cad += p.contenido
                    }
                }else if(ele.tipo == "concatenar"){
                    cad += ele.contenido;
                }else if(ele.tipo == "estructuras"){
                    cad += traducir(ele.contenido);
                }
            }
        }else if(element.tipo == "default"){
            cad += "default :\n"
            for(var ele of element.contenido){
                if(ele.tipo == "estructuras"){
                    cad+= traducir(ele.contenido);
                }
            }
        }
    }
    cad += "}\n";
    return cad;
}
//funcion que devuelve el if para traduccion
function eIf(f){
    var cad = "";
    for(var element of f){
        if(element.tipo ==  "if"){
            cad += "if( ";
            for(var ele of element.contenido){
                if(ele.tipo == "condicionIf"){
                    for(var e of ele.contenido){
                        cad += e.contenido
                    }
                    cad += " )\n{\n"
                }else if(ele.tipo == "estructuras"){
                    cad += traducir(ele.contenido);
                }
            }
        }else if(element.tipo ==  "elseIf"){
            cad += "}\nelse if( ";
            for(var ele of element.contenido){
                if(ele.tipo == "condicionIf"){
                    for(var e of ele.contenido){
                        cad += e.contenido
                    }
                    cad += " )\n{\n"
                }else if(ele.tipo == "estructuras"){
                    cad += traducir(ele.contenido);
                }
            }
        }else if(element.tipo == "else"){
            cad += "}\nelse\n{\n";
            for(var ele of element.contenido){
                if(ele.tipo == "estructuras"){
                    cad += traducir(ele.contenido);
                }
            }
        }
    }
    cad += "}\n";
    return cad;
}
//funcion que devuelve los metodos string para traduccion
function mString(f){
    var cad = "";
    for(var element of f){
        cad += element.contenido;
    }
    return cad+"\n";
}

function limpiarErrores(){
    tablaErrores = [];
}


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3: return 41; 
break;
case 4: return 41; 
break;
case 5:  return 103;  
break;
case 6:  return 104; 
break;
case 7:  return 105;  
break;
case 8:  return 96;    
break;
case 9:  return 106;    
break;
case 10:  return 66;   
break;
case 11:  return 71; 
break;
case 12:  return 'R_Array'; 
break;
case 13:  return 130;
break;
case 14:  return 11;
break;
case 15:  return 'R_New'; 
break;
case 16:  return 133; 
break;
case 17:  return 134;
break;
case 18:  return 135;
break;
case 19:  return 136; 
break;
case 20:  return 'R_Null';
break;
case 21:return 48;
break;
case 22:return 46;
break;
case 23:return 49;
break;
case 24:return 54;
break;
case 25:return 55;
break;
case 26:return 63;
break;
case 27:return 72;
break;
case 28:return 74;
break;
case 29:return 61;
break;
case 30:return 62;
break;
case 31:return 42;
break;
case 32:return 43;
break;
case 33:return 44;
break;
case 34:return 56;
break;
case 35:return 58;
break;
case 36:return 127;
break;
case 37:return 128;
break;
case 38:return 'R_Undefined';
break;
case 39:return 68;
break;
case 40:return 69;
break;
case 41:return 121;
break;
case 42:return 117;
break;
case 43:return 118;
break;
case 44:return 119;
break;
case 45:return 120;
break;
case 46:return 122;
break;
case 47:return 114;
break;
case 48:return 112;
break;
case 49:return 111;
break;
case 50:return 67;
break;
case 51:return 116;
break;
case 52:return 115;
break;
case 53:return 113;
break;
case 54:return 124;
break;
case 55:return 109;
break;
case 56:return 110;
break;
case 57:return 18;
break;
case 58:return 40;
break;
case 59:return 16;
break;
case 60:return 17;
break;
case 61:return 13;
break;
case 62:return 15;
break;
case 63:return 57;
break;
case 64:return 'S_ComillaSimple';
break;
case 65:return 79;
break;
case 66:return 'S_ComillaDoble';
break;
case 67:return 'S_Interrogacion';
break;
case 68:return 80;
break;
case 69:return 82;
break;
case 70:return 126;
break;
case 71:return 125;
break;
case 72:return 12;
break;
case 73:  return 5; 
break;
case 74:tablaErrores.push({ tipo  : ' Error_Lexico ', Error  : yy_.yytext ,  Fila  : yy_.yylloc.first_line , Columna  :  yy_.yylloc.first_column });
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[\"][^\\\"]*([\\][\\\"'ntr][^\\\"]*)*[\"])/i,/^(?:[\'][^\\\']*([\\][\\\'"ntr][^\\\']*)*[\'])/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:type\b)/i,/^(?:void\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:Array\b)/i,/^(?:length\b)/i,/^(?:function\b)/i,/^(?:new\b)/i,/^(?:CharAt\b)/i,/^(?:ToLowerCase\b)/i,/^(?:ToUpperCase\b)/i,/^(?:Concat\b)/i,/^(?:null\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:undefined\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:\\')/i,/^(?:,)/i,/^(?:")/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = DesanidarFuncion;
exports.Parser = DesanidarFuncion.Parser;
exports.parse = function () { return DesanidarFuncion.parse.apply(DesanidarFuncion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}