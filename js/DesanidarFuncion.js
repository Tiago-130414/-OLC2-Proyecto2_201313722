/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var DesanidarFuncion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[2,3],$V2=[1,8],$V3=[1,37],$V4=[1,39],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,41],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,23],$Vf=[1,26],$Vg=[1,27],$Vh=[1,24],$Vi=[1,38],$Vj=[5,17],$Vk=[2,6],$Vl=[2,5,11,12,17,41,42,43,44,48,49,56,61,62,63,66,68,69,71,98],$Vm=[2,5,11,12,17,41,42,43,44,48,49,54,55,56,61,62,63,66,68,69,71,98],$Vn=[1,50],$Vo=[1,60],$Vp=[2,5,11,12,17,41,42,43,44,46,48,49,54,55,56,61,62,63,66,68,69,71,98],$Vq=[1,82],$Vr=[1,83],$Vs=[1,80],$Vt=[1,73],$Vu=[1,72],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[1,79],$VB=[1,81],$VC=[2,151],$VD=[1,89],$VE=[1,92],$VF=[15,17,18,40,57,67,68,69,79,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$VG=[1,99],$VH=[40,79],$VI=[1,106],$VJ=[1,105],$VK=[2,79],$VL=[1,110],$VM=[1,114],$VN=[1,115],$VO=[1,116],$VP=[1,117],$VQ=[15,17,18,40,68,69,79,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$VR=[15,17,18,40,57,68,69,79,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$VS=[1,120],$VT=[1,129],$VU=[2,13],$VV=[1,137],$VW=[1,138],$VX=[1,139],$VY=[1,140],$VZ=[1,141],$V_=[1,142],$V$=[1,143],$V01=[1,144],$V11=[1,145],$V21=[1,146],$V31=[1,147],$V41=[1,148],$V51=[1,149],$V61=[1,150],$V71=[15,17,18,40,79,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$V81=[15,79],$V91=[2,118],$Va1=[15,17,18,40,57,67,68,69,79,80,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$Vb1=[1,171],$Vc1=[1,170],$Vd1=[2,99],$Ve1=[1,178],$Vf1=[1,186],$Vg1=[1,182],$Vh1=[1,183],$Vi1=[1,184],$Vj1=[1,185],$Vk1=[15,17,40,79],$Vl1=[1,192],$Vm1=[17,54,55],$Vn1=[2,12,17,41,42,43,44,48,49,54,55,56,61,62,63,66,68,69,71,98],$Vo1=[1,240],$Vp1=[79,82],$Vq1=[1,255],$Vr1=[15,16,17,40,67,79,80],$Vs1=[1,261],$Vt1=[1,260],$Vu1=[17,40,79],$Vv1=[12,13,41,68,69,120,126,127,128,129,130,131],$Vw1=[15,17,18,40,79,82,111,112],$Vx1=[15,17,18,40,79,82,111,112,113,114,115,116,117,118],$Vy1=[15,17,18,40,79,82,111,112,113,114,115,116,117,118,119,120],$Vz1=[15,17,18,40,79,82,111,112,113,114,115,116,117,118,119,120,121,122],$VA1=[1,298],$VB1=[15,17,40,67,79,80],$VC1=[17,55],$VD1=[1,318];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONT":4,"EOF":5,"LISTA_CONTENIDO":6,"CONTENIDO":7,"LISTA_CONTENIDO_PRIM":8,"FUNCIONES":9,"ESTRUCTURAS_DE_CONTROL":10,"R_Funcion":11,"Identificador":12,"S_ParentesisAbre":13,"PARAM":14,"S_ParentesisCierra":15,"S_LlaveAbre":16,"S_LlaveCierra":17,"S_DosPuntos":18,"TIPOS_DE_DATO":19,"EDD":20,"LISTADO_ESTRUCTURAS":21,"CONT_ESTRUCTURAS_CONTROL":22,"VARIABLES":23,"ASIGNACION":24,"LISTADO_IF":25,"ELSE":26,"SWITCH":27,"IMPRIMIR":28,"WHILE":29,"DO_WHILE":30,"FOR":31,"FOR_OF":32,"FOR_IN":33,"SENTENCIAS_TRANSFERENCIA":34,"LLAMADA_FUNC":35,"TYPES":36,"M_STRING":37,"ATRIBUTOS":38,"MET_STRING":39,"S_PuntoComa":40,"Cadena":41,"R_Break":42,"R_Continue":43,"R_Return":44,"EXPRESION_G":45,"R_Else":46,"IF":47,"R_If":48,"R_Switch":49,"CASE":50,"DEFINIR_DEFAULT":51,"LISTA_CASE":52,"DEFINIR_CASE":53,"R_Case":54,"R_Default":55,"R_Console":56,"S_Punto":57,"R_Log":58,"PARAMETROS_FUNC":59,"FUNC":60,"R_While":61,"R_Do":62,"R_For":63,"CONT_FOR":64,"FIN_FOR":65,"R_Let":66,"S_Igual":67,"OP_Incremento":68,"OP_Decremento":69,"CONT_FOR_IN":70,"R_Const":71,"R_In":72,"CONT_FOR_OF":73,"R_Of":74,"LISTA_DE_ASIGNACIONES":75,"COMPLETAR_ASIGNACION":76,"LISTADO_ASIGNACION":77,"CONTENIDO_ASIGNACION":78,"S_Coma":79,"S_CorcheteAbre":80,"CONT_ASIG_ARRAY":81,"S_CorcheteCierra":82,"LISTA_DECLARACION_TYPES":83,"L_CORCHETE":84,"L_C":85,"LISTA_CORCHETE":86,"L_CORCHETE_V":87,"L_C_V":88,"LISTA_AS_MV":89,"LISTA_ASIGN_ARRAY":90,"CONT_ARRAY_ASIGN_VV":91,"LISTADO_VAR":92,"CONT_VAR":93,"R_New":94,"R_Array":95,"LISTA_PARAMETROS":96,"PARAMETROS":97,"T_Type":98,"LISTA_TYPES":99,"FIN_TYPES":100,"SEPARADOR":101,"CONTENIDO_TYPES":102,"SEPARADOR_DECLARACION_TYPES":103,"CONTENIDO_DECLARACION_TYPES":104,"T_Number":105,"T_Boolean":106,"T_String":107,"T_Void":108,"TIPAR_FUNCION":109,"CONT_ATRIBUTOS":110,"LOG_Concatenar":111,"LOG_OR":112,"REL_IgualIgual":113,"REL_MayorIgualQue":114,"REL_MayorQue":115,"REL_MenorIgualQue":116,"REL_MenorQue":117,"REL_Distinto":118,"OP_Mas":119,"OP_Menos":120,"OP_Multiplicacion":121,"OP_Division":122,"OP_Exponenciacion":123,"OP_Modulo":124,"CONTENIDO_EXPRESION":125,"LOG_Not":126,"Entero":127,"Decimal":128,"R_True":129,"R_False":130,"R_Null":131,"OPCIONAL":132,"R_Length":133,"L_MET_STRING":134,"CONT_MET_STRING":135,"R_CharAt":136,"R_Tlower":137,"R_Touppper":138,"R_Concat":139,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"R_Funcion",12:"Identificador",13:"S_ParentesisAbre",15:"S_ParentesisCierra",16:"S_LlaveAbre",17:"S_LlaveCierra",18:"S_DosPuntos",40:"S_PuntoComa",41:"Cadena",42:"R_Break",43:"R_Continue",44:"R_Return",46:"R_Else",48:"R_If",49:"R_Switch",54:"R_Case",55:"R_Default",56:"R_Console",57:"S_Punto",58:"R_Log",61:"R_While",62:"R_Do",63:"R_For",66:"R_Let",67:"S_Igual",68:"OP_Incremento",69:"OP_Decremento",71:"R_Const",72:"R_In",74:"R_Of",79:"S_Coma",80:"S_CorcheteAbre",82:"S_CorcheteCierra",94:"R_New",95:"R_Array",98:"T_Type",105:"T_Number",106:"T_Boolean",107:"T_String",108:"T_Void",111:"LOG_Concatenar",112:"LOG_OR",113:"REL_IgualIgual",114:"REL_MayorIgualQue",115:"REL_MayorQue",116:"REL_MenorIgualQue",117:"REL_MenorQue",118:"REL_Distinto",119:"OP_Mas",120:"OP_Menos",121:"OP_Multiplicacion",122:"OP_Division",123:"OP_Exponenciacion",124:"OP_Modulo",126:"LOG_Not",127:"Entero",128:"Decimal",129:"R_True",130:"R_False",131:"R_Null",133:"R_Length",136:"R_CharAt",137:"R_Tlower",138:"R_Touppper",139:"R_Concat"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[8,2],[8,0],[7,1],[7,1],[7,1],[9,8],[9,10],[20,1],[20,0],[21,2],[21,1],[22,1],[22,1],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[37,3],[37,3],[34,2],[34,2],[34,2],[34,3],[25,3],[25,1],[47,7],[26,4],[26,0],[27,8],[50,1],[50,0],[52,2],[52,1],[53,4],[51,3],[51,0],[28,7],[60,1],[60,0],[29,7],[30,9],[31,10],[64,7],[64,2],[64,4],[65,3],[65,2],[65,2],[65,2],[65,2],[33,7],[70,4],[70,4],[70,3],[32,7],[73,4],[73,4],[73,3],[24,4],[24,4],[24,4],[24,4],[24,4],[76,1],[76,0],[77,2],[77,1],[78,4],[78,3],[78,3],[78,3],[78,3],[75,1],[75,3],[75,3],[84,1],[85,2],[85,1],[86,2],[87,1],[88,2],[88,1],[89,3],[81,1],[81,0],[90,3],[90,1],[91,1],[91,3],[91,3],[23,3],[23,3],[92,3],[92,1],[93,3],[93,5],[93,6],[93,10],[93,7],[93,5],[35,5],[59,3],[59,1],[59,0],[14,1],[14,0],[96,3],[96,1],[97,3],[97,5],[97,4],[97,6],[36,6],[99,3],[99,1],[102,3],[102,4],[101,1],[101,1],[100,2],[100,1],[83,3],[83,1],[104,3],[103,1],[103,1],[19,1],[19,1],[19,1],[19,1],[19,1],[109,2],[109,0],[38,3],[38,1],[110,2],[110,1],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,3],[45,2],[45,2],[45,2],[45,2],[45,2],[45,2],[45,1],[125,1],[125,1],[125,1],[125,1],[125,1],[125,1],[125,3],[125,4],[125,3],[125,1],[125,3],[125,2],[125,2],[125,5],[125,4],[125,4],[125,3],[132,3],[132,1],[39,1],[134,2],[134,1],[135,5],[135,4],[135,4],[135,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
var t = { tipo : "contenidoGlobal" , contenido : $$[$0-1]};var tErr = tablaErrores;limpiarErrores();return {traduccion : traducir($$[$0-1]) , errores : tErr};
break;
case 3: case 42: case 45: case 50: case 79: case 99: case 118:
this.$ = [];
break;
case 4: case 5: case 81: case 87: case 92: case 96: case 102: case 108: case 137: case 149: case 182: case 194:
this.$ = $$[$0];
break;
case 6:

                                                                var pila = eval('$$');
                                                                var valSintetizar = pila[pila.length - 1 ];
                                                                this.$ = valSintetizar;
                                                                
break;
case 7:
 
                                        var pila = eval('$$');
                                        //console.log(pila);
                                        var anterior = pila[pila.length - 2]; 
                                        if(Array.isArray(anterior)){
                                            var temp = anterior.concat($$[$0]);
                                            //console.log(temp);
                                        }else{
                                            if(Array.isArray($$[$0])){
                                                var temp = $$[$0];
                                                //console.log(temp);
                                            }else{

                                                var temp  = [$$[$0]];
                                                //console.log(temp);
                                            }
                                        }
                                        this.$ = temp;
                                        
break;
case 8:
 
                                        var pila = eval('$$');
                                        //console.log(pila);
                                        var anterior = pila[pila.length - 2];  
                                        if(Array.isArray(anterior)){
                                            var temp = anterior.concat($$[$0]);
                                        }else{
                                            if(Array.isArray($$[$0])){
                                                var temp = $$[$0];
                                            }else{
                                                var temp  = [$$[$0]];
                                            }
                                        }
                                        this.$ = temp;
                                        
break;
case 9: case 17:
this.$ ='';tablaErrores.push({ tipo  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
case 10:
var json  = { tipo: "funcion" , contenido : [{tipo : "identificador", contenido : $$[$0-6]},{tipo : "parametros", contenido : $$[$0-4]},{tipo : "instrucciones", contenido : $$[$0-1]}]};this.$ =recorrerJson(json);
break;
case 11:
var json = {tipo : "funcionT" ,contenido : [{tipo : "identificador", contenido : $$[$0-8]},{tipo : "parametros", contenido : $$[$0-6]},{tipo : "tipoDato", contenido : $$[$0-3]},{tipo : "instrucciones", contenido : $$[$0-1]}] }; this.$ =recorrerJson(json);
break;
case 12:
this.$ = {tipo : "estructuras" , contenido : $$[$0]};
break;
case 13:
this.$ = {tipo : "estructuras" , contenido : []};
break;
case 14:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1];
break;
case 15: case 47:
this.$ = [$$[$0]];
break;
case 20:
var json = $$[$0-1]; json =  json.concat($$[$0]) ;this.$ = {tipo : "condicionalIf" , contenido : json };
break;
case 32:
var json = $$[$0-2].concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$={tipo : "mstring" , contenido : json};
break;
case 33:
var json = [{tipo : "concatenar" , contenido : $$[$0-2]}].concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "mstring" , contenido : json};
break;
case 34:
this.$ = {tipo : "break" , contenido : []};
break;
case 35:
this.$ = {tipo : "continue" , contenido : []};
break;
case 36:
this.$ = {tipo : "return" , contenido : []};
break;
case 37:
var exp = returnVector($$[$0-1]);var json = [{tipo : "expresion" , contenido : exp}];this.$ = {tipo : "returnE" , contenido : json};
break;
case 38:
var json = $$[$0-2];var temp = [{ tipo : "elseIf" , contenido : $$[$0]}]; json = json.concat(temp);this.$ = json;
break;
case 39:
this.$ = [{ tipo : "if" , contenido : $$[$0]}];
break;
case 40:
var exp ; if(Array.isArray($$[$0-4])){exp = $$[$0-4];}else{exp = [$$[$0-4]];} ;var json = [{tipo : "condicionIf" , contenido : exp},$$[$0-1]];this.$ =json;
break;
case 41:
var json = [{tipo : "else" , contenido : [$$[$0-1]]}];this.$ = json;
break;
case 43:
var exp ; if(Array.isArray($$[$0-5])){exp = $$[$0-5];}else{exp = [$$[$0-5]];} ;var json = [{tipo : "expresion" , contenido : exp}]; json = json.concat($$[$0-2]);json = json.concat($$[$0-1]);this.$ = {tipo : "switch" , contenido : json};
break;
case 46: case 80: case 91: case 95:
var json = $$[$0-1]; json = json.concat($$[$0]);this.$ = json;
break;
case 48:
var exp ; if(Array.isArray($$[$0-2])){exp = $$[$0-2];}else{exp = [$$[$0-2]];} ;var json = [{tipo : "expresion" , contenido : exp} , {tipo : "concatenar" , contenido : " " + $$[$0-1] + "\n"} ,$$[$0]]; this.$ = {tipo : "case" , contenido : json};
break;
case 49:
this.$ = [{tipo : "default" , contenido : [$$[$0]]}];
break;
case 51:
this.$ = {tipo : "imprimir" , contenido : $$[$0-2] };
break;
case 52:
var json; if(Array.isArray($$[$0])){json = $$[$0];}else{json = [$$[$0]];};this.$ = json;
break;
case 53: case 120:
this.$=[];
break;
case 54:
 var exp = returnVector($$[$0-4]) ; var json = [{ tipo : "condicionWhile" , contenido : exp} , $$[$0-1] ]; this.$ = {tipo : "while" , contenido : json}; 
break;
case 55:
var exp ; if(Array.isArray($$[$0-2])){exp = $$[$0-2];}else{exp = [$$[$0-2]];} ;var json = [$$[$0-6] , { tipo : "condicionDoWhile" , contenido : exp}]; this.$ = {tipo : "doWhile" , contenido : json};
break;
case 56:
var exp ; if(Array.isArray($$[$0-6])){exp = $$[$0-6];}else{exp = [$$[$0-6]];} ; var json = [{tipo : "inicioFor" , contenido : $$[$0-7]},{tipo : "condicionFor" , contenido : exp},{tipo : "finFor" , contenido : $$[$0-4]},$$[$0-1]]; this.$ = {tipo : "for" , contenido : json}; 
break;
case 57:
var exp = returnVector($$[$0-1]); var json = [{tipo : "variable_let" , contenido : $$[$0-6]},{tipo : "identificador" , contenido : $$[$0-5]},{tipo : "concatenar" , contenido : $$[$0-4]},{tipo : "tipoDato" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : " " + $$[$0-2]+ " "},{tipo : "expresion" , contenido : exp},{tipo : "concatenar" , contenido : $$[$0] +" "}];this.$=json;
break;
case 58:
 var json = [{tipo : "identificador", contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}];this.$ = json;
break;
case 59:
var exp = returnVector($$[$0-1]);var json = [{tipo : "identificador", contenido : $$[$0-3]},{tipo : "concatenar" , contenido : " " + $$[$0-2] + " "},{tipo : "expresion" , contenido : exp},{tipo : "concatenar" , contenido : $$[$0]}];this.$ = json;
break;
case 60:
 var exp = returnVector($$[$0]);var  json = [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "expresion" , contenido : exp}]; this.$ = json;
break;
case 61: case 63:
 var  json = [{tipo : "identificador" , contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}]; this.$ = json;
break;
case 62: case 64:
 var  json = [{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "identificador" , contenido : $$[$0]}]; this.$ = json;
break;
case 65:
var json = [{tipo : "condicionForIn" , contenido : $$[$0-4]},$$[$0-1]];this.$ = {tipo : "ForIn" , contenido : json};
break;
case 66: case 70:
var json = [{tipo : "variable_const" , contenido : $$[$0-3] + " "},{tipo : "identificador" , contenido : $$[$0-2] + " "},{tipo : "concatenar" , contenido : $$[$0-1] + " "},{tipo : "identificador" , contenido : $$[$0]}];this.$ = json;
break;
case 67: case 71:
var json = [{tipo : "variable_let" , contenido : $$[$0-3] + " "},{tipo : "identificador" , contenido : $$[$0-2] + " "},{tipo : "concatenar" , contenido : $$[$0-1] + " "},{tipo : "identificador" , contenido : $$[$0]}];this.$ = json;
break;
case 68: case 72:
var json = [{tipo : "identificador" , contenido : $$[$0-2] + " "},{tipo : "concatenar" , contenido : $$[$0-1] + " "},{tipo : "identificador" , contenido : $$[$0] + " "}];this.$ = json;
break;
case 69:
var json = [{tipo : "condicionForOf" , contenido : $$[$0-4]},$$[$0-1]];this.$ = {tipo : "ForOf" , contenido : json};
break;
case 73:
var json = $$[$0-3]; json.push({tipo : "concatenar" , contenido : " " + $$[$0-2] + " "}); json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "asignacion" , contenido : json};
break;
case 74: case 76:
var json = $$[$0-3]; json.push({tipo : "concatenar" , contenido : $$[$0-2]}); json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "asignacion" , contenido : json};
break;
case 75:
var json = [{tipo : "concatenar", contenido : $$[$0-3]}]; json = json.concat($$[$0-2]);json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "asignacion" , contenido : json};
break;
case 77:
var json = [{tipo : "concatenar", contenido : $$[$0-3]}]; json = json.concat($$[$0-2]); json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "asignacion" , contenido : json};
break;
case 82:
 var json = [{tipo : "concatenar" , contenido : $$[$0-3] + " "},{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : " " + $$[$0-1] + " "}]; json = json.concat($$[$0]);this.$ = json;
break;
case 83: case 85:
 var json = [{tipo : "concatenar" , contenido : $$[$0-2] + " "},{tipo : "identificador" , contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}];this.$ = json;
break;
case 84: case 86:
 var json = [{tipo : "concatenar" , contenido : $$[$0-2] + " "},{tipo : "concatenar"    , contenido : $$[$0-1]},{tipo : "identificador" , contenido : $$[$0]}]; this.$ = json;
break;
case 88: case 89: case 103: case 104:
var json = []; json.push({tipo : "concatenar" , contenido : $$[$0-2]});json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]}); this.$ = json;
break;
case 93:
this.$ = [{tipo : "concatenar" , contenido : "["+"]" }];
break;
case 97:
var json = [{tipo : "concatenar" , contenido : $$[$0-2]}].concat($$[$0-1]); json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = json;
break;
case 100:
var json = [] ; $$[$0-2].push({tipo : "concatenar" , contenido : $$[$0-1] + " "}); json = $$[$0-2].concat($$[$0]); this.$ = json;
break;
case 101:
var val; if(Array.isArray($$[$0])){val = $$[$0];}else{val = [$$[$0]];};this.$ = val;
break;
case 105:
var json = []; json = json.concat($$[$0-1]); json.push({tipo : "concatenar" , contenido : $$[$0]}); this.$ = {tipo : "variable_let" , contenido : json};
break;
case 106:
var json = []; json = json.concat($$[$0-1]); json.push({tipo : "concatenar" , contenido : $$[$0]}); this.$ = {tipo : "variable_const" , contenido : json};
break;
case 107:
$$[$0-2].push({tipo : "concatenar" , contenido : $$[$0-1] +" "});var json = $$[$0-2].concat($$[$0]);this.$ = json;
break;
case 109:
var json = [{tipo : "identificador" ,contenido : $$[$0-2]},{tipo : "concatenar" ,contenido : $$[$0-1]},{tipo : "tipoDato" ,contenido : $$[$0]}];this.$ = json;
break;
case 110:
var json = [{tipo : "identificador" ,contenido : $$[$0-4]},{tipo : "concatenar" ,contenido : $$[$0-3]},{tipo : "tipoDato" ,contenido : $$[$0-2]},{tipo : "tipoDato" ,contenido : " " + $$[$0-1] + " "}];json = json.concat($$[$0]);this.$ = json;
break;
case 111:
var json = [{tipo : "identificador" ,contenido : $$[$0-5]},{tipo : "concatenar" ,contenido : $$[$0-4]},{tipo : "tipoDato" ,contenido : $$[$0-3]},{tipo : "concatenar" ,contenido : $$[$0-2]},{tipo : "concatenar" ,contenido : " " + $$[$0-1] + " "},{tipo : "expresion" ,contenido : $$[$0]}];this.$ = json;
break;
case 112:
var exp;if(Array.isArray($$[$0-1])){exp = $$[$0-1];}else{exp = [$$[$0-1]]};var json = [{tipo : "identificador" ,contenido : $$[$0-9]},{tipo : "concatenar" ,contenido : $$[$0-8]},{tipo : "tipoDato" ,contenido : $$[$0-7]},{tipo : "concatenar" ,contenido : $$[$0-6]},{tipo : "concatenar" ,contenido : " " + $$[$0-5] + " "},{tipo : "concatenar" ,contenido : " " + $$[$0-4] + " "},{tipo : "concatenar" ,contenido : " " + $$[$0-3] + " "},{tipo : "concatenar" ,contenido : " " + $$[$0-2] + " "},{tipo : "expresion" ,contenido : exp},{tipo : "concatenar" ,contenido : " " + $$[$0] + " "}];this.$ = json;
break;
case 113:
var json = [{tipo : "identificador" ,contenido : $$[$0-6]},{tipo : "concatenar" ,contenido : $$[$0-5]},{tipo : "tipoDato" ,contenido : $$[$0-4]},{tipo : "concatenar" ,contenido : " " + $$[$0-3] + " "},{tipo : "concatenar" ,contenido : $$[$0-2]}];json = json.concat($$[$0-1]);json.push({tipo : "concatenar" ,contenido : $$[$0]});this.$ = json;
break;
case 114:
var json = [{tipo : "identificador" ,contenido : $$[$0-4]},{tipo : "concatenar" ,contenido : " " + $$[$0-3] + " "},{tipo : "concatenar" ,contenido : $$[$0-2]}]; json = json.concat($$[$0-1]);json.push({tipo : "concatenar" ,contenido : $$[$0]});this.$=json;
break;
case 115:
var temp = []; temp.push({tipo : "identificador" , contenido : $$[$0-4]});temp.push({tipo : "concatenar" , contenido : $$[$0-3]}); temp = temp.concat($$[$0-2]);temp.push({tipo : "concatenar" , contenido : $$[$0-1]});temp.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = { tipo : "llamadaF" , contenido : temp};
break;
case 116:
var json = $$[$0-2]; json.push({tipo : "concatenar" , contenido : $$[$0-1] + " "}); json = json.concat($$[$0]);this.$ = json;
break;
case 117:
var json;if(Array.isArray($$[$0])){json = $$[$0];}else{json = [$$[$0]]};this.$ = json;
break;
case 121:
$$[$0-2].push({tipo:"concatenar",contenido : $$[$0-1] + " "});$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 122:
this.$=[$$[$0]];
break;
case 123:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "tipoDato" , contenido : $$[$0]}]} ; this.$ = json;
break;
case 124:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-4]},{tipo : "concatenar" , contenido : $$[$0-3]},{tipo : "tipoDato" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "expresion" , contenido : $$[$0]}]} ; this.$ = json;
break;
case 125:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : $$[$0-2]},{tipo : "tipoDato" , contenido : $$[$0-1]}].concat($$[$0])} ; this.$ = json;
break;
case 126:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-5]},{tipo : "concatenar" , contenido : $$[$0-4]},{tipo : "tipoDato" , contenido : $$[$0-3]}].concat($$[$0-2])} ;json.push({tipo : "concatenar" , contenido : $$[$0-1]}); json.push({tipo : "expresion" , contenido : $$[$0]});this.$ = json;
break;
case 127:
var json = [{tipo : "concatenar" , contenido : $$[$0-5] + " "},{tipo : "identificador" , contenido : $$[$0-4] + " "},{tipo : "concatenar" , contenido : " " + $$[$0-3] + " "},{tipo : "concatenar" , contenido : $$[$0-2] + "\n"}]; json = json.concat($$[$0-1]);json = json.concat($$[$0]); this.$ = {tipo : "type" , contenido : json};
break;
case 128:
var json = []; $$[$0-2].push($$[$0-1]);json = $$[$0-2].concat($$[$0]);this.$ = json;
break;
case 129:
this.$=$$[$0];
break;
case 130:
var json = [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "tipoDato" , contenido : $$[$0]}];this.$ = json;
break;
case 131:
var json = [{tipo : "identificador" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : $$[$0-2]},{tipo : "tipoDato" , contenido : $$[$0-1]}].concat($$[$0]);this.$ = json;
break;
case 132: case 133:
this.$  = {tipo : "concatenar", contenido : $$[$0] + "\n"};
break;
case 134:
var json = [{tipo : "concatenar", contenido : "\n" +  $$[$0-1]},{tipo : "concatenar", contenido : $$[$0] + "\n"}];this.$=json;
break;
case 135:
this.$ = [{tipo : "concatenar", contenido : "\n" + $$[$0] + "\n"}];
break;
case 136:
var json = $$[$0-2];json.push($$[$0-1]); json = json.concat($$[$0]);this.$ =json;
break;
case 138:
var json = [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]}].concat($$[$0]);this.$ = json;
break;
case 139: case 140:
this.$ = {tipo : "concatenar" , contenido : $$[$0]};
break;
case 148:
var json = $$[$0-2] ; json.push({tipo : "concatenar" , contenido : $$[$0-1]});json = json.concat($$[$0]);this.$=json;
break;
case 150:
 var json = [{tipo : "identificador" , contenido : $$[$0-1]}].concat($$[$0]); this.$ = json;
break;
case 151:
 var json  = [{tipo : "identificador" , contenido : $$[$0]}]; this.$ = json;
break;
case 152: case 153: case 154: case 155: case 156: case 157: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 165:
 this.$ = expresion($$[$0-2],{ tipo : "concatenar", contenido : " " + $$[$0-1] + " "},$$[$0]);
break;
case 166: case 167:
 this.$ = unaria($$[$0-1],{ tipo : "concatenar", contenido : $$[$0] +" "}); 
break;
case 168: case 169: case 170: case 171:
 this.$ = unaria({ tipo : "concatenar", contenido : $$[$0-1]},$$[$0]); 
break;
case 173: case 174: case 175: case 176: case 177: case 178:
var json  = {tipo : "valor" , contenido : $$[$0]}; this.$ = json;
break;
case 179:
var json = [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}]; this.$ = json;
break;
case 180:
var json = [{tipo : "identificador" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : $$[$0-2]}]; var temp = json.concat($$[$0-1]); temp.push({tipo : "concatenar" , contenido : $$[$0]}); this.$ = temp;
break;
case 181:
this.$ = expresion({ tipo : "concatenar", contenido : $$[$0-2]},$$[$0-1],{ tipo : "concatenar", contenido : $$[$0]});
break;
case 183:
$$[$0-2].push({tipo : "concatenar" , contenido : $$[$0-1] });$$[$0-2].push({tipo : "concatenar" , contenido : $$[$0] });this.$=$$[$0-2];
break;
case 184:
var json  = [{tipo : "valor" , contenido : $$[$0-1]}].concat($$[$0]);this.$ = json;
break;
case 185:
var json = $$[$0-1].concat($$[$0]);this.$= json;
break;
case 186:
var json = [{tipo : "identificador" , contenido : $$[$0-4]},{tipo : "concatenar" , contenido : $$[$0-3] }].concat($$[$0-2]);json.push({tipo : "concatenar" , contenido : $$[$0-1] });json = json.concat($$[$0]);this.$ = json;
break;
case 187:
var exp;if(Array.isArray($$[$0-2])){exp = $$[$0-2];}else{exp = [$$[$0-2]];};var json = [{tipo : "concatenar" , contenido : $$[$0-3] }].concat(exp); json.push({tipo : "concatenar" , contenido : $$[$0-1] });json = json.concat($$[$0]);this.$ = json;
break;
case 188:
var json = [{tipo : "concatenar" , contenido : $$[$0-3] },{tipo : "concatenar" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1] }].concat($$[$0]); this.$ = json;
break;
case 189:
var json  = [{tipo : "valor" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}];this.$ = json;
break;
case 190:
var json = $$[$0-2] ;json.push({tipo : "concatenar" , contenido : $$[$0-1] + " "}); json = json.concat($$[$0]);this.$ = json;
break;
case 191:
var json ; if(Array.isArray($$[$0])){json = $$[$0];}else{json = [$$[$0]];} ;this.$ = json;
break;
case 193:
var v = []; v = $$[$0-1].concat($$[$0]);this.$=v;
break;
case 195: case 198:
var temp;var json = [];if(Array.isArray($$[$0-1])){temp = $$[$0-1];}else{temp = [$$[$0-1]];};json.push({tipo : "concatenar" , contenido :$$[$0-4]});json.push({tipo : "concatenar" , contenido :$$[$0-3]});json.push({tipo : "concatenar" , contenido :$$[$0-2]});json = json.concat(temp);json.push({tipo : "concatenar" , contenido :$$[$0]});this.$ = json
break;
case 196: case 197:
var json = [{tipo : "concatenar" , contenido :$$[$0-3]},{tipo : "concatenar" , contenido :$$[$0-2]},{tipo : "concatenar" , contenido :$$[$0-1]},{tipo : "concatenar" , contenido :$$[$0]}];this.$ = json;
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,9:5,10:6,11:$V2,12:$V3,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi,110:40},{1:[3]},{5:[1,42]},o($Vj,[2,2]),o($Vj,$Vk,{9:5,10:6,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,47:28,110:40,8:43,7:44,2:$V0,11:$V2,12:$V3,41:$V4,42:$V5,43:$V6,44:$V7,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi}),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),{12:[1,45]},o($Vm,[2,18]),o($Vm,[2,19]),o($Vm,[2,42],{26:46,46:[1,47]}),o($Vm,[2,21]),o($Vm,[2,22]),o($Vm,[2,23]),o($Vm,[2,24]),o($Vm,[2,25]),o($Vm,[2,26]),o($Vm,[2,27]),o($Vm,[2,28]),o($Vm,[2,29]),o($Vm,[2,30]),o($Vm,[2,31]),{12:$Vn,92:48,93:49},{12:$Vn,92:51,93:49},{39:55,57:[1,56],67:[1,52],68:[1,53],69:[1,54],134:57,135:58},{12:$Vo,38:59,110:40},{12:$Vo,38:61,110:40},o($Vp,[2,39]),{13:[1,62]},{57:[1,63]},{13:[1,64]},{16:[1,65]},{13:[1,66]},{40:[1,67]},{40:[1,68]},{12:$Vq,13:$Vr,38:84,40:[1,69],41:$Vs,45:70,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},o([57,67,68,69],$VC,{87:86,88:87,89:88,13:[1,85],80:$VD}),{12:[1,90]},{39:91,57:$VE,134:57,135:58},o($VF,[2,149]),{13:[1,93]},{1:[2,1]},o($Vj,[2,4]),o($Vj,$Vk,{9:5,10:6,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,47:28,110:40,7:44,8:94,2:$V0,11:$V2,12:$V3,41:$V4,42:$V5,43:$V6,44:$V7,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi}),{13:[1,95]},o($Vm,[2,20]),{16:[1,97],47:96,48:$V8},{40:[1,98],79:$VG},o($VH,[2,108]),{18:[1,100],67:[1,101]},{40:[1,102],79:$VG},{12:$Vq,13:$Vr,16:$VI,38:84,41:$Vs,45:104,68:$Vt,69:$Vu,75:103,80:$VJ,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{40:$VK,76:107,77:108,78:109,79:$VL},{40:$VK,76:111,77:108,78:109,79:$VL},{40:[1,112]},{12:$Vo,110:113,136:$VM,137:$VN,138:$VO,139:$VP},o($VQ,[2,192],{135:118,57:$VE}),o($VR,[2,194]),{40:$VK,57:$VS,76:119,77:108,78:109,79:$VL},o($VF,$VC,{87:86,88:87,89:88,80:$VD}),{40:$VK,57:$VS,76:121,77:108,78:109,79:$VL},{12:$Vq,13:$Vr,38:84,41:$Vs,45:122,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{58:[1,123]},{12:$Vq,13:$Vr,38:84,41:$Vs,45:124,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{2:$VT,10:128,12:$V3,17:$VU,20:125,21:126,22:127,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi,110:40},{12:[1,134],64:130,66:[1,133],70:132,71:[1,135],73:131},o($Vm,[2,34]),o($Vm,[2,35]),o($Vm,[2,36]),{40:[1,136],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},o($V71,[2,172],{68:[1,152],69:[1,151]}),{12:$Vq,13:$Vr,38:84,41:$Vs,110:40,125:153,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,110:40,125:154,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,110:40,125:155,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:156,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},o($VQ,[2,173]),o($VQ,[2,174]),o($VQ,[2,175]),o($VQ,[2,176]),o($VQ,[2,177],{134:57,135:58,39:157,57:[1,158]}),o($VQ,[2,178]),o($VR,$VC,{87:86,88:87,89:88,13:[1,159],80:$VD}),{12:$Vq,13:$Vr,38:84,41:$Vs,45:160,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},o($VQ,[2,182],{134:57,135:58,39:162,57:[1,161]}),o($V81,$V91,{110:40,125:71,38:84,59:163,45:164,12:$Vq,13:$Vr,41:$Vs,68:$Vt,69:$Vu,120:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB}),o($VF,[2,150]),o($VF,[2,94],{89:165,80:$VD}),o($Va1,[2,96]),{12:$Vq,13:$Vr,16:$Vb1,38:84,41:$Vs,45:169,68:$Vt,69:$Vu,80:$Vc1,81:166,82:$Vd1,90:167,91:168,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{67:[1,172]},{40:[1,173]},{136:$VM,137:$VN,138:$VO,139:$VP},{12:$Vq,13:$Vr,38:84,41:$Vs,45:174,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},o($Vj,[2,5]),{12:$Ve1,14:175,15:[2,120],96:176,97:177},o($Vp,[2,38]),{2:$VT,10:128,12:$V3,17:$VU,20:179,21:126,22:127,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi,110:40},o($Vm,[2,105]),{12:$Vn,93:180},{12:$Vf1,19:181,105:$Vg1,106:$Vh1,107:$Vi1,108:$Vj1},{16:[1,187]},o($Vm,[2,106]),{40:[1,188]},o($Vk1,[2,87],{111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),{12:$Vq,13:$Vr,16:$Vb1,38:84,41:$Vs,45:169,68:$Vt,69:$Vu,80:$Vc1,81:189,82:$Vd1,90:167,91:168,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vl1,83:190,104:191},{40:[1,193]},{40:[2,78],78:194,79:$VL},o($VH,[2,81]),{12:[1,195],68:[1,196],69:[1,197]},{40:[1,198]},o($Vm,[2,32]),o($VF,[2,148]),{13:[1,199]},{13:[1,200]},{13:[1,201]},{13:[1,202]},o($VR,[2,193]),{40:[1,203]},{12:$Vo,110:113},{40:[1,204]},{15:[1,205],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},{13:[1,206]},{15:[1,207],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},{17:[1,208]},o($Vm1,[2,12],{23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,47:28,110:40,10:128,22:209,2:$VT,12:$V3,41:$V4,42:$V5,43:$V6,44:$V7,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi}),o($Vn1,[2,15]),o($Vn1,[2,16]),o($Vn1,[2,17]),{12:$Vq,13:$Vr,38:84,41:$Vs,45:210,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{15:[1,211]},{15:[1,212]},{12:[1,213]},{40:[1,214],67:[1,215],72:[1,217],74:[1,216]},{12:[1,218]},o($Vm,[2,37]),{12:$Vq,13:$Vr,38:84,41:$Vs,45:219,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:220,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:221,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:222,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:223,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:224,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:225,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:226,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:227,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:228,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:229,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:230,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:231,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:232,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},o($V71,[2,166]),o($V71,[2,167]),o($V71,[2,168]),o($V71,[2,169]),o($V71,[2,170]),o($V71,[2,171]),o($VQ,[2,184]),{133:[1,233],136:$VM,137:$VN,138:$VO,139:$VP},{12:$Vq,13:$Vr,15:[1,234],38:84,41:$Vs,45:236,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB,132:235},{15:[1,237],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},{12:$Vo,110:113,133:[1,238],136:$VM,137:$VN,138:$VO,139:$VP},o($VQ,[2,185]),{15:[1,239],79:$Vo1},o($V81,[2,117],{111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($Va1,[2,95]),{82:[1,241]},{79:[1,242],82:[2,98]},o($Vp1,[2,101]),o($Vp1,[2,102],{111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),{12:$Vq,13:$Vr,16:$Vb1,38:84,41:$Vs,45:169,68:$Vt,69:$Vu,80:$Vc1,81:243,82:$Vd1,90:167,91:168,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vl1,83:244,104:191},{16:[1,245]},o($Vm,[2,33]),{15:[1,246],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},{15:[1,247]},{15:[2,119],79:[1,248]},o($V81,[2,122]),{18:[1,249]},{17:[1,250]},o($VH,[2,107]),o($VH,[2,109],{84:252,85:253,86:254,67:[1,251],80:$Vq1}),o($Vr1,[2,141]),o($Vr1,[2,142]),o($Vr1,[2,143]),o($Vr1,[2,144]),o($Vr1,[2,145]),{12:$Vl1,83:256,104:191},o($Vm,[2,73]),{82:[1,257]},{17:[1,258],40:$Vs1,79:$Vt1,103:259},o($Vu1,[2,137]),{18:[1,262]},o($Vm,[2,74]),o($VH,[2,80]),{67:[1,263],68:[1,264],69:[1,265]},{12:[1,266]},{12:[1,267]},o($Vm,[2,76]),{12:$Vq,13:$Vr,38:84,41:$Vs,45:268,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{15:[1,269]},{15:[1,270]},{12:$Vq,13:$Vr,38:84,41:$Vs,45:271,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},o($Vm,[2,75]),o($Vm,[2,77]),{16:[1,272]},o($V81,$V91,{110:40,125:71,38:84,45:164,59:273,12:$Vq,13:$Vr,41:$Vs,68:$Vt,69:$Vu,120:$Vv,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB}),{16:[1,274]},{61:[1,275]},o($Vn1,[2,14]),{40:[1,276],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},{16:[1,277]},{16:[1,278]},{18:[1,279],72:[1,281],74:[1,280]},o($Vv1,[2,58]),{12:$Vq,13:$Vr,38:84,41:$Vs,45:282,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:[1,283]},{12:[1,284]},{72:[1,286],74:[1,285]},o($Vw1,[2,152],{113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($Vw1,[2,153],{113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($Vx1,[2,154],{119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($Vx1,[2,155],{119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($Vx1,[2,156],{119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($Vx1,[2,157],{119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($Vx1,[2,158],{119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($Vx1,[2,159],{119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($Vy1,[2,160],{121:$V31,122:$V41,123:$V51,124:$V61}),o($Vy1,[2,161],{121:$V31,122:$V41,123:$V51,124:$V61}),o($Vz1,[2,162],{123:$V51,124:$V61}),o($Vz1,[2,163],{123:$V51,124:$V61}),o($V71,[2,164]),o($V71,[2,165]),o($VQ,[2,189]),o($VQ,[2,179],{134:57,135:58,39:287,57:$VE}),{15:[1,288],79:[1,289]},o($V81,[2,191],{111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($VQ,[2,181],{134:57,135:58,39:290,57:$VE}),o($VQ,[2,183]),{40:[1,291]},{12:$Vq,13:$Vr,38:84,41:$Vs,45:292,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},o($Va1,[2,97]),{12:$Vq,13:$Vr,16:$Vb1,38:84,41:$Vs,45:169,68:$Vt,69:$Vu,80:$Vc1,91:293,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{82:[1,294]},{17:[1,295],40:$Vs1,79:$Vt1,103:259},{12:$VA1,99:296,102:297},{16:[1,299]},{16:[1,300],18:[1,301]},{12:$Ve1,97:302},{12:$Vf1,19:303,105:$Vg1,106:$Vh1,107:$Vi1,108:$Vj1},o($Vm,[2,41]),{12:$Vq,13:$Vr,16:[1,305],38:84,41:$Vs,45:304,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{67:[1,306]},o([15,17,40,67,79],[2,90],{86:307,80:$Vq1}),o($VB1,[2,92]),{82:[1,308]},{17:[1,309],40:$Vs1,79:$Vt1,103:259},o($Vk1,[2,88]),o($Vk1,[2,89]),{12:$Vl1,104:310},{12:[2,139]},{12:[2,140]},{12:$Vq,13:$Vr,16:$VI,38:84,41:$Vs,45:104,68:$Vt,69:$Vu,75:311,80:$VJ,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{12:$Vq,13:$Vr,38:84,41:$Vs,45:312,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},o($VH,[2,83]),o($VH,[2,85]),o($VH,[2,84]),o($VH,[2,86]),{15:[1,313],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},o($VR,[2,196]),o($VR,[2,197]),{15:[1,314],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},o($VC1,[2,45],{50:315,52:316,53:317,54:$VD1}),{15:[1,319],79:$Vo1},{2:$VT,10:128,12:$V3,17:$VU,20:320,21:126,22:127,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi,110:40},{13:[1,321]},{12:[1,323],65:322,68:[1,324],69:[1,325]},{2:$VT,10:128,12:$V3,17:$VU,20:326,21:126,22:127,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi,110:40},{2:$VT,10:128,12:$V3,17:$VU,20:327,21:126,22:127,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi,110:40},{12:$Vf1,19:328,105:$Vg1,106:$Vh1,107:$Vi1,108:$Vj1},{12:[1,329]},{12:[1,330]},{40:[1,331],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},{15:[2,72]},{15:[2,68]},{12:[1,332]},{12:[1,333]},o($VQ,[2,188]),o($VQ,[2,180],{134:57,135:58,39:334,57:$VE}),{12:$Vq,13:$Vr,38:84,41:$Vs,45:335,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},o($VQ,[2,187]),o($Vm,[2,115]),o($V81,[2,116],{111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($Vp1,[2,100]),o($Vp1,[2,103]),o($Vp1,[2,104]),{17:[1,338],40:[1,340],79:[1,339],100:336,101:337},o($Vu1,[2,129]),{18:[1,341]},{2:$VT,10:128,12:$V3,17:$VU,20:342,21:126,22:127,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi,110:40},{2:$V0,4:343,6:3,7:4,9:5,10:6,11:$V2,12:$V3,17:$V1,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi,110:40},{12:$Vf1,19:344,105:$Vg1,106:$Vh1,107:$Vi1,108:$Vj1},o($V81,[2,121]),o($V81,[2,123],{85:253,86:254,84:346,67:[1,345],80:$Vq1}),o($VH,[2,110],{111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),{12:$Vl1,83:347,104:191},{80:$VD,87:348,88:87,89:88,94:[1,349]},o($VB1,[2,91]),o($VB1,[2,93]),o($VH,[2,114]),o($Vu1,[2,136]),o($Vu1,[2,138]),o($VH,[2,82],{111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($VR,[2,195]),o($VR,[2,198]),{17:[2,50],51:350,55:[1,351]},o($VC1,[2,44],{53:352,54:$VD1}),o($Vm1,[2,47]),{12:$Vq,13:$Vr,38:84,41:$Vs,45:353,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{40:[1,354]},{17:[1,355]},{12:$Vq,13:$Vr,38:84,41:$Vs,45:356,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{15:[1,357]},{67:[1,358],68:[1,359],69:[1,360]},{12:[1,361]},{12:[1,362]},{17:[1,363]},{17:[1,364]},{67:[1,365]},{15:[2,71]},{15:[2,67]},o($Vv1,[2,59]),{15:[2,70]},{15:[2,66]},o($VQ,[2,186]),o($V81,[2,190],{111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61}),o($Vm,[2,127]),{12:$VA1,102:366},o($Vm,[2,135],{40:[1,367]}),{12:[2,132]},{12:[2,133]},{12:$Vf1,19:368,105:$Vg1,106:$Vh1,107:$Vi1,108:$Vj1},{17:[1,369]},{17:[1,370]},{16:[1,371]},{12:$Vq,13:$Vr,16:$VI,38:84,41:$Vs,45:104,68:$Vt,69:$Vu,75:372,80:$VJ,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},o($V81,[2,125],{67:[1,373]}),{17:[1,374],40:$Vs1,79:$Vt1,103:259},o($VH,[2,111]),{95:[1,375]},{17:[1,376]},{18:[1,377]},o($Vm1,[2,46]),{18:[1,378],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},o($Vm,[2,51]),o($Vm,[2,54]),{15:[1,379],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},{16:[1,380]},{12:$Vq,13:$Vr,38:84,41:$Vs,45:381,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{15:[2,61]},{15:[2,63]},{15:[2,62]},{15:[2,64]},o($Vm,[2,69]),o($Vm,[2,65]),{12:$Vq,13:$Vr,38:84,41:$Vs,45:382,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},o($Vu1,[2,128]),o($Vm,[2,134]),o($Vu1,[2,130],{85:253,86:254,84:383,80:$Vq1}),o($Vp,[2,40]),o($Vl,[2,10]),{2:$V0,4:384,6:3,7:4,9:5,10:6,11:$V2,12:$V3,17:$V1,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi,110:40},o($V81,[2,124]),{12:$Vq,13:$Vr,16:$VI,38:84,41:$Vs,45:104,68:$Vt,69:$Vu,75:385,80:$VJ,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},o($VH,[2,113]),{13:[1,386]},o($Vm,[2,43]),{2:$VT,10:128,12:$V3,17:$VU,20:387,21:126,22:127,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi,110:40},o($Vm1,$VU,{23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,47:28,110:40,21:126,22:127,10:128,20:388,2:$VT,12:$V3,41:$V4,42:$V5,43:$V6,44:$V7,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi}),{40:[1,389]},{2:$VT,10:128,12:$V3,17:$VU,20:390,21:126,22:127,23:9,24:10,25:11,27:12,28:13,29:14,30:15,31:16,32:17,33:18,34:19,35:20,36:21,37:22,38:25,41:$V4,42:$V5,43:$V6,44:$V7,47:28,48:$V8,49:$V9,56:$Va,61:$Vb,62:$Vc,63:$Vd,66:$Ve,68:$Vf,69:$Vg,71:$Vh,98:$Vi,110:40},{15:[2,60],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},{40:[1,391],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},o($Vu1,[2,131]),{17:[1,392]},o($V81,[2,126]),{12:$Vq,13:$Vr,38:84,41:$Vs,45:393,68:$Vt,69:$Vu,110:40,120:$Vv,125:71,126:$Vw,127:$Vx,128:$Vy,129:$Vz,130:$VA,131:$VB},{17:[2,49]},o($Vm1,[2,48]),o($Vm,[2,55]),{17:[1,394]},o($Vv1,[2,57]),o($Vl,[2,11]),{15:[1,395],111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31,122:$V41,123:$V51,124:$V61},o($Vm,[2,56]),o($VH,[2,112])],
defaultActions: {42:[2,1],260:[2,139],261:[2,140],283:[2,72],284:[2,68],329:[2,71],330:[2,67],332:[2,70],333:[2,66],339:[2,132],340:[2,133],359:[2,61],360:[2,63],361:[2,62],362:[2,64],387:[2,49]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var tablaErrores = [];

// funcion que retorna vector de operaciones con 2 operadores
function expresion(valor1, operador, valor2) {
    var json = [];
    json = json.concat(returnVector(valor1));
    json = json.concat(returnVector(operador));
    json = json.concat(returnVector(valor2));
    return json;
}

// funcion que retorna vector de operaciones con 1 operador
function unaria(valor1,valor2){
    var json = [];
    json = json.concat(returnVector(valor1));
    json = json.concat(returnVector(valor2));
    return json;
}

//funcion que retorna 1 vector
function returnVector(val){
    if(Array.isArray(val)==true){
        return val;
    }else{
        return [val];
    }
}

//funcion que desanida funciones anidadas
function recorrerJson(json){
    var instr = [];
    var t = [];
    var fPadre = "";
    var fHijo = "";
    if(json.tipo == "funcion" || json.tipo == "funcionT" ){
        for( var element of json.contenido){
            if(element.tipo == "identificador"){          
                    fPadre = element.contenido;
            }
            if(element.tipo == "instrucciones"){
                for(var ele of element.contenido){
                    var index = element.contenido.indexOf(ele);
                    if(ele.tipo == "funcion"){
                        t.push(ele);
                    }else if(ele.tipo == "funcionT"){
                        t.push(ele);
                    }else{
                        instr.push(ele);
                    }
                }   
                if(t.length != 0){
                  recV(fPadre,t,instr);
                }      
                element.contenido = instr;
                break;
            }
        }
    }
    if(t.length == 0){
        return json;
    }else{
        return t.concat([json]);
    }
}

//funcion que recorre vector de funciones desanidadas
function recV (idP ,t,instr){
    for(var element of t){
        var fH = element.contenido[0].contenido;
        for(var e of t){
            recursiva(idP,fH,e);
        }

        for(var el of instr){
            recursiva(idP,fH,el);
        }
    }
}

//funcion que busca llamadas a funciones de la funcion padre
function recursiva(idP ,idB ,arbol){
    if(arbol.tipo == "identificador"){
        if(arbol.contenido == idB){
            arbol.contenido = idP+"_"+arbol.contenido;
        }
    }else{
        if(Array.isArray(arbol.contenido)){
            for(var e of arbol.contenido){
                recursiva(idP,idB,e);
            }
        }
    }
}

//funcion que analiza el json formado de funciones anidadas para generar traduccion
function traducir(json){
    var traduccion = ""
    for(var element of json){
        if(element.tipo == "funcion"){
            traduccion += tFuncion(element)
        }else if(element.tipo == "funcionT"){
            traduccion += tFuncionT(element)
        }else if(element.tipo == "variable_let"){
            traduccion += decVariable(element, "let ");
        }else if(element.tipo == "variable_const"){
            traduccion += decVariable(element , "const ");
        }else if(element.tipo == "asignacion"){
            traduccion += asignacionV(element);
        }else if(element.tipo == "type"){
            traduccion += typesTraduccion(element);
        }else if(element.tipo == "contenidoGlobal"){
            traduccion += traducir(element.contenido);
        }else if(element.tipo == "llamadaF"){
            traduccion += llamadasFuncion(element);
        }else if(element.tipo == "imprimir"){
            traduccion += imprimirConsole(element.contenido) ;
        }else if(element.tipo == "break"){
            traduccion += "break;\n"
        }else if(element.tipo == "continue"){
            traduccion += "continue;\n"
        }else if(element.tipo == "return"){
            traduccion += "return;\n"
        }else if(element.tipo == "returnE"){
            traduccion += rConValor(element.contenido);
        }else if(element.tipo == "while"){
            traduccion += eWhile(element.contenido);
        }else if(element.tipo == "doWhile"){
            traduccion += eDoWhile(element.contenido)
        }else if(element.tipo == "for"){
            traduccion += eFor(element.contenido);
        }else if(element.tipo == "ForOf"){
            traduccion += eForOf(element.contenido);
        }else if(element.tipo == "ForIn"){
            traduccion += eForIn(element.contenido);
        }else if(element.tipo == "switch"){
            traduccion += eSwitch(element.contenido);
        }else if(element.tipo == "condicionalIf"){
            traduccion += eIf(element.contenido);
        }else if(element.tipo == "mstring"){
            traduccion += mString(element.contenido);
        }
    }
    return traduccion;
}

//funcion que retorna funcion para traduccion
function tFuncion(f){
    var cad= "";
    var par = "";
    var inst ="";
    par = parametros(f.contenido[1].contenido);
    inst = traducir(f.contenido[2].contenido);
    cad += "function " + f.contenido[0].contenido  + "(" + par +  "){\n";
    cad += inst;
    cad += "}\n\n";
    return cad;
}

//funcion que retorna funcion con tipo para traduccion
function tFuncionT(f){
    var cad= "";
    var par = "";
    var inst ="";
    par = parametros(f.contenido[1].contenido);
    inst = traducir(f.contenido[3].contenido);
    cad += "function " + f.contenido[0].contenido  + "(" + par +  ") : "+ f.contenido[2].contenido +"{\n";
    cad += inst;
    cad += "}\n\n";
    return cad;
}

//funcion que retorna parametros para traduccion
function parametros(f){
    var cad = "";
    for(var element of f){
        if(element.tipo == "parametro"){
            for(var ele of element.contenido){
                if(ele.tipo == "expresion"){
                    for(var e of ele.contenido){
                        cad += e.contenido;
                    }
                }else{
                    cad += ele.contenido;
                }
            }
        }else if(element.tipo == "concatenar"){
            cad += element.contenido + " ";
        }
    }
    return cad;
}

// funcion que retorna declaracion de variables para traduccion
function decVariable (f, tip){
    var cad = tip;
    for(var ele of f.contenido){
        if(ele.tipo == "expresion"){
            for(var e of ele.contenido){
                cad+= e.contenido;
            }
        }else{
            if(Array.isArray(ele.contenido)){
                for(var e of ele.contenido){
                    cad += e.contenido;
                }
            }else{
             cad+= ele.contenido;   
            }
            //console.log(cad);
        }
    }
    cad+= "\n";
    return cad;
}

// funcion que retorna asignacion de valores para la traduccion
function asignacionV (f){
    var cad = "";
    for(var element of f.contenido){
        cad += element.contenido;
    }
    cad += "\n";
    return cad;
}

// funcion que retorna declaracion de types para la traduccion
function typesTraduccion (f){
    var cad = "";
    for(var element of f.contenido){
        cad += element.contenido;
    }
    cad += "\n";
    return cad;
}

//funcion que retorna las llamadas a funcion para la traduccion
function llamadasFuncion(f){
    var cad = "";
    for(var element of f.contenido){
        cad += element.contenido;
    }
    cad += "\n";
    return cad;
}

//funcion que retorna la funcion imprimir para la traduccion
function imprimirConsole(f){
    var cad = "console.log(";
    for(var element of f ){
        cad += element.contenido;
    }
    cad += ");\n";
    return cad;
}

//funcion que devuelve el return con valor para traduccion
function rConValor(f){
    var cad = "return "
    for(var element of f){
        if(element.tipo == "expresion"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
        }
    }
    cad += ";\n";
    return cad;
}

//funcion que devuelve el while para traduccion
function eWhile(f){
    cad ="\nwhile( ";
    for(var element of f){
        if(element.tipo == "condicionWhile"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad +=" ){\n";
        }else if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
        }
    }
    cad +="}\n";
    return cad;
}

//funcion que devuelve el dowhile para traduccion
function eDoWhile(f){
    var cad = "\ndo{\n";
    for(var element of f){
        if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
            cad += "}while( "
        }else if(element.tipo == "condicionDoWhile"){
            for(var e of element.contenido){
                cad += e.contenido;
            }
        }
    }
    cad += " );\n"
    return cad;
}

//funcion que devuelve el for para traduccion
function eFor(f){
    var cad = "\nfor( ";
    for(var element of f){
        if(element.tipo == "inicioFor"){
            for(var ele of element.contenido){
                if(ele.tipo == "expresion"){
                    for(var e of ele.contenido){
                        cad += e.contenido + " "; 
                    }
                }else{
                    cad+=ele.contenido + " ";
                }
            }
        }else if(element.tipo == "condicionFor"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad += "; ";
        }else if(element.tipo == "finFor"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad+=" ){\n"
        }else if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
        }
    }
    cad+= "}\n";
    return cad;
}
//funcion que devuelve el for in para traduccion
function eForIn(f){
    var cad = "\nfor( ";
    for(var element of f){
        if(element.tipo == "condicionForIn"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad += " ){\n";
        }else if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
        }

    }
    cad += "}\n";
    return cad;
}
//funcion que devuelve el for of para traduccion
function eForOf(f){
    var cad = "\nfor( ";
    for(var element of f){
        if(element.tipo == "condicionForOf"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad += " ){\n";
        }else if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
        }
    }
    cad += "}\n"
    return cad;
}
//funcion que devuelve el switch para traduccion
function eSwitch(f){
    var cad = "switch( ";
    for(var element of f){
        if(element.tipo == "expresion"){
            for(var e of element.contenido){
                cad += e.contenido;
            }
            cad += " ){\n"
        }else if(element.tipo == "case"){
            cad += "case ";
            for(var ele of element.contenido){
                if(ele.tipo == "expresion"){
                    for(var p of ele.contenido){
                        cad += p.contenido
                    }
                }else if(ele.tipo == "concatenar"){
                    cad += ele.contenido;
                }else if(ele.tipo == "estructuras"){
                    cad += traducir(ele.contenido);
                }
            }
        }else if(element.tipo == "default"){
            cad += "default :\n"
            for(var ele of element.contenido){
                if(ele.tipo == "estructuras"){
                    cad+= traducir(ele.contenido);
                }
            }
        }
    }
    cad += "}\n";
    return cad;
}
//funcion que devuelve el if para traduccion
function eIf(f){
    var cad = "";
    for(var element of f){
        if(element.tipo ==  "if"){
            cad += "if( ";
            for(var ele of element.contenido){
                if(ele.tipo == "condicionIf"){
                    for(var e of ele.contenido){
                        cad += e.contenido
                    }
                    cad += " )\n{\n"
                }else if(ele.tipo == "estructuras"){
                    cad += traducir(ele.contenido);
                }
            }
        }else if(element.tipo ==  "elseIf"){
            cad += "}\nelse if( ";
            for(var ele of element.contenido){
                if(ele.tipo == "condicionIf"){
                    for(var e of ele.contenido){
                        cad += e.contenido
                    }
                    cad += " )\n{\n"
                }else if(ele.tipo == "estructuras"){
                    cad += traducir(ele.contenido);
                }
            }
        }else if(element.tipo == "else"){
            cad += "}\nelse\n{\n";
            for(var ele of element.contenido){
                if(ele.tipo == "estructuras"){
                    cad += traducir(ele.contenido);
                }
            }
        }
    }
    cad += "}\n";
    return cad;
}
//funcion que devuelve los metodos string para traduccion
function mString(f){
    var cad = "";
    for(var element of f){
        cad += element.contenido;
    }
    return cad+"\n";
}

function limpiarErrores(){
    tablaErrores = [];
}


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3: return 41; 
break;
case 4: return 41; 
break;
case 5:  return 105;  
break;
case 6:  return 106; 
break;
case 7:  return 107;  
break;
case 8:  return 98;    
break;
case 9:  return 108;    
break;
case 10:  return 66;   
break;
case 11:  return 71; 
break;
case 12:  return 95; 
break;
case 13:  return 133;
break;
case 14:  return 11;
break;
case 15:  return 94; 
break;
case 16:  return 136; 
break;
case 17:  return 137;
break;
case 18:  return 138;
break;
case 19:  return 139; 
break;
case 20:  return 131;
break;
case 21:return 48;
break;
case 22:return 46;
break;
case 23:return 49;
break;
case 24:return 54;
break;
case 25:return 55;
break;
case 26:return 63;
break;
case 27:return 72;
break;
case 28:return 74;
break;
case 29:return 61;
break;
case 30:return 62;
break;
case 31:return 42;
break;
case 32:return 43;
break;
case 33:return 44;
break;
case 34:return 56;
break;
case 35:return 58;
break;
case 36:return 129;
break;
case 37:return 130;
break;
case 38:return 'R_Undefined';
break;
case 39:return 68;
break;
case 40:return 69;
break;
case 41:return 123;
break;
case 42:return 119;
break;
case 43:return 120;
break;
case 44:return 121;
break;
case 45:return 122;
break;
case 46:return 124;
break;
case 47:return 116;
break;
case 48:return 114;
break;
case 49:return 113;
break;
case 50:return 67;
break;
case 51:return 118;
break;
case 52:return 117;
break;
case 53:return 115;
break;
case 54:return 126;
break;
case 55:return 111;
break;
case 56:return 112;
break;
case 57:return 18;
break;
case 58:return 40;
break;
case 59:return 16;
break;
case 60:return 17;
break;
case 61:return 13;
break;
case 62:return 15;
break;
case 63:return 57;
break;
case 64:return 'S_ComillaSimple';
break;
case 65:return 79;
break;
case 66:return 'S_ComillaDoble';
break;
case 67:return 'S_Interrogacion';
break;
case 68:return 80;
break;
case 69:return 82;
break;
case 70:return 128;
break;
case 71:return 127;
break;
case 72:return 12;
break;
case 73:  return 5; 
break;
case 74:tablaErrores.push({ tipo  : ' Error_Lexico ', Error  : yy_.yytext ,  Fila  : yy_.yylloc.first_line , Columna  :  yy_.yylloc.first_column });
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[\"][^\\\"]*([\\][\\\"'ntr][^\\\"]*)*[\"])/i,/^(?:[\'][^\\\']*([\\][\\\'"ntr][^\\\']*)*[\'])/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:type\b)/i,/^(?:void\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:Array\b)/i,/^(?:length\b)/i,/^(?:function\b)/i,/^(?:new\b)/i,/^(?:CharAt\b)/i,/^(?:ToLowerCase\b)/i,/^(?:ToUpperCase\b)/i,/^(?:Concat\b)/i,/^(?:null\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:undefined\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:\\')/i,/^(?:,)/i,/^(?:")/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = DesanidarFuncion;
exports.Parser = DesanidarFuncion.Parser;
exports.parse = function () { return DesanidarFuncion.parse.apply(DesanidarFuncion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}