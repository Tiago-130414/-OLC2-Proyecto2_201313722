/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[2,3],$V2=[1,8],$V3=[1,38],$V4=[1,9],$V5=[1,10],$V6=[1,37],$V7=[1,34],$V8=[1,35],$V9=[1,36],$Va=[1,41],$Vb=[1,29],$Vc=[1,30],$Vd=[1,31],$Ve=[1,32],$Vf=[1,33],$Vg=[1,26],$Vh=[1,27],$Vi=[1,39],$Vj=[5,17],$Vk=[2,6],$Vl=[2,5,11,12,17,20,24,43,44,45,46,50,51,58,62,63,64,67,68,99],$Vm=[2,5,11,12,17,20,24,43,44,45,46,50,51,56,57,58,62,63,64,67,68,99],$Vn=[1,58],$Vo=[2,5,11,12,17,20,24,43,44,45,46,48,50,51,56,57,58,62,63,64,67,68,99],$Vp=[1,79],$Vq=[1,80],$Vr=[1,71],$Vs=[1,70],$Vt=[1,72],$Vu=[1,73],$Vv=[1,74],$Vw=[1,75],$Vx=[1,76],$Vy=[1,77],$Vz=[1,78],$VA=[2,161],$VB=[1,87],$VC=[15,17,18,21,23,59,67,68,79,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$VD=[23,79],$VE=[2,113],$VF=[1,93],$VG=[1,95],$VH=[1,103],$VI=[1,102],$VJ=[2,82],$VK=[1,107],$VL=[1,113],$VM=[1,122],$VN=[2,15],$VO=[1,123],$VP=[1,124],$VQ=[1,132],$VR=[1,133],$VS=[1,134],$VT=[1,135],$VU=[1,136],$VV=[1,137],$VW=[1,138],$VX=[1,139],$VY=[1,140],$VZ=[1,141],$V_=[1,142],$V$=[1,143],$V01=[1,144],$V11=[1,145],$V21=[15,17,18,23,79,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$V31=[15,17,18,23,67,68,79,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$V41=[15,79],$V51=[15,17,18,21,23,59,67,68,79,80,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$V61=[1,164],$V71=[1,163],$V81=[2,103],$V91=[1,170],$Va1=[2,128],$Vb1=[1,174],$Vc1=[1,173],$Vd1=[1,180],$Ve1=[1,176],$Vf1=[1,177],$Vg1=[1,178],$Vh1=[1,179],$Vi1=[1,182],$Vj1=[15,17,23,79],$Vk1=[1,189],$Vl1=[17,56,57],$Vm1=[2,12,17,20,24,43,44,45,46,50,51,56,57,58,62,63,64,67,68,99],$Vn1=[79,82],$Vo1=[1,255],$Vp1=[15,16,17,21,23,79,80],$Vq1=[1,263],$Vr1=[1,262],$Vs1=[17,23,79],$Vt1=[12,13,67,68,120,126,127,128,129,130,131],$Vu1=[15,17,18,23,79,82,111,112],$Vv1=[15,17,18,23,79,82,111,112,113,114,115,116,117,118],$Vw1=[15,17,18,23,79,82,111,112,113,114,115,116,117,118,119,120],$Vx1=[15,17,18,23,79,82,111,112,113,114,115,116,117,118,119,120,121,122],$Vy1=[1,300],$Vz1=[15,17,21,23,79,80],$VA1=[17,57],$VB1=[1,325],$VC1=[2,157],$VD1=[1,389];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONT":4,"EOF":5,"LISTA_CONTENIDO":6,"CONTENIDO":7,"LISTA_CONTENIDO_PRIM":8,"FUNCIONES":9,"ESTRUCTURAS_DE_CONTROL":10,"R_Funcion":11,"Identificador":12,"S_ParentesisAbre":13,"PARAM":14,"S_ParentesisCierra":15,"S_LlaveAbre":16,"S_LlaveCierra":17,"S_DosPuntos":18,"TIPOS_DE_DATO":19,"R_Let":20,"S_Igual":21,"TIPAR_FUNCION":22,"S_PuntoComa":23,"R_Const":24,"EDD":25,"LISTADO_ESTRUCTURAS":26,"CONT_ESTRUCTURAS_CONTROL":27,"VARIABLES":28,"ASIGNACION":29,"LISTADO_IF":30,"ELSE":31,"SWITCH":32,"IMPRIMIR":33,"WHILE":34,"DO_WHILE":35,"FOR":36,"FOR_OF":37,"FOR_IN":38,"SENTENCIAS_TRANSFERENCIA":39,"FUNCION_GRAFICAR":40,"LLAMADA_FUNC":41,"TYPES":42,"R_Graficar":43,"R_Break":44,"R_Continue":45,"R_Return":46,"EXPRESION_G":47,"R_Else":48,"IF":49,"R_If":50,"R_Switch":51,"CASE":52,"DEFINIR_DEFAULT":53,"LISTA_CASE":54,"DEFINIR_CASE":55,"R_Case":56,"R_Default":57,"R_Console":58,"S_Punto":59,"R_Log":60,"FUNC":61,"R_While":62,"R_Do":63,"R_For":64,"CONT_FOR":65,"FIN_FOR":66,"OP_Incremento":67,"OP_Decremento":68,"CONT_FOR_IN":69,"R_In":70,"CONT_FOR_OF":71,"R_Of":72,"ATRIBUTOS":73,"LISTA_DE_ASIGNACIONES":74,"COMPLETAR_ASIGNACION":75,"R_Push":76,"LISTADO_ASIGNACION":77,"CONTENIDO_ASIGNACION":78,"S_Coma":79,"S_CorcheteAbre":80,"CONT_ASIG_ARRAY":81,"S_CorcheteCierra":82,"LISTA_DECLARACION_TYPES":83,"L_CORCHETE":84,"L_C":85,"LISTA_CORCHETE":86,"L_CORCHETE_V":87,"L_C_V":88,"LISTA_AS_MV":89,"LISTA_ASIGN_ARRAY":90,"CONT_ARRAY_ASIGN_VV":91,"LISTADO_VAR":92,"CONT_VAR":93,"PARAMETROS_FUNC":94,"R_Pop":95,"LISTA_PARAMETROS":96,"PARAMETROS":97,"S_Interrogacion":98,"T_Type":99,"LISTA_TYPES":100,"FIN_TYPES":101,"SEPARADOR":102,"CONTENIDO_TYPES":103,"SEPARADOR_DECLARACION_TYPES":104,"CONTENIDO_DECLARACION_TYPES":105,"T_Number":106,"T_Boolean":107,"T_String":108,"T_Void":109,"CONT_ATRIBUTOS":110,"LOG_Concatenar":111,"LOG_OR":112,"REL_IgualIgual":113,"REL_MayorIgualQue":114,"REL_MayorQue":115,"REL_MenorIgualQue":116,"REL_MenorQue":117,"REL_Distinto":118,"OP_Mas":119,"OP_Menos":120,"OP_Multiplicacion":121,"OP_Division":122,"OP_Exponenciacion":123,"OP_Modulo":124,"CONTENIDO_EXPRESION":125,"LOG_Not":126,"Entero":127,"Decimal":128,"R_True":129,"R_False":130,"Cadena":131,"OPCIONAL":132,"R_Length":133,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"R_Funcion",12:"Identificador",13:"S_ParentesisAbre",15:"S_ParentesisCierra",16:"S_LlaveAbre",17:"S_LlaveCierra",18:"S_DosPuntos",20:"R_Let",21:"S_Igual",23:"S_PuntoComa",24:"R_Const",43:"R_Graficar",44:"R_Break",45:"R_Continue",46:"R_Return",48:"R_Else",50:"R_If",51:"R_Switch",56:"R_Case",57:"R_Default",58:"R_Console",59:"S_Punto",60:"R_Log",62:"R_While",63:"R_Do",64:"R_For",67:"OP_Incremento",68:"OP_Decremento",70:"R_In",72:"R_Of",76:"R_Push",79:"S_Coma",80:"S_CorcheteAbre",82:"S_CorcheteCierra",95:"R_Pop",98:"S_Interrogacion",99:"T_Type",106:"T_Number",107:"T_Boolean",108:"T_String",109:"T_Void",111:"LOG_Concatenar",112:"LOG_OR",113:"REL_IgualIgual",114:"REL_MayorIgualQue",115:"REL_MayorQue",116:"REL_MenorIgualQue",117:"REL_MenorQue",118:"REL_Distinto",119:"OP_Mas",120:"OP_Menos",121:"OP_Multiplicacion",122:"OP_Division",123:"OP_Exponenciacion",124:"OP_Modulo",126:"LOG_Not",127:"Entero",128:"Decimal",129:"R_True",130:"R_False",131:"Cadena",133:"R_Length"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[8,2],[8,0],[7,1],[7,1],[7,1],[9,8],[9,10],[9,12],[9,12],[25,1],[25,0],[26,2],[26,1],[27,1],[27,1],[10,1],[10,1],[10,2],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[40,4],[39,2],[39,2],[39,2],[39,3],[30,3],[30,1],[49,7],[31,4],[31,0],[32,8],[52,1],[52,0],[54,2],[54,1],[55,4],[53,3],[53,0],[33,7],[61,1],[61,0],[34,7],[35,9],[36,10],[65,7],[65,5],[65,2],[65,4],[66,3],[66,2],[66,2],[66,2],[66,2],[38,7],[69,4],[69,4],[69,3],[37,7],[71,4],[71,4],[71,3],[29,4],[29,4],[29,4],[29,4],[29,4],[29,8],[75,1],[75,0],[77,2],[77,1],[78,4],[78,3],[78,3],[78,3],[78,3],[78,7],[74,1],[74,3],[74,3],[84,1],[85,2],[85,1],[86,2],[87,1],[88,2],[88,1],[89,3],[81,1],[81,0],[90,3],[90,1],[91,1],[91,3],[91,3],[28,3],[28,3],[92,3],[92,1],[93,1],[93,3],[93,5],[93,3],[93,5],[93,4],[93,6],[93,7],[93,5],[41,5],[41,6],[94,3],[94,1],[94,0],[14,1],[14,0],[96,3],[96,1],[97,3],[97,5],[97,4],[97,4],[97,6],[97,5],[42,6],[100,3],[100,1],[103,3],[103,4],[102,1],[102,1],[101,2],[101,1],[83,3],[83,1],[105,3],[104,1],[104,1],[19,1],[19,1],[19,1],[19,1],[19,1],[22,2],[22,0],[73,3],[73,1],[110,2],[110,1],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,2],[47,2],[47,2],[47,2],[47,2],[47,2],[47,1],[125,1],[125,1],[125,1],[125,1],[125,1],[125,3],[125,4],[125,3],[125,1],[125,3],[125,5],[132,3],[132,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
var t = { tipo : "contenidoGlobal" , contenido : $$[$0-1]};console.log(t);return traducir($$[$0-1]);
break;
case 3: case 43: case 46: case 51: case 82: case 103: case 126:
this.$ = [];
break;
case 4: case 5: case 84: case 91: case 96: case 100: case 106: case 112: case 147: case 159: case 191:
this.$ = $$[$0];
break;
case 6:

                                                                var pila = eval('$$');
                                                                var valSintetizar = pila[pila.length - 1 ];
                                                                this.$ = valSintetizar;
                                                                
break;
case 7:
 
                                        var pila = eval('$$');
                                        //console.log(pila);
                                        var anterior = pila[pila.length - 2]; 
                                        if(Array.isArray(anterior)){
                                            var temp = anterior.concat($$[$0]);
                                            //console.log(temp);
                                        }else{
                                            if(Array.isArray($$[$0])){
                                                var temp = $$[$0];
                                                //console.log(temp);
                                            }else{

                                                var temp  = [$$[$0]];
                                                //console.log(temp);
                                            }
                                        }
                                        this.$ = temp;
                                        
break;
case 8:
 
                                        var pila = eval('$$');
                                        //console.log(pila);
                                        var anterior = pila[pila.length - 2];  
                                        if(Array.isArray(anterior)){
                                            var temp = anterior.concat($$[$0]);
                                        }else{
                                            if(Array.isArray($$[$0])){
                                                var temp = $$[$0];
                                            }else{
                                                var temp  = [$$[$0]];
                                            }
                                        }
                                        this.$ = temp;
                                        
break;
case 9: case 19:
this.$ ='';console.log({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
case 10:
var json  = { tipo: "funcion" , contenido : [{tipo : "identificador", contenido : $$[$0-6]},{tipo : "parametros", contenido : $$[$0-4]},{tipo : "instrucciones", contenido : $$[$0-1]}]};this.$ =recorrerJson(json);
break;
case 11:
var json = {tipo : "funcionT" ,contenido : [{tipo : "identificador", contenido : $$[$0-8]},{tipo : "parametros", contenido : $$[$0-6]},{tipo : "tipoDato", contenido : $$[$0-3]},{tipo : "instrucciones", contenido : $$[$0-1]}] }; this.$ =recorrerJson(json);
break;
case 14:
this.$ = {tipo : "estructuras" , contenido : $$[$0]};
break;
case 15:
this.$ = {tipo : "estructuras" , contenido : []};
break;
case 16:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1];
break;
case 17: case 48:
this.$ = [$$[$0]];
break;
case 22:
var json = $$[$0-1]; json =  json.concat($$[$0]) ;this.$ = {tipo : "condicionalIf" , contenido : json };
break;
case 34:
this.$ = {tipo : "graficar" , contenido : []};
break;
case 35:
this.$ = {tipo : "break" , contenido : []};
break;
case 36:
this.$ = {tipo : "continue" , contenido : []};
break;
case 37:
this.$ = {tipo : "return" , contenido : []};
break;
case 38:
var exp = returnVector($$[$0-1]);var json = [{tipo : "expresion" , contenido : exp}];this.$ = {tipo : "returnE" , contenido : json};
break;
case 39:
var json = $$[$0-2];var temp = [{ tipo : "elseIf" , contenido : $$[$0]}]; json = json.concat(temp);this.$ = json;
break;
case 40:
this.$ = [{ tipo : "if" , contenido : $$[$0]}];
break;
case 41:
var exp ; if(Array.isArray($$[$0-4])){exp = $$[$0-4];}else{exp = [$$[$0-4]];} ;var json = [{tipo : "condicionIf" , contenido : exp},$$[$0-1]];this.$ =json;
break;
case 42:
var json = [{tipo : "else" , contenido : [$$[$0-1]]}];this.$ = json;
break;
case 44:
var exp ; if(Array.isArray($$[$0-5])){exp = $$[$0-5];}else{exp = [$$[$0-5]];} ;var json = [{tipo : "expresion" , contenido : exp}]; json = json.concat($$[$0-2]);json = json.concat($$[$0-1]);this.$ = {tipo : "switch" , contenido : json};
break;
case 47: case 83: case 95: case 99:
var json = $$[$0-1]; json = json.concat($$[$0]);this.$ = json;
break;
case 49:
var exp ; if(Array.isArray($$[$0-2])){exp = $$[$0-2];}else{exp = [$$[$0-2]];} ;var json = [{tipo : "expresion" , contenido : exp} , {tipo : "concatenar" , contenido : " " + $$[$0-1] + "\n"} ,$$[$0]]; this.$ = {tipo : "case" , contenido : json};
break;
case 50:
this.$ = [{tipo : "default" , contenido : [$$[$0]]}];
break;
case 52:
this.$ = {tipo : "imprimir" , contenido : $$[$0-2] };
break;
case 53:
var json; if(Array.isArray($$[$0])){json = $$[$0];}else{json = [$$[$0]];};this.$ = json;
break;
case 54: case 128:
this.$=[];
break;
case 55:
 var exp = returnVector($$[$0-4]) ; var json = [{ tipo : "condicionWhile" , contenido : exp} , $$[$0-1] ]; this.$ = {tipo : "while" , contenido : json}; 
break;
case 56:
var exp ; if(Array.isArray($$[$0-2])){exp = $$[$0-2];}else{exp = [$$[$0-2]];} ;var json = [$$[$0-6] , { tipo : "condicionDoWhile" , contenido : exp}]; this.$ = {tipo : "doWhile" , contenido : json};
break;
case 57:
var exp ; if(Array.isArray($$[$0-6])){exp = $$[$0-6];}else{exp = [$$[$0-6]];} ; var json = [{tipo : "inicioFor" , contenido : $$[$0-7]},{tipo : "condicionFor" , contenido : exp},{tipo : "finFor" , contenido : $$[$0-4]},$$[$0-1]]; this.$ = {tipo : "for" , contenido : json}; 
break;
case 58:
var exp = returnVector($$[$0-1]); var json = [{tipo : "variable_let" , contenido : $$[$0-6]},{tipo : "identificador" , contenido : $$[$0-5]},{tipo : "concatenar" , contenido : $$[$0-4]},{tipo : "tipoDato" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : " " + $$[$0-2]+ " "},{tipo : "expresion" , contenido : exp},{tipo : "concatenar" , contenido : $$[$0] +" "}];this.$=json;
break;
case 59:
var exp = returnVector($$[$0-1]);var json = [{tipo : "variable_let", contenido : $$[$0-4]},{tipo : "identificador" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : " "+$$[$0-2]+" "},{tipo : "expresion" , contenido : exp},{tipo : "concatenar" , contenido : $$[$0]}]; this.$ = json;
break;
case 60:
 var json = [{tipo : "identificador", contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}];this.$ = json;
break;
case 61:
var exp = returnVector($$[$0-1]);var json = [{tipo : "identificador", contenido : $$[$0-3]},{tipo : "concatenar" , contenido : " " + $$[$0-2] + " "},{tipo : "expresion" , contenido : exp},{tipo : "concatenar" , contenido : $$[$0]}];this.$ = json;
break;
case 62:
 var exp = returnVector($$[$0]);var  json = [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "expresion" , contenido : exp}]; this.$ = json;
break;
case 63: case 65:
 var  json = [{tipo : "identificador" , contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}]; this.$ = json;
break;
case 64: case 66:
 var  json = [{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "identificador" , contenido : $$[$0]}]; this.$ = json;
break;
case 67:
var json = [{tipo : "condicionForIn" , contenido : $$[$0-4]},$$[$0-1]];this.$ = {tipo : "ForIn" , contenido : json};
break;
case 68: case 72:
var json = [{tipo : "variable_const" , contenido : $$[$0-3] + " "},{tipo : "identificador" , contenido : $$[$0-2] + " "},{tipo : "concatenar" , contenido : $$[$0-1] + " "},{tipo : "identificador" , contenido : $$[$0]}];this.$ = json;
break;
case 69: case 73:
var json = [{tipo : "variable_let" , contenido : $$[$0-3] + " "},{tipo : "identificador" , contenido : $$[$0-2] + " "},{tipo : "concatenar" , contenido : $$[$0-1] + " "},{tipo : "identificador" , contenido : $$[$0]}];this.$ = json;
break;
case 70: case 74:
var json = [{tipo : "identificador" , contenido : $$[$0-2] + " "},{tipo : "concatenar" , contenido : $$[$0-1] + " "},{tipo : "identificador" , contenido : $$[$0] + " "}];this.$ = json;
break;
case 71:
var json = [{tipo : "condicionForOf" , contenido : $$[$0-4]},$$[$0-1]];this.$ = {tipo : "ForOf" , contenido : json};
break;
case 75:
var json = $$[$0-3]; json.push({tipo : "concatenar" , contenido : " " + $$[$0-2] + " "}); json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "asignacion" , contenido : json};
break;
case 76: case 78:
var json = $$[$0-3]; json.push({tipo : "concatenar" , contenido : $$[$0-2]}); json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "asignacion" , contenido : json};
break;
case 77:
var json = [{tipo : "concatenar", contenido : $$[$0-3]}]; json = json.concat($$[$0-2]);json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "asignacion" , contenido : json};
break;
case 79:
var json = [{tipo : "concatenar", contenido : $$[$0-3]}]; json = json.concat($$[$0-2]); json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "asignacion" , contenido : json};
break;
case 80:
var json = $$[$0-7]; json.push({tipo : "concatenar" , contenido : $$[$0-6]});json.push({tipo : "concatenar" , contenido : $$[$0-5]});json.push({tipo : "concatenar" , contenido : $$[$0-4]}); json = json.concat($$[$0-3]); json.push({ tipo : "concatenar" , contenido : $$[$0-2]});json = json.concat($$[$0-1]);json.push({ tipo : "concatenar" , contenido : $$[$0]}); this.$ = {tipo : "asignacion" , contenido : json};
break;
case 85:
 var json = [{tipo : "concatenar" , contenido : $$[$0-3] + " "},{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : " " + $$[$0-1] + " "}]; json = json.concat($$[$0]);this.$ = json;
break;
case 86: case 88:
 var json = [{tipo : "concatenar" , contenido : $$[$0-2] + " "},{tipo : "identificador" , contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}];this.$ = json;
break;
case 87: case 89:
 var json = [{tipo : "concatenar" , contenido : $$[$0-2] + " "},{tipo : "concatenar"    , contenido : $$[$0-1]},{tipo : "identificador" , contenido : $$[$0]}]; this.$ = json;
break;
case 90:
var json = [{tipo : "concatenar" , contenido : $$[$0-6] + " "}].concat($$[$0-5]); json.push({tipo : "concatenar" , contenido : $$[$0-4]}); json.push({tipo : "concatenar" , contenido : $$[$0-3]}); json.push({tipo : "concatenar" , contenido : $$[$0-2]}); json = json.concat($$[$0-1]) ; json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = json;
break;
case 92: case 93: case 107: case 108:
var json = []; json.push({tipo : "concatenar" , contenido : $$[$0-2]});json = json.concat($$[$0-1]);json.push({tipo : "concatenar" , contenido : $$[$0]}); this.$ = json;
break;
case 97:
this.$ = [{tipo : "concatenar" , contenido : "[]" }];
break;
case 101:
var json = [{tipo : "concatenar" , contenido : $$[$0-2]}].concat($$[$0-1]); json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = json;
break;
case 104:
var json = [] ; $$[$0-2].push({tipo : "concatenar" , contenido : $$[$0-1] + " "}); json = $$[$0-2].concat($$[$0]); this.$ = json;
break;
case 105:
var val; if(Array.isArray($$[$0])){val = $$[$0];}else{val = [$$[$0]];};this.$ = val;
break;
case 109:
var json = []; json = json.concat($$[$0-1]); json.push({tipo : "concatenar" , contenido : $$[$0]}); this.$ = {tipo : "variable_let" , contenido : json};
break;
case 110:
var json = []; json = json.concat($$[$0-1]); json.push({tipo : "concatenar" , contenido : $$[$0]}); this.$ = {tipo : "variable_const" , contenido : json};
break;
case 111:
$$[$0-2].push({tipo : "concatenar" , contenido : $$[$0-1] +" "});var json = $$[$0-2].concat($$[$0]);this.$ = json;
break;
case 113:
this.$ = [{tipo : "identificador" ,contenido : $$[$0]}];
break;
case 114:
var json = [{tipo : "identificador" ,contenido : $$[$0-2]},{tipo : "concatenar" ,contenido : $$[$0-1]},{tipo : "tipoDato" ,contenido : $$[$0]}];this.$ = json;
break;
case 115:
var json = [{tipo : "identificador" ,contenido : $$[$0-4]},{tipo : "concatenar" ,contenido : $$[$0-3]},{tipo : "tipoDato" ,contenido : $$[$0-2]},{tipo : "tipoDato" ,contenido : " " + $$[$0-1] + " "}];json = json.concat($$[$0]);this.$ = json;
break;
case 116:
var json = [{tipo : "identificador" ,contenido : $$[$0-2]},{tipo : "concatenar" ,contenido : " " + $$[$0-1] + " "}];json = json.concat($$[$0]);this.$ = json;
break;
case 117:
var json = [{tipo : "identificador" ,contenido : $$[$0-4]},{tipo : "concatenar" ,contenido : " " + $$[$0-3] + " "},{tipo : "concatenar" ,contenido : $$[$0-2]}]; json = json.concat($$[$0-1]);json.push({tipo : "concatenar" ,contenido : $$[$0]});this.$ = json;
break;
case 118:
var json = [{tipo : "identificador" ,contenido : $$[$0-3]},{tipo : "concatenar" ,contenido : $$[$0-2]},{tipo : "tipoDato" ,contenido : $$[$0-1]},{tipo : "concatenar" ,contenido : $$[$0]}];this.$ = json;
break;
case 119:
var json = [{tipo : "identificador" ,contenido : $$[$0-5]},{tipo : "concatenar" ,contenido : $$[$0-4]},{tipo : "tipoDato" ,contenido : $$[$0-3]},{tipo : "concatenar" ,contenido : $$[$0-2]},{tipo : "concatenar" ,contenido : " " + $$[$0-1] + " "},{tipo : "expresion" ,contenido : $$[$0]}];this.$ = json;
break;
case 120:
var json = [{tipo : "identificador" ,contenido : $$[$0-6]},{tipo : "concatenar" ,contenido : $$[$0-5]},{tipo : "tipoDato" ,contenido : $$[$0-4]},{tipo : "concatenar" ,contenido : " " + $$[$0-3] + " "},{tipo : "concatenar" ,contenido : $$[$0-2]}];json = json.concat($$[$0-1]);json.push({tipo : "concatenar" ,contenido : $$[$0]});this.$ = json;
break;
case 121:
var json = [{tipo : "identificador" ,contenido : $$[$0-4]},{tipo : "concatenar" ,contenido : " " + $$[$0-3] + " "},{tipo : "concatenar" ,contenido : $$[$0-2]}]; json = json.concat($$[$0-1]);json.push({tipo : "concatenar" ,contenido : $$[$0]});this.$=json;
break;
case 122:
var temp = []; temp.push({tipo : "identificador" , contenido : $$[$0-4]});temp.push({tipo : "concatenar" , contenido : $$[$0-3]}); temp = temp.concat($$[$0-2]);temp.push({tipo : "concatenar" , contenido : $$[$0-1]});temp.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = { tipo : "llamadaF" , contenido : temp};
break;
case 123:
var json = $$[$0-5]; json.push({tipo : "concatenar" , contenido : $$[$0-4]});json.push({tipo : "concatenar" , contenido : $$[$0-3]});json.push({tipo : "concatenar" , contenido : $$[$0-2]});json.push({tipo : "concatenar" , contenido : $$[$0-1]});json.push({tipo : "concatenar" , contenido : $$[$0]});this.$ = {tipo : "llamadaF" , contenido : json};
break;
case 124:
var json = $$[$0-2]; json.push({tipo : "concatenar" , contenido : $$[$0-1] + " "}); json = json.concat($$[$0]);this.$ = json;
break;
case 125:
var json;if(Array.isArray($$[$0])){json = $$[$0];}else{json = [$$[$0]]};this.$ = json;
break;
case 129:
$$[$0-2].push({tipo:"concatenar",contenido : $$[$0-1] + " "});$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 130:
this.$=[$$[$0]];
break;
case 131:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "tipoDato" , contenido : $$[$0]}]} ; this.$ = json;
break;
case 132:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-4]},{tipo : "concatenar" , contenido : $$[$0-3]},{tipo : "tipoDato" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "expresion" , contenido : $$[$0]}]} ; this.$ = json;
break;
case 133:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "tipoDato" , contenido : $$[$0]}]} ; this.$ = json;
break;
case 134:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : $$[$0-2]},{tipo : "tipoDato" , contenido : $$[$0-1]}].concat($$[$0])} ; this.$ = json;
break;
case 135:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-5]},{tipo : "concatenar" , contenido : $$[$0-4]},{tipo : "tipoDato" , contenido : $$[$0-3]}].concat($$[$0-2])} ;json.push({tipo : "concatenar" , contenido : $$[$0-1]}); json.push({tipo : "expresion" , contenido : $$[$0]});this.$ = json;
break;
case 136:
var json = {tipo : "parametro" , contenido : [{tipo : "identificador" , contenido : $$[$0-4]},{tipo : "concatenar" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : $$[$0-2]},{tipo : "tipoDato" , contenido : $$[$0-1]}].concat($$[$0])} ; this.$ = json;
break;
case 137:
var json = [{tipo : "concatenar" , contenido : $$[$0-5] + " "},{tipo : "identificador" , contenido : $$[$0-4] + " "},{tipo : "concatenar" , contenido : " " + $$[$0-3] + " "},{tipo : "concatenar" , contenido : $$[$0-2] + "\n"}]; json = json.concat($$[$0-1]);json = json.concat($$[$0]); this.$ = {tipo : "type" , contenido : json};
break;
case 138:
var json = []; $$[$0-2].push($$[$0-1]);json = $$[$0-2].concat($$[$0]);this.$ = json;
break;
case 139:
this.$=$$[$0];
break;
case 140:
var json = [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "tipoDato" , contenido : $$[$0]}];this.$ = json;
break;
case 141:
var json = [{tipo : "identificador" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : $$[$0-2]},{tipo : "tipoDato" , contenido : $$[$0-1]}].concat($$[$0]);this.$ = json;
break;
case 142: case 143:
this.$  = {tipo : "concatenar", contenido : $$[$0] + "\n"};
break;
case 144:
var json = [{tipo : "concatenar", contenido : "\n" +  $$[$0-1]},{tipo : "concatenar", contenido : $$[$0] + "\n"}];this.$=json;
break;
case 145:
this.$ = [{tipo : "concatenar", contenido : "\n" + $$[$0] + "\n"}];
break;
case 146:
var json = $$[$0-2];json.push($$[$0-1]); json = json.concat($$[$0]);this.$ =json;
break;
case 148:
var json = [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]}].concat($$[$0]);this.$ = json;
break;
case 149: case 150:
this.$ = {tipo : "concatenar" , contenido : $$[$0]};
break;
case 158:
var json = $$[$0-2] ; json.push({tipo : "concatenar" , contenido : $$[$0-1]});json = json.concat($$[$0]);this.$=json;
break;
case 160:
 var json = [{tipo : "identificador" , contenido : $$[$0-1]}].concat($$[$0]); this.$ = json;
break;
case 161:
var json  = [{tipo : "identificador" , contenido : $$[$0]}]; this.$ = json;
break;
case 162: case 163: case 164: case 165: case 166: case 167: case 168: case 169: case 170: case 171: case 172: case 173: case 174: case 175:
 this.$ = expresion($$[$0-2],{ tipo : "concatenar", contenido : " " + $$[$0-1] + " "},$$[$0]);
break;
case 176: case 177:
 this.$ = unaria($$[$0-1],{ tipo : "concatenar", contenido : $$[$0] +" "}); 
break;
case 178: case 179: case 180: case 181:
 this.$ = unaria({ tipo : "concatenar", contenido : $$[$0-1]},$$[$0]); 
break;
case 183: case 184: case 185: case 186: case 187:
var json  = {tipo : "valor" , contenido : $$[$0]}; this.$ = json;
break;
case 188:
 var json = [{tipo : "identificador" , contenido : $$[$0-2]},{tipo : "concatenar" , contenido : $$[$0-1]},{tipo : "concatenar" , contenido : $$[$0]}]; this.$ = json;
break;
case 189:
 var json = [{tipo : "identificador" , contenido : $$[$0-3]},{tipo : "concatenar" , contenido : $$[$0-2]}]; var temp = json.concat($$[$0-1]); temp.push({tipo : "concatenar" , contenido : $$[$0]}); this.$ = temp;
break;
case 190:
 this.$ = expresion({ tipo : "concatenar", contenido : $$[$0-2]},$$[$0-1],{ tipo : "concatenar", contenido : $$[$0]});
break;
case 192:
$$[$0-2].push({tipo : "concatenar" , contenido : $$[$0-1] });$$[$0-2].push({tipo : "concatenar" , contenido : $$[$0] });this.$=$$[$0-2];
break;
case 193:
$$[$0-4].push({tipo : "concatenar" , contenido : $$[$0-3] });$$[$0-4].push({tipo : "concatenar" , contenido : $$[$0-2] });$$[$0-4].push({tipo : "concatenar" , contenido : $$[$0-1] });$$[$0-4].push({tipo : "concatenar" , contenido : $$[$0] });this.$=$$[$0-4];
break;
case 194:
var json = $$[$0-2] ;json.push({tipo : "concatenar" , contenido : $$[$0-1] + " "}); json = json.concat($$[$0]);this.$ = json;
break;
case 195:
var json ; if(Array.isArray($$[$0])){json = $$[$0];}else{json = [$$[$0]];} ;this.$ = json;
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,9:5,10:6,11:$V2,12:$V3,20:$V4,24:$V5,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},{1:[3]},{5:[1,42]},o($Vj,[2,2]),o($Vj,$Vk,{9:5,10:6,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,73:25,49:28,110:40,8:43,7:44,2:$V0,11:$V2,12:$V3,20:$V4,24:$V5,43:$V6,44:$V7,45:$V8,46:$V9,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,99:$Vi}),o($Vl,[2,7]),o($Vl,[2,8]),o($Vl,[2,9]),{12:[1,45]},{12:[1,46],92:47,93:48},{12:[1,49],92:50,93:48},o($Vm,[2,20]),o($Vm,[2,21]),o($Vm,[2,43],{31:51,48:[1,52]}),o($Vm,[2,23]),o($Vm,[2,24]),o($Vm,[2,25]),o($Vm,[2,26]),o($Vm,[2,27]),o($Vm,[2,28]),o($Vm,[2,29]),o($Vm,[2,30]),o($Vm,[2,31]),o($Vm,[2,32]),o($Vm,[2,33]),{21:[1,53],59:[1,56],67:[1,54],68:[1,55]},{12:$Vn,73:57,110:40},{12:$Vn,73:59,110:40},o($Vo,[2,40]),{13:[1,60]},{59:[1,61]},{13:[1,62]},{16:[1,63]},{13:[1,64]},{23:[1,65]},{23:[1,66]},{12:$Vp,13:$Vq,23:[1,67],47:68,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{13:[1,82]},o([21,59,67,68],$VA,{87:84,88:85,89:86,13:[1,83],80:$VB}),{12:[1,88]},o($VC,[2,159]),{13:[1,89]},{1:[2,1]},o($Vj,[2,4]),o($Vj,$Vk,{9:5,10:6,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,73:25,49:28,110:40,7:44,8:90,2:$V0,11:$V2,12:$V3,20:$V4,24:$V5,43:$V6,44:$V7,45:$V8,46:$V9,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,99:$Vi}),{13:[1,91]},o($VD,$VE,{18:$VF,21:[1,92]}),{23:[1,94],79:$VG},o($VD,[2,112]),o($VD,$VE,{18:$VF,21:[1,96]}),{23:[1,97],79:$VG},o($Vm,[2,22]),{16:[1,99],49:98,50:$Va},{12:$Vp,13:$Vq,16:$VH,47:101,67:$Vr,68:$Vs,73:81,74:100,80:$VI,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{23:$VJ,75:104,77:105,78:106,79:$VK},{23:$VJ,75:108,77:105,78:106,79:$VK},{12:$Vn,76:[1,109],95:[1,110],110:111},{23:$VJ,59:$VL,75:112,77:105,78:106,79:$VK},o($VC,$VA,{87:84,88:85,89:86,80:$VB}),{23:$VJ,59:$VL,75:114,77:105,78:106,79:$VK},{12:$Vp,13:$Vq,47:115,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{60:[1,116]},{12:$Vp,13:$Vq,47:117,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{2:$VM,10:121,12:$V3,17:$VN,20:$VO,24:$VP,25:118,26:119,27:120,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},{12:[1,129],20:[1,128],24:[1,130],65:125,69:127,71:126},o($Vm,[2,35]),o($Vm,[2,36]),o($Vm,[2,37]),{23:[1,131],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},o($V21,[2,182],{67:[1,147],68:[1,146]}),{12:$Vp,13:$Vq,73:81,110:40,125:148,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,73:81,110:40,125:149,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,73:81,110:40,125:150,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,73:81,110:40,125:151,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},o($V31,[2,183]),o($V31,[2,184]),o($V31,[2,185]),o($V31,[2,186]),o($V31,[2,187]),o([15,17,18,23,59,67,68,79,82,111,112,113,114,115,116,117,118,119,120,121,122,123,124],$VA,{87:84,88:85,89:86,13:[1,152],80:$VB}),{12:$Vp,13:$Vq,47:153,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},o($V31,[2,191],{59:[1,154]}),{15:[1,155]},o($V41,[2,126],{110:40,125:69,73:81,94:156,47:157,12:$Vp,13:$Vq,67:$Vr,68:$Vs,120:$Vt,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz}),o($VC,[2,160]),o($VC,[2,98],{89:158,80:$VB}),o($V51,[2,100]),{12:$Vp,13:$Vq,16:$V61,47:162,67:$Vr,68:$Vs,73:81,80:$V71,81:159,82:$V81,90:160,91:161,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{21:[1,165]},{12:$Vp,13:$Vq,47:166,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},o($Vj,[2,5]),{12:$V91,14:167,15:$Va1,96:168,97:169},{11:[1,171],12:$Vp,13:$Vq,16:$Vb1,47:172,67:$Vr,68:$Vs,73:81,80:$Vc1,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vd1,19:175,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1},o($Vm,[2,109]),{12:$Vi1,93:181},{11:[1,183],12:$Vp,13:$Vq,16:$Vb1,47:172,67:$Vr,68:$Vs,73:81,80:$Vc1,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},o($Vm,[2,110]),o($Vo,[2,39]),{2:$VM,10:121,12:$V3,17:$VN,20:$VO,24:$VP,25:184,26:119,27:120,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},{23:[1,185]},o($Vj1,[2,91],{111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),{12:$Vp,13:$Vq,16:$V61,47:162,67:$Vr,68:$Vs,73:81,80:$V71,81:186,82:$V81,90:160,91:161,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vk1,83:187,105:188},{23:[1,190]},{23:[2,81],78:191,79:$VK},o($VD,[2,84]),{12:[1,192],67:[1,193],68:[1,194],73:195,110:40},{23:[1,196]},{13:[1,197]},{13:[1,198]},o($VC,[2,158]),{23:[1,199]},{12:$Vn,110:111},{23:[1,200]},{15:[1,201],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},{13:[1,202]},{15:[1,203],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},{17:[1,204]},o($Vl1,[2,14],{28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,73:25,49:28,110:40,10:121,27:205,2:$VM,12:$V3,20:$VO,24:$VP,43:$V6,44:$V7,45:$V8,46:$V9,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,99:$Vi}),o($Vm1,[2,17]),o($Vm1,[2,18]),o($Vm1,[2,19]),{12:$Vi1,92:47,93:48},{12:$Vi1,92:50,93:48},{12:$Vp,13:$Vq,47:206,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{15:[1,207]},{15:[1,208]},{12:[1,209]},{21:[1,211],23:[1,210],70:[1,213],72:[1,212]},{12:[1,214]},o($Vm,[2,38]),{12:$Vp,13:$Vq,47:215,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:216,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:217,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:218,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:219,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:220,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:221,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:222,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:223,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:224,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:225,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:226,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:227,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:228,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},o($V21,[2,176]),o($V21,[2,177]),o($V21,[2,178]),o($V21,[2,179]),o($V21,[2,180]),o($V21,[2,181]),{12:$Vp,13:$Vq,15:[1,229],47:231,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz,132:230},{15:[1,232],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},{12:$Vn,95:[1,234],110:111,133:[1,233]},{23:[1,235]},{15:[1,236],79:[1,237]},o($V41,[2,125],{111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),o($V51,[2,99]),{82:[1,238]},{79:[1,239],82:[2,102]},o($Vn1,[2,105]),o($Vn1,[2,106],{111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),{12:$Vp,13:$Vq,16:$V61,47:162,67:$Vr,68:$Vs,73:81,80:$V71,81:240,82:$V81,90:160,91:161,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vk1,83:241,105:188},{16:[1,242]},{15:[1,243],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},{15:[1,244]},{15:[2,127],79:[1,245]},o($V41,[2,130]),{18:[1,246],98:[1,247]},{13:[1,248]},o($VD,[2,116],{111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),{12:$Vp,13:$Vq,16:$V61,47:162,67:$Vr,68:$Vs,73:81,80:$V71,81:249,82:$V81,90:160,91:161,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vk1,83:250,105:188},o($VD,[2,114],{84:252,85:253,86:254,21:[1,251],80:$Vo1}),o($Vp1,[2,151]),o($Vp1,[2,152]),o($Vp1,[2,153]),o($Vp1,[2,154]),o($Vp1,[2,155]),o($VD,[2,111]),o($VD,$VE,{18:$VF,21:[1,256]}),{13:[1,257]},{17:[1,258]},o($Vm,[2,75]),{82:[1,259]},{17:[1,260],23:$Vq1,79:$Vr1,104:261},o($Vs1,[2,147]),{18:[1,264]},o($Vm,[2,76]),o($VD,[2,83]),{21:[1,265],59:$VA,67:[1,266],68:[1,267],80:$VB,87:84,88:85,89:86},{12:[1,268]},{12:[1,269]},{59:[1,270]},o($Vm,[2,78]),{12:$Vp,13:$Vq,16:$VH,47:101,67:$Vr,68:$Vs,73:81,74:271,80:$VI,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{15:[1,272]},o($Vm,[2,77]),o($Vm,[2,79]),{16:[1,273]},{12:$Vp,13:$Vq,15:[2,54],47:275,61:274,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{16:[1,276]},{62:[1,277]},o($Vm1,[2,16]),{23:[1,278],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},{16:[1,279]},{16:[1,280]},{18:[1,281],21:[1,282],70:[1,284],72:[1,283]},o($Vt1,[2,60]),{12:$Vp,13:$Vq,47:285,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:[1,286]},{12:[1,287]},{70:[1,289],72:[1,288]},o($Vu1,[2,162],{113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),o($Vu1,[2,163],{113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),o($Vv1,[2,164],{119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),o($Vv1,[2,165],{119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),o($Vv1,[2,166],{119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),o($Vv1,[2,167],{119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),o($Vv1,[2,168],{119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),o($Vv1,[2,169],{119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),o($Vw1,[2,170],{121:$V_,122:$V$,123:$V01,124:$V11}),o($Vw1,[2,171],{121:$V_,122:$V$,123:$V01,124:$V11}),o($Vx1,[2,172],{123:$V01,124:$V11}),o($Vx1,[2,173],{123:$V01,124:$V11}),o($V21,[2,174]),o($V21,[2,175]),o($V31,[2,188]),{15:[1,290],79:[1,291]},o($V41,[2,195],{111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),o($V31,[2,190]),o($V31,[2,192]),{13:[1,292]},o($Vm,[2,34]),{23:[1,293]},{12:$Vp,13:$Vq,47:294,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},o($V51,[2,101]),{12:$Vp,13:$Vq,16:$V61,47:162,67:$Vr,68:$Vs,73:81,80:$V71,91:295,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{82:[1,296]},{17:[1,297],23:$Vq1,79:$Vr1,104:261},{12:$Vy1,100:298,103:299},{16:[1,301]},{16:[1,302],18:[1,303]},{12:$V91,97:304},{12:$Vd1,19:305,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1},{18:[1,306]},{12:$V91,14:307,15:$Va1,96:168,97:169},{82:[1,308]},{17:[1,309],23:$Vq1,79:$Vr1,104:261},{12:$Vp,13:$Vq,16:[1,311],47:310,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},o($VD,[2,118],{21:[1,312]}),o([15,17,21,23,79],[2,94],{86:313,80:$Vo1}),o($Vz1,[2,96]),{82:[1,314]},{12:$Vp,13:$Vq,16:$Vb1,47:172,67:$Vr,68:$Vs,73:81,80:$Vc1,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$V91,14:315,15:$Va1,96:168,97:169},o($Vm,[2,42]),o($Vj1,[2,92]),o($Vj1,[2,93]),{12:$Vk1,105:316},{12:[2,149]},{12:[2,150]},{12:$Vp,13:$Vq,16:$VH,47:101,67:$Vr,68:$Vs,73:81,74:317,80:$VI,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:$Vp,13:$Vq,47:318,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},o($VD,[2,86]),o($VD,[2,88]),o($VD,[2,87]),o($VD,[2,89]),{12:$Vn,76:[1,319],110:111},{15:[1,320]},{23:[1,321]},o($VA1,[2,46],{52:322,54:323,55:324,56:$VB1}),{15:[1,326]},{15:[2,53],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},{2:$VM,10:121,12:$V3,17:$VN,20:$VO,24:$VP,25:327,26:119,27:120,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},{13:[1,328]},{12:[1,330],66:329,67:[1,331],68:[1,332]},{2:$VM,10:121,12:$V3,17:$VN,20:$VO,24:$VP,25:333,26:119,27:120,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},{2:$VM,10:121,12:$V3,17:$VN,20:$VO,24:$VP,25:334,26:119,27:120,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},{12:$Vd1,19:335,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1},{12:$Vp,13:$Vq,47:336,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{12:[1,337]},{12:[1,338]},{23:[1,339],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},{15:[2,74]},{15:[2,70]},{12:[1,340]},{12:[1,341]},o($V31,[2,189]),{12:$Vp,13:$Vq,47:342,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{15:[1,343]},o($Vm,[2,122]),o($V41,[2,124],{111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),o($Vn1,[2,104]),o($Vn1,[2,107]),o($Vn1,[2,108]),{17:[1,346],23:[1,348],79:[1,347],101:344,102:345},o($Vs1,[2,139]),{18:[1,349]},{2:$VM,10:121,12:$V3,17:$VN,20:$VO,24:$VP,25:350,26:119,27:120,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},{2:$V0,4:351,6:3,7:4,9:5,10:6,11:$V2,12:$V3,17:$V1,20:$V4,24:$V5,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},{12:$Vd1,19:352,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1},o($V41,[2,129]),o($V41,[2,131],{85:253,86:254,84:354,21:[1,353],80:$Vo1}),{12:$Vd1,19:355,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1},{15:[1,356]},o($VD,[2,117]),o($VD,[2,121]),o($VD,[2,115],{111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),{12:$Vk1,83:357,105:188},{80:$VB,87:358,88:85,89:86},o($Vz1,[2,95]),o($Vz1,[2,97]),{15:[1,359]},o($Vs1,[2,146]),o($Vs1,[2,148]),o($VD,[2,85],{111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),{13:[1,360]},{23:$VJ,75:361,77:105,78:106,79:$VK},o($Vm,[2,123]),{17:[2,51],53:362,57:[1,363]},o($VA1,[2,45],{55:364,56:$VB1}),o($Vl1,[2,48]),{12:$Vp,13:$Vq,47:365,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{23:[1,366]},{17:[1,367]},{12:$Vp,13:$Vq,47:368,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{15:[1,369]},{21:[1,370],67:[1,371],68:[1,372]},{12:[1,373]},{12:[1,374]},{17:[1,375]},{17:[1,376]},{21:[1,377]},{23:[1,378],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},{15:[2,73]},{15:[2,69]},o($Vt1,[2,61]),{15:[2,72]},{15:[2,68]},o($V41,[2,194],{111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11}),o($V31,[2,193]),o($Vm,[2,137]),{12:$Vy1,103:379},o($Vm,[2,145],{23:[1,380]}),{12:[2,142]},{12:[2,143]},{12:$Vd1,19:381,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1},{17:[1,382]},{17:[1,383]},{16:[1,384]},{12:$Vp,13:$Vq,16:$VH,47:101,67:$Vr,68:$Vs,73:81,74:385,80:$VI,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},o($V41,[2,134],{21:[1,386]}),o($V41,[2,133],{85:253,86:254,84:387,80:$Vo1}),{16:$VC1,18:$VD1,22:388},{17:[1,390],23:$Vq1,79:$Vr1,104:261},o($VD,[2,119]),{16:$VC1,18:$VD1,22:391},{12:$Vp,13:$Vq,16:$VH,47:101,67:$Vr,68:$Vs,73:81,74:392,80:$VI,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{23:[1,393]},{17:[1,394]},{18:[1,395]},o($Vl1,[2,47]),{18:[1,396],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},o($Vm,[2,52]),o($Vm,[2,55]),{15:[1,397],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},{16:[1,398]},{12:$Vp,13:$Vq,47:399,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},{15:[2,63]},{15:[2,65]},{15:[2,64]},{15:[2,66]},o($Vm,[2,71]),o($Vm,[2,67]),{12:$Vp,13:$Vq,47:400,67:$Vr,68:$Vs,73:81,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},o($Vt1,[2,59]),o($Vs1,[2,138]),o($Vm,[2,144]),o($Vs1,[2,140],{85:253,86:254,84:401,80:$Vo1}),o($Vo,[2,41]),o($Vl,[2,10]),{2:$V0,4:402,6:3,7:4,9:5,10:6,11:$V2,12:$V3,17:$V1,20:$V4,24:$V5,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},o($V41,[2,132]),{12:$Vp,13:$Vq,16:$VH,47:101,67:$Vr,68:$Vs,73:81,74:403,80:$VI,110:40,120:$Vt,125:69,126:$Vu,127:$Vv,128:$Vw,129:$Vx,130:$Vy,131:$Vz},o($V41,[2,136]),{16:[1,404]},{12:$Vd1,19:405,106:$Ve1,107:$Vf1,108:$Vg1,109:$Vh1},o($VD,[2,120]),{16:[1,406]},{15:[1,407]},o($Vm,[2,80]),o($Vm,[2,44]),{2:$VM,10:121,12:$V3,17:$VN,20:$VO,24:$VP,25:408,26:119,27:120,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},o($Vl1,$VN,{28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,73:25,49:28,110:40,26:119,27:120,10:121,25:409,2:$VM,12:$V3,20:$VO,24:$VP,43:$V6,44:$V7,45:$V8,46:$V9,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,99:$Vi}),{23:[1,410]},{2:$VM,10:121,12:$V3,17:$VN,20:$VO,24:$VP,25:411,26:119,27:120,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},{15:[2,62],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},{23:[1,412],111:$VQ,112:$VR,113:$VS,114:$VT,115:$VU,116:$VV,117:$VW,118:$VX,119:$VY,120:$VZ,121:$V_,122:$V$,123:$V01,124:$V11},o($Vs1,[2,141]),{17:[1,413]},o($V41,[2,135]),{2:$V0,4:414,6:3,7:4,9:5,10:6,11:$V2,12:$V3,17:$V1,20:$V4,24:$V5,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},{16:[2,156]},{2:$V0,4:415,6:3,7:4,9:5,10:6,11:$V2,12:$V3,17:$V1,20:$V4,24:$V5,28:11,29:12,30:13,32:14,33:15,34:16,35:17,36:18,37:19,38:20,39:21,40:22,41:23,42:24,43:$V6,44:$V7,45:$V8,46:$V9,49:28,50:$Va,51:$Vb,58:$Vc,62:$Vd,63:$Ve,64:$Vf,67:$Vg,68:$Vh,73:25,99:$Vi,110:40},o($VD,[2,90]),{17:[2,50]},o($Vl1,[2,49]),o($Vm,[2,56]),{17:[1,416]},o($Vt1,[2,58]),o($Vl,[2,11]),{17:[1,417]},{17:[1,418]},o($Vm,[2,57]),{23:[1,419]},{23:[1,420]},o($Vl,[2,12]),o($Vl,[2,13])],
defaultActions: {42:[2,1],262:[2,149],263:[2,150],286:[2,74],287:[2,70],337:[2,73],338:[2,69],340:[2,72],341:[2,68],347:[2,142],348:[2,143],371:[2,63],372:[2,65],373:[2,64],374:[2,66],405:[2,156],408:[2,50]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

// funcion que retorna vector de operaciones con 2 operadores
function expresion(valor1, operador, valor2) {
    var json = [];
    json = json.concat(returnVector(valor1));
    json = json.concat(returnVector(operador));
    json = json.concat(returnVector(valor2));
    return json;
}

// funcion que retorna vector de operaciones con 1 operador
function unaria(valor1,valor2){
    var json = [];
    json = json.concat(returnVector(valor1));
    json = json.concat(returnVector(valor2));
    return json;
}

//funcion que retorna 1 vector
function returnVector(val){
    if(Array.isArray(val)==true){
        return val;
    }else{
        return [val];
    }
}

//funcion que desanida funciones anidadas
function recorrerJson(json){
    var instr = [];
    var t = [];
    var fPadre = "";
    var fHijo = "";
    if(json.tipo == "funcion" || json.tipo == "funcionT" ){
        for( var element of json.contenido){
            if(element.tipo == "identificador"){          
                    fPadre = element.contenido;
            }
            if(element.tipo == "instrucciones"){
                for(var ele of element.contenido){
                    var index = element.contenido.indexOf(ele);
                    if(ele.tipo == "funcion"){
                        t.push(ele);
                    }else if(ele.tipo == "funcionT"){
                        t.push(ele);
                    }else{
                        instr.push(ele);
                    }
                }   
                if(t.length != 0){
                  recV(fPadre,t,instr);
                }      
                element.contenido = instr;
                break;
            }
        }
    }
    if(t.length == 0){
        return json;
    }else{
        return t.concat([json]);
    }
}

//funcion que recorre vector de funciones desanidadas
function recV (idP ,t,instr){
    for(var element of t){
        var fH = element.contenido[0].contenido;
        for(var e of t){
            recursiva(idP,fH,e);
        }

        for(var el of instr){
            recursiva(idP,fH,el);
        }
    }
}

//funcion que busca llamadas a funciones de la funcion padre
function recursiva(idP ,idB ,arbol){
    if(arbol.tipo == "identificador"){
        if(arbol.contenido == idB){
            arbol.contenido = idP+"_"+arbol.contenido;
        }
    }else{
        if(Array.isArray(arbol.contenido)){
            for(var e of arbol.contenido){
                recursiva(idP,idB,e);
            }
        }
    }
}

//funcion que analiza el json formado de funciones anidadas para generar traduccion
function traducir(json){
    var traduccion = ""
    for(var element of json){
        if(element.tipo == "funcion"){
            traduccion += tFuncion(element)
        }else if(element.tipo == "funcionT"){
            traduccion += tFuncionT(element)
        }else if(element.tipo == "variable_let"){
            traduccion += decVariable(element, "let ");
        }else if(element.tipo == "variable_const"){
            traduccion += decVariable(element , "const ");
        }else if(element.tipo == "asignacion"){
            traduccion += asignacionV(element);
        }else if(element.tipo == "type"){
            traduccion += typesTraduccion(element);
        }else if(element.tipo == "contenidoGlobal"){
            traduccion += traducir(element.contenido);
        }else if(element.tipo == "llamadaF"){
            traduccion += llamadasFuncion(element);
        }else if(element.tipo == "graficar"){
            traduccion += graficarTs();
        }else if(element.tipo == "imprimir"){
            traduccion += imprimirConsole(element.contenido) ;
        }else if(element.tipo == "break"){
            traduccion += "break;\n"
        }else if(element.tipo == "continue"){
            traduccion += "continue;\n"
        }else if(element.tipo == "return"){
            traduccion += "return;\n"
        }else if(element.tipo == "returnE"){
            traduccion += rConValor(element.contenido);
        }else if(element.tipo == "while"){
            traduccion += eWhile(element.contenido);
        }else if(element.tipo == "doWhile"){
            traduccion += eDoWhile(element.contenido)
        }else if(element.tipo == "for"){
            traduccion += eFor(element.contenido);
        }else if(element.tipo == "ForOf"){
            traduccion += eForOf(element.contenido);
        }else if(element.tipo == "ForIn"){
            traduccion += eForIn(element.contenido);
        }else if(element.tipo == "switch"){
            traduccion += eSwitch(element.contenido);
        }else if(element.tipo == "condicionalIf"){
            traduccion += eIf(element.contenido);
        }
    }
    return traduccion;
}

//funcion que retorna funcion para traduccion
function tFuncion(f){
    var cad= "";
    var par = "";
    var inst ="";
    par = parametros(f.contenido[1].contenido);
    inst = traducir(f.contenido[2].contenido);
    cad += "function " + f.contenido[0].contenido  + "(" + par +  "){\n";
    cad += inst;
    cad += "}\n\n";
    return cad;
}

//funcion que retorna funcion con tipo para traduccion
function tFuncionT(f){
    var cad= "";
    var par = "";
    var inst ="";
    par = parametros(f.contenido[1].contenido);
    inst = traducir(f.contenido[3].contenido);
    cad += "function " + f.contenido[0].contenido  + "(" + par +  ") : "+ f.contenido[2].contenido +"{\n";
    cad += inst;
    cad += "}\n\n";
    return cad;
}

//funcion que retorna parametros para traduccion
function parametros(f){
    var cad = "";
    for(var element of f){
        if(element.tipo == "parametro"){
            for(var ele of element.contenido){
                if(ele.tipo == "expresion"){
                    for(var e of ele.contenido){
                        cad += e.contenido;
                    }
                }else{
                    cad += ele.contenido;
                }
            }
        }else if(element.tipo == "concatenar"){
            cad += element.contenido + " ";
        }
    }
    return cad;
}

// funcion que retorna declaracion de variables para traduccion
function decVariable (f, tip){
    var cad = tip;
    for(var ele of f.contenido){
        if(ele.tipo == "expresion"){
            for(var e of ele.contenido){
                cad+= e.contenido;
            }
        }else{
            cad+= ele.contenido;
        }
    }
    cad+= "\n";
    return cad;
}

// funcion que retorna asignacion de valores para la traduccion
function asignacionV (f){
    var cad = "";
    for(var element of f.contenido){
        cad += element.contenido;
    }
    cad += "\n";
    return cad;
}

// funcion que retorna declaracion de types para la traduccion
function typesTraduccion (f){
    var cad = "";
    for(var element of f.contenido){
        cad += element.contenido;
    }
    cad += "\n";
    return cad;
}

//funcion que retorna las llamadas a funcion para la traduccion
function llamadasFuncion(f){
    var cad = "";
    for(var element of f.contenido){
        cad += element.contenido;
    }
    cad += "\n";
    return cad;
}

//funcion que retorna la funcion graficar para la traduccion
function graficarTs(){
    var cad = "graficar_ts();\n"
    return cad;
}

//funcion que retorna la funcion imprimir para la traduccion
function imprimirConsole(f){
    var cad = "console.log(";
    for(var element of f ){
        cad += element.contenido;
    }
    cad += ");\n";
    return cad;
}

//funcion que devuelve el return con valor para traduccion
function rConValor(f){
    var cad = "return "
    for(var element of f){
        if(element.tipo == "expresion"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
        }
    }
    cad += ";\n";
    return cad;
}

//funcion que devuelve el while para traduccion
function eWhile(f){
    cad ="\nwhile( ";
    for(var element of f){
        if(element.tipo == "condicionWhile"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad +=" ){\n";
        }else if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
        }
    }
    cad +="}\n";
    return cad;
}

//funcion que devuelve el dowhile para traduccion
function eDoWhile(f){
    var cad = "\ndo{\n";
    for(var element of f){
        if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
            cad += "}while( "
        }else if(element.tipo == "condicionDoWhile"){
            for(var e of element.contenido){
                cad += e.contenido;
            }
        }
    }
    cad += " );\n"
    return cad;
}

//funcion que devuelve el for para traduccion
function eFor(f){
    var cad = "\nfor( ";
    for(var element of f){
        if(element.tipo == "inicioFor"){
            for(var ele of element.contenido){
                if(ele.tipo == "expresion"){
                    for(var e of ele.contenido){
                        cad += e.contenido; 
                    }
                }else{
                    cad+=ele.contenido;
                }
            }
        }else if(element.tipo == "condicionFor"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad += "; ";
        }else if(element.tipo == "finFor"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad+=" ){\n"
        }else if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
        }
    }
    cad+= "}\n";
    return cad;
}

function eForIn(f){
    var cad = "\nfor( ";
    for(var element of f){
        if(element.tipo == "condicionForIn"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad += " ){\n";
        }else if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
        }

    }
    cad += "}\n";
    return cad;
}

function eForOf(f){
    var cad = "\nfor( ";
    for(var element of f){
        if(element.tipo == "condicionForOf"){
            for(var ele of element.contenido){
                cad += ele.contenido;
            }
            cad += " ){\n";
        }else if(element.tipo == "estructuras"){
            cad += traducir(element.contenido);
        }
    }
    cad += "}\n"
    return cad;
}

function eSwitch(f){
    var cad = "switch( ";
    for(var element of f){
        if(element.tipo == "expresion"){
            for(var e of element.contenido){
                cad += e.contenido;
            }
            cad += " ){\n"
        }else if(element.tipo == "case"){
            cad += "case ";
            for(var ele of element.contenido){
                if(ele.tipo == "expresion"){
                    for(var p of ele.contenido){
                        cad += p.contenido
                    }
                }else if(ele.tipo == "concatenar"){
                    cad += ele.contenido;
                }else if(ele.tipo == "estructuras"){
                    cad += traducir(ele.contenido);
                }
            }
        }else if(element.tipo == "default"){
            cad += "default :\n"
            for(var ele of element.contenido){
                if(ele.tipo == "estructuras"){
                    cad+= traducir(ele.contenido);
                }
            }
        }
    }
    cad += "}\n";
    return cad;
}

function eIf(f){
    var cad = "";
    for(var element of f){
        if(element.tipo ==  "if"){
            cad += "if( ";
            for(var ele of element.contenido){
                if(ele.tipo == "condicionIf"){
                    for(var e of ele.contenido){
                        cad += e.contenido
                    }
                    cad += " )\n{\n"
                }else if(ele.tipo == "estructuras"){
                    cad += traducir(ele.contenido);
                }
            }
        }else if(element.tipo ==  "elseIf"){
            cad += "}\nelse if( ";
            for(var ele of element.contenido){
                if(ele.tipo == "condicionIf"){
                    for(var e of ele.contenido){
                        cad += e.contenido
                    }
                    cad += " )\n{\n"
                }else if(ele.tipo == "estructuras"){
                    cad += traducir(ele.contenido);
                }
            }
        }else if(element.tipo == "else"){
            cad += "}\nelse\n{\n";
            for(var ele of element.contenido){
                if(ele.tipo == "estructuras"){
                    cad += traducir(ele.contenido);
                }
            }
        }
    }
    cad += "}\n";
    return cad;
}

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:  return 131; 
break;
case 4:  return 131; 
break;
case 5:  return 131; 
break;
case 6:  return 106;  
break;
case 7:  return 107; 
break;
case 8:  return 108;  
break;
case 9:  return 99;    
break;
case 10:  return 109;    
break;
case 11:  return 20;   
break;
case 12:  return 24; 
break;
case 13:  return 'R_Array'; 
break;
case 14:  return 76;  
break;
case 15:  return 95;   
break;
case 16:  return 133;
break;
case 17:  return 11;
break;
case 18:return 50;
break;
case 19:return 48;
break;
case 20:return 51;
break;
case 21:return 56;
break;
case 22:return 57;
break;
case 23:return 64;
break;
case 24:return 70;
break;
case 25:return 72;
break;
case 26:return 62;
break;
case 27:return 63;
break;
case 28:return 44;
break;
case 29:return 45;
break;
case 30:return 46;
break;
case 31:return 58;
break;
case 32:return 60;
break;
case 33:return 129;
break;
case 34:return 130;
break;
case 35:return 'R_Undefined';
break;
case 36:return 43;
break;
case 37:return 67;
break;
case 38:return 68;
break;
case 39:return 123;
break;
case 40:return 119;
break;
case 41:return 120;
break;
case 42:return 121;
break;
case 43:return 122;
break;
case 44:return 124;
break;
case 45:return 116;
break;
case 46:return 114;
break;
case 47:return 113;
break;
case 48:return 21;
break;
case 49:return 118;
break;
case 50:return 117;
break;
case 51:return 115;
break;
case 52:return 126;
break;
case 53:return 111;
break;
case 54:return 112;
break;
case 55:return 18;
break;
case 56:return 23;
break;
case 57:return 16;
break;
case 58:return 17;
break;
case 59:return 13;
break;
case 60:return 15;
break;
case 61:return 59;
break;
case 62:return 'S_ComillaSimple';
break;
case 63:return 79;
break;
case 64:return 'S_ComillaDoble';
break;
case 65:return 98;
break;
case 66:return 80;
break;
case 67:return 82;
break;
case 68:return 128;
break;
case 69:return 127;
break;
case 70:return 12;
break;
case 71:  return 5; 
break;
case 72:console.error("error lexico: " + yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/,/^(?:[\'][^\\\']*([\\][\\\'ntr][^\\\']*)*[\'])/,/^(?:[\`][^\\\`]*([\\][\\\`ntr][^\\\`]*)*[\`])/,/^(?:number\b)/,/^(?:boolean\b)/,/^(?:string\b)/,/^(?:type\b)/,/^(?:void\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:Array\b)/,/^(?:push\b)/,/^(?:pop\b)/,/^(?:length\b)/,/^(?:function\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:of\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:return\b)/,/^(?:console\b)/,/^(?:log\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:undefined\b)/,/^(?:graficar_ts\b)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*\*)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:>)/,/^(?:!)/,/^(?:&&)/,/^(?:\|\|)/,/^(?::)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:\\')/,/^(?:,)/,/^(?:")/,/^(?:\?)/,/^(?:\[)/,/^(?:\])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[0-9]+\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Traduccion;
exports.Parser = Traduccion.Parser;
exports.parse = function () { return Traduccion.parse.apply(Traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}