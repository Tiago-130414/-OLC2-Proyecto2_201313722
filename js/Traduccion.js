/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[2,3],$V2=[1,8],$V3=[1,37],$V4=[1,39],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,41],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,23],$Vf=[1,26],$Vg=[1,27],$Vh=[1,24],$Vi=[1,38],$Vj=[2,5,10,11,16,40,41,42,43,47,48,55,59,60,61,64,66,67,69,95],$Vk=[2,5,10,11,16,40,41,42,43,47,48,53,54,55,59,60,61,64,66,67,69,95],$Vl=[1,49],$Vm=[1,59],$Vn=[2,5,10,11,16,40,41,42,43,45,47,48,53,54,55,59,60,61,64,66,67,69,95],$Vo=[1,81],$Vp=[1,82],$Vq=[1,79],$Vr=[1,72],$Vs=[1,71],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[2,154],$VA=[1,87],$VB=[1,90],$VC=[14,16,17,39,56,65,66,67,77,80,108,109,110,111,112,113,114,115,116,117,118,119,120,121],$VD=[1,96],$VE=[39,77],$VF=[1,103],$VG=[1,102],$VH=[2,79],$VI=[1,107],$VJ=[1,111],$VK=[1,112],$VL=[1,113],$VM=[1,114],$VN=[14,16,17,39,66,67,77,80,108,109,110,111,112,113,114,115,116,117,118,119,120,121],$VO=[14,16,17,39,56,66,67,77,80,108,109,110,111,112,113,114,115,116,117,118,119,120,121],$VP=[1,117],$VQ=[1,126],$VR=[2,12],$VS=[1,134],$VT=[1,135],$VU=[1,136],$VV=[1,137],$VW=[1,138],$VX=[1,139],$VY=[1,140],$VZ=[1,141],$V_=[1,142],$V$=[1,143],$V01=[1,144],$V11=[1,145],$V21=[1,146],$V31=[1,147],$V41=[14,16,17,39,77,80,108,109,110,111,112,113,114,115,116,117,118,119,120,121],$V51=[14,77],$V61=[14,16,17,39,56,65,66,67,77,78,80,108,109,110,111,112,113,114,115,116,117,118,119,120,121],$V71=[1,167],$V81=[1,166],$V91=[2,99],$Va1=[1,174],$Vb1=[1,182],$Vc1=[1,178],$Vd1=[1,179],$Ve1=[1,180],$Vf1=[1,181],$Vg1=[14,16,39,77],$Vh1=[1,190],$Vi1=[16,53,54],$Vj1=[2,11,16,40,41,42,43,47,48,53,54,55,59,60,61,64,66,67,69,95],$Vk1=[77,80],$Vl1=[1,252],$Vm1=[14,15,16,39,65,77,78],$Vn1=[1,259],$Vo1=[1,258],$Vp1=[16,39,77],$Vq1=[11,12,40,66,67,117,123,124,125,126,127],$Vr1=[14,16,17,39,77,80,108,109],$Vs1=[14,16,17,39,77,80,108,109,110,111,112,113,114,115],$Vt1=[14,16,17,39,77,80,108,109,110,111,112,113,114,115,116,117],$Vu1=[14,16,17,39,77,80,108,109,110,111,112,113,114,115,116,117,118,119],$Vv1=[1,289],$Vw1=[1,298],$Vx1=[14,16,39,65,77,78],$Vy1=[16,54],$Vz1=[1,319];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONT":4,"EOF":5,"LISTA_CONTENIDO":6,"CONTENIDO":7,"FUNCIONES":8,"ESTRUCTURAS_DE_CONTROL":9,"R_Funcion":10,"Identificador":11,"S_ParentesisAbre":12,"PARAM":13,"S_ParentesisCierra":14,"S_LlaveAbre":15,"S_LlaveCierra":16,"S_DosPuntos":17,"TIPOS_DE_DATO":18,"EDD":19,"LISTADO_ESTRUCTURAS":20,"CONT_ESTRUCTURAS_CONTROL":21,"VARIABLES":22,"ASIGNACION":23,"LISTADO_IF":24,"ELSE":25,"SWITCH":26,"IMPRIMIR":27,"WHILE":28,"DO_WHILE":29,"FOR":30,"FOR_OF":31,"FOR_IN":32,"SENTENCIAS_TRANSFERENCIA":33,"LLAMADA_FUNC":34,"TYPES":35,"M_STRING":36,"ATRIBUTOS":37,"MET_STRING":38,"S_PuntoComa":39,"Cadena":40,"R_Break":41,"R_Continue":42,"R_Return":43,"EXPRESION_G":44,"R_Else":45,"IF":46,"R_If":47,"R_Switch":48,"CASE":49,"DEFINIR_DEFAULT":50,"LISTA_CASE":51,"DEFINIR_CASE":52,"R_Case":53,"R_Default":54,"R_Console":55,"S_Punto":56,"R_Log":57,"FUNC":58,"R_While":59,"R_Do":60,"R_For":61,"CONT_FOR":62,"FIN_FOR":63,"R_Let":64,"S_Igual":65,"OP_Incremento":66,"OP_Decremento":67,"CONT_FOR_IN":68,"R_Const":69,"R_In":70,"CONT_FOR_OF":71,"R_Of":72,"LISTA_DE_ASIGNACIONES":73,"COMPLETAR_ASIGNACION":74,"LISTADO_ASIGNACION":75,"CONTENIDO_ASIGNACION":76,"S_Coma":77,"S_CorcheteAbre":78,"CONT_ASIG_ARRAY":79,"S_CorcheteCierra":80,"LISTA_DECLARACION_TYPES":81,"L_CORCHETE":82,"L_C":83,"LISTA_CORCHETE":84,"L_CORCHETE_V":85,"L_C_V":86,"LISTA_AS_MV":87,"LISTA_ASIGN_ARRAY":88,"CONT_ARRAY_ASIGN_VV":89,"LISTADO_VAR":90,"CONT_VAR":91,"PARAMETROS_FUNC":92,"LISTA_PARAMETROS":93,"PARAMETROS":94,"T_Type":95,"LISTA_TYPES":96,"FIN_TYPES":97,"SEPARADOR":98,"CONTENIDO_TYPES":99,"SEPARADOR_DECLARACION_TYPES":100,"CONTENIDO_DECLARACION_TYPES":101,"T_Number":102,"T_Boolean":103,"T_String":104,"T_Void":105,"TIPAR_FUNCION":106,"CONT_ATRIBUTOS":107,"LOG_Concatenar":108,"LOG_OR":109,"REL_IgualIgual":110,"REL_MayorIgualQue":111,"REL_MayorQue":112,"REL_MenorIgualQue":113,"REL_MenorQue":114,"REL_Distinto":115,"OP_Mas":116,"OP_Menos":117,"OP_Multiplicacion":118,"OP_Division":119,"OP_Exponenciacion":120,"OP_Modulo":121,"CONTENIDO_EXPRESION":122,"LOG_Not":123,"Entero":124,"Decimal":125,"R_True":126,"R_False":127,"OPCIONAL":128,"R_Length":129,"L_MET_STRING":130,"CONT_MET_STRING":131,"R_CharAt":132,"R_Tlower":133,"R_Touppper":134,"R_Concat":135,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"R_Funcion",11:"Identificador",12:"S_ParentesisAbre",14:"S_ParentesisCierra",15:"S_LlaveAbre",16:"S_LlaveCierra",17:"S_DosPuntos",39:"S_PuntoComa",40:"Cadena",41:"R_Break",42:"R_Continue",43:"R_Return",45:"R_Else",47:"R_If",48:"R_Switch",53:"R_Case",54:"R_Default",55:"R_Console",56:"S_Punto",57:"R_Log",59:"R_While",60:"R_Do",61:"R_For",64:"R_Let",65:"S_Igual",66:"OP_Incremento",67:"OP_Decremento",69:"R_Const",70:"R_In",72:"R_Of",77:"S_Coma",78:"S_CorcheteAbre",80:"S_CorcheteCierra",95:"T_Type",102:"T_Number",103:"T_Boolean",104:"T_String",105:"T_Void",108:"LOG_Concatenar",109:"LOG_OR",110:"REL_IgualIgual",111:"REL_MayorIgualQue",112:"REL_MayorQue",113:"REL_MenorIgualQue",114:"REL_MenorQue",115:"REL_Distinto",116:"OP_Mas",117:"OP_Menos",118:"OP_Multiplicacion",119:"OP_Division",120:"OP_Exponenciacion",121:"OP_Modulo",123:"LOG_Not",124:"Entero",125:"Decimal",126:"R_True",127:"R_False",129:"R_Length",132:"R_CharAt",133:"R_Tlower",134:"R_Touppper",135:"R_Concat"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,1],[7,1],[7,1],[7,1],[8,8],[8,10],[19,1],[19,0],[20,2],[20,1],[21,1],[21,1],[9,1],[9,1],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[36,3],[36,3],[33,2],[33,2],[33,2],[33,3],[24,3],[24,1],[46,7],[25,4],[25,0],[26,8],[49,1],[49,0],[51,2],[51,1],[52,4],[50,3],[50,0],[27,7],[58,1],[58,0],[28,7],[29,9],[30,10],[62,7],[62,5],[62,2],[62,4],[63,3],[63,2],[63,2],[63,2],[63,2],[32,7],[68,4],[68,4],[68,3],[31,7],[71,4],[71,4],[71,3],[23,4],[23,4],[23,4],[23,4],[23,4],[74,1],[74,0],[75,2],[75,1],[76,4],[76,3],[76,3],[76,3],[76,3],[73,1],[73,3],[73,3],[82,1],[83,2],[83,1],[84,2],[85,1],[86,2],[86,1],[87,3],[79,1],[79,0],[88,3],[88,1],[89,1],[89,3],[89,3],[22,3],[22,3],[90,3],[90,1],[91,1],[91,3],[91,5],[91,3],[91,5],[91,4],[91,6],[91,7],[91,5],[34,5],[92,3],[92,1],[92,0],[13,1],[13,0],[93,3],[93,1],[94,3],[94,5],[94,4],[94,6],[35,6],[96,3],[96,1],[99,3],[99,4],[98,1],[98,1],[97,2],[97,1],[81,3],[81,1],[101,3],[100,1],[100,1],[18,1],[18,1],[18,1],[18,1],[18,1],[106,2],[106,0],[37,3],[37,1],[107,2],[107,1],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,1],[122,1],[122,1],[122,1],[122,1],[122,1],[122,2],[122,2],[122,3],[122,4],[122,4],[122,5],[122,3],[122,4],[122,1],[122,3],[128,3],[128,1],[38,1],[130,2],[130,1],[131,5],[131,4],[131,4],[131,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
console.log("Analizado");
break;
case 4:
this.$ = $$[$0-1] + $$[$0]
break;
case 5:
this.$=$$[$0]
break;
case 8: case 16:
this.$ ='';console.log({ Tipo_Error  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,8:5,9:6,10:$V2,11:$V3,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi,107:40},{1:[3]},{5:[1,42]},o([5,16],[2,2],{8:5,9:6,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,46:28,107:40,7:43,2:$V0,10:$V2,11:$V3,40:$V4,41:$V5,42:$V6,43:$V7,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi}),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),{11:[1,44]},o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,41],{25:45,45:[1,46]}),o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,[2,22]),o($Vk,[2,23]),o($Vk,[2,24]),o($Vk,[2,25]),o($Vk,[2,26]),o($Vk,[2,27]),o($Vk,[2,28]),o($Vk,[2,29]),o($Vk,[2,30]),{11:$Vl,90:47,91:48},{11:$Vl,90:50,91:48},{38:54,56:[1,55],65:[1,51],66:[1,52],67:[1,53],130:56,131:57},{11:$Vm,37:58,107:40},{11:$Vm,37:60,107:40},o($Vn,[2,38]),{12:[1,61]},{56:[1,62]},{12:[1,63]},{15:[1,64]},{12:[1,65]},{39:[1,66]},{39:[1,67]},{11:$Vo,12:$Vp,37:80,39:[1,68],40:$Vq,44:69,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},o([56,65,66,67],$Vz,{85:84,86:85,87:86,12:[1,83],78:$VA}),{11:[1,88]},{38:89,56:$VB,130:56,131:57},o($VC,[2,152]),{12:[1,91]},{1:[2,1]},o($Vj,[2,4]),{12:[1,92]},o($Vk,[2,19]),{15:[1,94],46:93,47:$V8},{39:[1,95],77:$VD},o($VE,[2,108]),o($VE,[2,109],{17:[1,97],65:[1,98]}),{39:[1,99],77:$VD},{11:$Vo,12:$Vp,15:$VF,37:80,40:$Vq,44:101,66:$Vr,67:$Vs,73:100,78:$VG,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{39:$VH,74:104,75:105,76:106,77:$VI},{39:$VH,74:108,75:105,76:106,77:$VI},{39:[1,109]},{11:$Vm,107:110,132:$VJ,133:$VK,134:$VL,135:$VM},o($VN,[2,193],{131:115,56:$VB}),o($VO,[2,195]),{39:$VH,56:$VP,74:116,75:105,76:106,77:$VI},o($VC,$Vz,{85:84,86:85,87:86,78:$VA}),{39:$VH,56:$VP,74:118,75:105,76:106,77:$VI},{11:$Vo,12:$Vp,37:80,40:$Vq,44:119,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{57:[1,120]},{11:$Vo,12:$Vp,37:80,40:$Vq,44:121,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{2:$VQ,9:125,11:$V3,16:$VR,19:122,20:123,21:124,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi,107:40},{11:[1,131],62:127,64:[1,130],68:129,69:[1,132],71:128},o($Vk,[2,33]),o($Vk,[2,34]),o($Vk,[2,35]),{39:[1,133],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},o($V41,[2,175],{66:[1,149],67:[1,148]}),{11:$Vo,12:$Vp,37:80,40:$Vq,107:40,122:150,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,107:40,122:151,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,107:40,122:152,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,107:40,122:153,124:$Vv,125:$Vw,126:$Vx,127:$Vy},o($VN,[2,176]),o($VN,[2,177]),o($VN,[2,178]),o($VN,[2,179]),o($VN,[2,180],{130:56,131:57,38:154,56:$VB}),o($VN,[2,189],{130:56,131:57,38:155,56:[1,156]}),o($VO,$Vz,{85:84,86:85,87:86,12:[1,157],78:$VA}),{11:$Vo,12:$Vp,37:80,40:$Vq,44:158,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},o($V51,[2,121],{107:40,122:70,37:80,92:159,44:160,11:$Vo,12:$Vp,40:$Vq,66:$Vr,67:$Vs,117:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy}),o($VC,[2,153]),o($VC,[2,94],{87:161,78:$VA}),o($V61,[2,96]),{11:$Vo,12:$Vp,15:$V71,37:80,40:$Vq,44:165,66:$Vr,67:$Vs,78:$V81,79:162,80:$V91,88:163,89:164,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{65:[1,168]},{39:[1,169]},{132:$VJ,133:$VK,134:$VL,135:$VM},{11:$Vo,12:$Vp,37:80,40:$Vq,44:170,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Va1,13:171,14:[2,123],93:172,94:173},o($Vn,[2,37]),{2:$VQ,9:125,11:$V3,16:$VR,19:175,20:123,21:124,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi,107:40},o($Vk,[2,105]),{11:$Vl,91:176},{11:$Vb1,18:177,102:$Vc1,103:$Vd1,104:$Ve1,105:$Vf1},{11:$Vo,12:$Vp,15:[1,185],37:80,40:$Vq,44:183,66:$Vr,67:$Vs,78:[1,184],107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},o($Vk,[2,106]),{39:[1,186]},o($Vg1,[2,87],{108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),{11:$Vo,12:$Vp,15:$V71,37:80,40:$Vq,44:165,66:$Vr,67:$Vs,78:$V81,79:187,80:$V91,88:163,89:164,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vh1,81:188,101:189},{39:[1,191]},{39:[2,78],76:192,77:$VI},o($VE,[2,81]),{11:[1,193],66:[1,194],67:[1,195]},{39:[1,196]},o($Vk,[2,31]),o($VC,[2,151]),{12:[1,197]},{12:[1,198]},{12:[1,199]},{12:[1,200]},o($VO,[2,194]),{39:[1,201]},{11:$Vm,107:110},{39:[1,202]},{14:[1,203],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},{12:[1,204]},{14:[1,205],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},{16:[1,206]},o($Vi1,[2,11],{22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,46:28,107:40,9:125,21:207,2:$VQ,11:$V3,40:$V4,41:$V5,42:$V6,43:$V7,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi}),o($Vj1,[2,14]),o($Vj1,[2,15]),o($Vj1,[2,16]),{11:$Vo,12:$Vp,37:80,40:$Vq,44:208,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{14:[1,209]},{14:[1,210]},{11:[1,211]},{39:[1,212],65:[1,213],70:[1,215],72:[1,214]},{11:[1,216]},o($Vk,[2,36]),{11:$Vo,12:$Vp,37:80,40:$Vq,44:217,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:218,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:219,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:220,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:221,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:222,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:223,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:224,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:225,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:226,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:227,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:228,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:229,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:230,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},o($V41,[2,169]),o($V41,[2,170]),o($V41,[2,171]),o($V41,[2,172]),o($V41,[2,173]),o($V41,[2,174]),o($VN,[2,181]),o($VN,[2,182]),{11:$Vm,107:110,129:[1,231],132:$VJ,133:$VK,134:$VL,135:$VM},{11:$Vo,12:$Vp,14:[1,232],37:80,40:$Vq,44:234,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:233},{14:[1,235],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},{14:[1,236],77:[1,237]},o($V51,[2,120],{108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($V61,[2,95]),{80:[1,238]},{77:[1,239],80:[2,98]},o($Vk1,[2,101]),o($Vk1,[2,102],{108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),{11:$Vo,12:$Vp,15:$V71,37:80,40:$Vq,44:165,66:$Vr,67:$Vs,78:$V81,79:240,80:$V91,88:163,89:164,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vh1,81:241,101:189},{15:[1,242]},o($Vk,[2,32]),{14:[1,243],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},{14:[1,244]},{14:[2,122],77:[1,245]},o($V51,[2,125]),{17:[1,246]},{16:[1,247]},o($VE,[2,107]),o($VE,[2,110],{82:249,83:250,84:251,65:[1,248],78:$Vl1}),o($Vm1,[2,144]),o($Vm1,[2,145]),o($Vm1,[2,146]),o($Vm1,[2,147]),o($Vm1,[2,148]),o($VE,[2,112],{108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),{11:$Vo,12:$Vp,15:$V71,37:80,40:$Vq,44:165,66:$Vr,67:$Vs,78:$V81,79:253,80:$V91,88:163,89:164,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vh1,81:254,101:189},o($Vk,[2,73]),{80:[1,255]},{16:[1,256],39:$Vn1,77:$Vo1,100:257},o($Vp1,[2,140]),{17:[1,260]},o($Vk,[2,74]),o($VE,[2,80]),{65:[1,261],66:[1,262],67:[1,263]},{11:[1,264]},{11:[1,265]},o($Vk,[2,76]),{11:$Vo,12:$Vp,37:80,40:$Vq,44:266,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{14:[1,267]},{14:[1,268]},{11:$Vo,12:$Vp,37:80,40:$Vq,44:234,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:269},o($Vk,[2,75]),o($Vk,[2,77]),{15:[1,270]},{11:$Vo,12:$Vp,14:[2,52],37:80,40:$Vq,44:272,58:271,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{15:[1,273]},{59:[1,274]},o($Vj1,[2,13]),{39:[1,275],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},{15:[1,276]},{15:[1,277]},{17:[1,278],65:[1,279],70:[1,281],72:[1,280]},o($Vq1,[2,58]),{11:$Vo,12:$Vp,37:80,40:$Vq,44:282,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:[1,283]},{11:[1,284]},{70:[1,286],72:[1,285]},o($Vr1,[2,155],{110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($Vr1,[2,156],{110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($Vs1,[2,157],{116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($Vs1,[2,158],{116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($Vs1,[2,159],{116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($Vs1,[2,160],{116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($Vs1,[2,161],{116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($Vs1,[2,162],{116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($Vt1,[2,163],{118:$V01,119:$V11,120:$V21,121:$V31}),o($Vt1,[2,164],{118:$V01,119:$V11,120:$V21,121:$V31}),o($Vu1,[2,165],{120:$V21,121:$V31}),o($Vu1,[2,166],{120:$V21,121:$V31}),o($V41,[2,167]),o($V41,[2,168]),o($VN,[2,190]),o($VN,[2,183],{130:56,131:57,38:287,56:$VB}),{14:[1,288],77:$Vv1},o($V51,[2,192],{108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($VN,[2,187],{130:56,131:57,38:290,56:$VB}),{39:[1,291]},{11:$Vo,12:$Vp,37:80,40:$Vq,44:292,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},o($V61,[2,97]),{11:$Vo,12:$Vp,15:$V71,37:80,40:$Vq,44:165,66:$Vr,67:$Vs,78:$V81,89:293,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{80:[1,294]},{16:[1,295],39:$Vn1,77:$Vo1,100:257},{11:$Vw1,96:296,99:297},{15:[1,299]},{15:[1,300],17:[1,301]},{11:$Va1,94:302},{11:$Vb1,18:303,102:$Vc1,103:$Vd1,104:$Ve1,105:$Vf1},o($Vk,[2,40]),{11:$Vo,12:$Vp,15:[1,305],37:80,40:$Vq,44:304,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},o($VE,[2,114],{65:[1,306]}),o([14,16,39,65,77],[2,90],{84:307,78:$Vl1}),o($Vx1,[2,92]),{80:[1,308]},{80:[1,309]},{16:[1,310],39:$Vn1,77:$Vo1,100:257},o($Vg1,[2,88]),o($Vg1,[2,89]),{11:$Vh1,101:311},{11:[2,142]},{11:[2,143]},{11:$Vo,12:$Vp,15:$VF,37:80,40:$Vq,44:101,66:$Vr,67:$Vs,73:312,78:$VG,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:$Vo,12:$Vp,37:80,40:$Vq,44:313,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},o($VE,[2,83]),o($VE,[2,85]),o($VE,[2,84]),o($VE,[2,86]),{14:[1,314],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},o($VO,[2,197]),o($VO,[2,198]),{14:[1,315],77:$Vv1},o($Vy1,[2,44],{49:316,51:317,52:318,53:$Vz1}),{14:[1,320]},{14:[2,51],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},{2:$VQ,9:125,11:$V3,16:$VR,19:321,20:123,21:124,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi,107:40},{12:[1,322]},{11:[1,324],63:323,66:[1,325],67:[1,326]},{2:$VQ,9:125,11:$V3,16:$VR,19:327,20:123,21:124,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi,107:40},{2:$VQ,9:125,11:$V3,16:$VR,19:328,20:123,21:124,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi,107:40},{11:$Vb1,18:329,102:$Vc1,103:$Vd1,104:$Ve1,105:$Vf1},{11:$Vo,12:$Vp,37:80,40:$Vq,44:330,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{11:[1,331]},{11:[1,332]},{39:[1,333],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},{14:[2,72]},{14:[2,68]},{11:[1,334]},{11:[1,335]},o($VN,[2,184]),o($VN,[2,185],{130:56,131:57,38:336,56:$VB}),{11:$Vo,12:$Vp,37:80,40:$Vq,44:337,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},o($VN,[2,188]),o($Vk,[2,118]),o($V51,[2,119],{108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($Vk1,[2,100]),o($Vk1,[2,103]),o($Vk1,[2,104]),{16:[1,340],39:[1,342],77:[1,341],97:338,98:339},o($Vp1,[2,132]),{17:[1,343]},{2:$VQ,9:125,11:$V3,16:$VR,19:344,20:123,21:124,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi,107:40},{2:$V0,4:345,6:3,7:4,8:5,9:6,10:$V2,11:$V3,16:$V1,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi,107:40},{11:$Vb1,18:346,102:$Vc1,103:$Vd1,104:$Ve1,105:$Vf1},o($V51,[2,124]),o($V51,[2,126],{83:250,84:251,82:348,65:[1,347],78:$Vl1}),o($VE,[2,111],{108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),{11:$Vh1,81:349,101:189},{78:$VA,85:350,86:85,87:86},o($Vx1,[2,91]),o($Vx1,[2,93]),o($VE,[2,113]),o($VE,[2,117]),o($Vp1,[2,139]),o($Vp1,[2,141]),o($VE,[2,82],{108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($VO,[2,196]),o($VO,[2,199]),{16:[2,49],50:351,54:[1,352]},o($Vy1,[2,43],{52:353,53:$Vz1}),o($Vi1,[2,46]),{11:$Vo,12:$Vp,37:80,40:$Vq,44:354,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{39:[1,355]},{16:[1,356]},{11:$Vo,12:$Vp,37:80,40:$Vq,44:357,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{14:[1,358]},{65:[1,359],66:[1,360],67:[1,361]},{11:[1,362]},{11:[1,363]},{16:[1,364]},{16:[1,365]},{65:[1,366]},{39:[1,367],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},{14:[2,71]},{14:[2,67]},o($Vq1,[2,59]),{14:[2,70]},{14:[2,66]},o($VN,[2,186]),o($V51,[2,191],{108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31}),o($Vk,[2,130]),{11:$Vw1,99:368},o($Vk,[2,138],{39:[1,369]}),{11:[2,135]},{11:[2,136]},{11:$Vb1,18:370,102:$Vc1,103:$Vd1,104:$Ve1,105:$Vf1},{16:[1,371]},{16:[1,372]},{15:[1,373]},{11:$Vo,12:$Vp,15:$VF,37:80,40:$Vq,44:101,66:$Vr,67:$Vs,73:374,78:$VG,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},o($V51,[2,128],{65:[1,375]}),{16:[1,376],39:$Vn1,77:$Vo1,100:257},o($VE,[2,115]),{16:[1,377]},{17:[1,378]},o($Vi1,[2,45]),{17:[1,379],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},o($Vk,[2,50]),o($Vk,[2,53]),{14:[1,380],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},{15:[1,381]},{11:$Vo,12:$Vp,37:80,40:$Vq,44:382,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},{14:[2,61]},{14:[2,63]},{14:[2,62]},{14:[2,64]},o($Vk,[2,69]),o($Vk,[2,65]),{11:$Vo,12:$Vp,37:80,40:$Vq,44:383,66:$Vr,67:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},o($Vq1,[2,57]),o($Vp1,[2,131]),o($Vk,[2,137]),o($Vp1,[2,133],{83:250,84:251,82:384,78:$Vl1}),o($Vn,[2,39]),o($Vj,[2,9]),{2:$V0,4:385,6:3,7:4,8:5,9:6,10:$V2,11:$V3,16:$V1,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi,107:40},o($V51,[2,127]),{11:$Vo,12:$Vp,15:$VF,37:80,40:$Vq,44:101,66:$Vr,67:$Vs,73:386,78:$VG,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy},o($VE,[2,116]),o($Vk,[2,42]),{2:$VQ,9:125,11:$V3,16:$VR,19:387,20:123,21:124,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi,107:40},o($Vi1,$VR,{22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,46:28,107:40,20:123,21:124,9:125,19:388,2:$VQ,11:$V3,40:$V4,41:$V5,42:$V6,43:$V7,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi}),{39:[1,389]},{2:$VQ,9:125,11:$V3,16:$VR,19:390,20:123,21:124,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,59:$Vb,60:$Vc,61:$Vd,64:$Ve,66:$Vf,67:$Vg,69:$Vh,95:$Vi,107:40},{14:[2,60],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},{39:[1,391],108:$VS,109:$VT,110:$VU,111:$VV,112:$VW,113:$VX,114:$VY,115:$VZ,116:$V_,117:$V$,118:$V01,119:$V11,120:$V21,121:$V31},o($Vp1,[2,134]),{16:[1,392]},o($V51,[2,129]),{16:[2,48]},o($Vi1,[2,47]),o($Vk,[2,54]),{16:[1,393]},o($Vq1,[2,56]),o($Vj,[2,10]),o($Vk,[2,55])],
defaultActions: {42:[2,1],258:[2,142],259:[2,143],283:[2,72],284:[2,68],331:[2,71],332:[2,67],334:[2,70],335:[2,66],341:[2,135],342:[2,136],360:[2,61],361:[2,63],362:[2,62],363:[2,64],387:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:  return 40; 
break;
case 4:  return 40; 
break;
case 5:  return 102;  
break;
case 6:  return 103; 
break;
case 7:  return 104;  
break;
case 8:  return 95;    
break;
case 9:  return 105;    
break;
case 10:  return 64;   
break;
case 11:  return 69; 
break;
case 12:  return 'R_Array'; 
break;
case 13:  return 'R_New'; 
break;
case 14:  return 132; 
break;
case 15:  return 133;
break;
case 16:  return 134;
break;
case 17:  return 135; 
break;
case 18:  return 129;
break;
case 19:  return 10;
break;
case 20:return 47;
break;
case 21:return 45;
break;
case 22:return 48;
break;
case 23:return 53;
break;
case 24:return 54;
break;
case 25:return 61;
break;
case 26:return 70;
break;
case 27:return 72;
break;
case 28:return 59;
break;
case 29:return 60;
break;
case 30:return 41;
break;
case 31:return 42;
break;
case 32:return 43;
break;
case 33:return 55;
break;
case 34:return 57;
break;
case 35:return 126;
break;
case 36:return 127;
break;
case 37:return 'R_Undefined';
break;
case 38:return 'R_Graficar';
break;
case 39:return 66;
break;
case 40:return 67;
break;
case 41:return 120;
break;
case 42:return 116;
break;
case 43:return 117;
break;
case 44:return 118;
break;
case 45:return 119;
break;
case 46:return 121;
break;
case 47:return 113;
break;
case 48:return 111;
break;
case 49:return 110;
break;
case 50:return 65;
break;
case 51:return 115;
break;
case 52:return 114;
break;
case 53:return 112;
break;
case 54:return 123;
break;
case 55:return 108;
break;
case 56:return 109;
break;
case 57:return 17;
break;
case 58:return 39;
break;
case 59:return 15;
break;
case 60:return 16;
break;
case 61:return 12;
break;
case 62:return 14;
break;
case 63:return 56;
break;
case 64:return 'S_ComillaSimple';
break;
case 65:return 77;
break;
case 66:return 'S_ComillaDoble';
break;
case 67:return 'S_Interrogacion';
break;
case 68:return 78;
break;
case 69:return 80;
break;
case 70:return 125;
break;
case 71:return 124;
break;
case 72:return 11;
break;
case 73:  return 5; 
break;
case 74:console.error("error lexico: " + yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[\"][^\\\"]*([\\][\\\"ntr][^\\\"]*)*[\"])/i,/^(?:[\'][^\\\']*([\\][\\\'ntr][^\\\']*)*[\'])/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:type\b)/i,/^(?:void\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:Array\b)/i,/^(?:new\b)/i,/^(?:CharAt\b)/i,/^(?:ToLowerCase\b)/i,/^(?:ToUpperCase\b)/i,/^(?:Concat\b)/i,/^(?:length\b)/i,/^(?:function\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:undefined\b)/i,/^(?:graficar_ts\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:\\')/i,/^(?:,)/i,/^(?:")/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Traduccion;
exports.Parser = Traduccion.Parser;
exports.parse = function () { return Traduccion.parse.apply(Traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}