/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Traduccion = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[2,3],$V2=[1,8],$V3=[1,37],$V4=[1,39],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,41],$V9=[1,29],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,23],$Vf=[1,26],$Vg=[1,27],$Vh=[1,24],$Vi=[1,38],$Vj=[2,5,10,11,16,40,41,42,43,47,48,55,60,61,62,65,67,68,70,95],$Vk=[2,5,10,11,16,40,41,42,43,47,48,53,54,55,60,61,62,65,67,68,70,95],$Vl=[1,49],$Vm=[1,59],$Vn=[2,5,10,11,16,40,41,42,43,45,47,48,53,54,55,60,61,62,65,67,68,70,95],$Vo=[1,82],$Vp=[1,83],$Vq=[1,79],$Vr=[1,72],$Vs=[1,71],$Vt=[1,73],$Vu=[1,74],$Vv=[1,75],$Vw=[1,76],$Vx=[1,77],$Vy=[1,78],$Vz=[1,80],$VA=[2,151],$VB=[1,88],$VC=[1,91],$VD=[14,16,17,39,56,66,67,68,78,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121],$VE=[1,97],$VF=[39,78],$VG=[1,104],$VH=[1,103],$VI=[2,78],$VJ=[1,108],$VK=[1,112],$VL=[1,113],$VM=[1,114],$VN=[1,115],$VO=[14,16,17,39,67,68,78,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121],$VP=[14,16,17,39,56,67,68,78,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121],$VQ=[1,118],$VR=[1,127],$VS=[2,12],$VT=[1,135],$VU=[1,136],$VV=[1,137],$VW=[1,138],$VX=[1,139],$VY=[1,140],$VZ=[1,141],$V_=[1,142],$V$=[1,143],$V01=[1,144],$V11=[1,145],$V21=[1,146],$V31=[1,147],$V41=[1,148],$V51=[14,16,17,39,78,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121],$V61=[14,78],$V71=[2,118],$V81=[14,16,17,39,56,66,67,68,78,79,81,108,109,110,111,112,113,114,115,116,117,118,119,120,121],$V91=[1,168],$Va1=[1,167],$Vb1=[2,98],$Vc1=[1,175],$Vd1=[1,183],$Ve1=[1,179],$Vf1=[1,180],$Vg1=[1,181],$Vh1=[1,182],$Vi1=[14,16,39,78],$Vj1=[1,190],$Vk1=[16,53,54],$Vl1=[2,11,16,40,41,42,43,47,48,53,54,55,60,61,62,65,67,68,70,95],$Vm1=[1,237],$Vn1=[78,81],$Vo1=[1,252],$Vp1=[14,15,16,39,66,78,79],$Vq1=[1,260],$Vr1=[1,259],$Vs1=[16,39,78],$Vt1=[11,12,40,67,68,117,123,124,125,126,127,128],$Vu1=[14,16,17,39,78,81,108,109],$Vv1=[14,16,17,39,78,81,108,109,110,111,112,113,114,115],$Vw1=[14,16,17,39,78,81,108,109,110,111,112,113,114,115,116,117],$Vx1=[14,16,17,39,78,81,108,109,110,111,112,113,114,115,116,117,118,119],$Vy1=[1,288],$Vz1=[1,297],$VA1=[14,16,39,66,78,79],$VB1=[16,54],$VC1=[1,318];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONT":4,"EOF":5,"LISTA_CONTENIDO":6,"CONTENIDO":7,"FUNCIONES":8,"ESTRUCTURAS_DE_CONTROL":9,"R_Funcion":10,"Identificador":11,"S_ParentesisAbre":12,"PARAM":13,"S_ParentesisCierra":14,"S_LlaveAbre":15,"S_LlaveCierra":16,"S_DosPuntos":17,"TIPOS_DE_DATO":18,"EDD":19,"LISTADO_ESTRUCTURAS":20,"CONT_ESTRUCTURAS_CONTROL":21,"VARIABLES":22,"ASIGNACION":23,"LISTADO_IF":24,"ELSE":25,"SWITCH":26,"IMPRIMIR":27,"WHILE":28,"DO_WHILE":29,"FOR":30,"FOR_OF":31,"FOR_IN":32,"SENTENCIAS_TRANSFERENCIA":33,"LLAMADA_FUNC":34,"TYPES":35,"M_STRING":36,"ATRIBUTOS":37,"MET_STRING":38,"S_PuntoComa":39,"Cadena":40,"R_Break":41,"R_Continue":42,"R_Return":43,"EXPRESION_G":44,"R_Else":45,"IF":46,"R_If":47,"R_Switch":48,"CASE":49,"DEFINIR_DEFAULT":50,"LISTA_CASE":51,"DEFINIR_CASE":52,"R_Case":53,"R_Default":54,"R_Console":55,"S_Punto":56,"R_Log":57,"PARAMETROS_FUNC":58,"FUNC":59,"R_While":60,"R_Do":61,"R_For":62,"CONT_FOR":63,"FIN_FOR":64,"R_Let":65,"S_Igual":66,"OP_Incremento":67,"OP_Decremento":68,"CONT_FOR_IN":69,"R_Const":70,"R_In":71,"CONT_FOR_OF":72,"R_Of":73,"LISTA_DE_ASIGNACIONES":74,"COMPLETAR_ASIGNACION":75,"LISTADO_ASIGNACION":76,"CONTENIDO_ASIGNACION":77,"S_Coma":78,"S_CorcheteAbre":79,"CONT_ASIG_ARRAY":80,"S_CorcheteCierra":81,"LISTA_DECLARACION_TYPES":82,"L_CORCHETE":83,"L_C":84,"LISTA_CORCHETE":85,"L_CORCHETE_V":86,"L_C_V":87,"LISTA_AS_MV":88,"LISTA_ASIGN_ARRAY":89,"CONT_ARRAY_ASIGN_VV":90,"LISTADO_VAR":91,"CONT_VAR":92,"LISTA_PARAMETROS":93,"PARAMETROS":94,"T_Type":95,"LISTA_TYPES":96,"FIN_TYPES":97,"SEPARADOR":98,"CONTENIDO_TYPES":99,"SEPARADOR_DECLARACION_TYPES":100,"CONTENIDO_DECLARACION_TYPES":101,"T_Number":102,"T_Boolean":103,"T_String":104,"T_Void":105,"TIPAR_FUNCION":106,"CONT_ATRIBUTOS":107,"LOG_Concatenar":108,"LOG_OR":109,"REL_IgualIgual":110,"REL_MayorIgualQue":111,"REL_MayorQue":112,"REL_MenorIgualQue":113,"REL_MenorQue":114,"REL_Distinto":115,"OP_Mas":116,"OP_Menos":117,"OP_Multiplicacion":118,"OP_Division":119,"OP_Exponenciacion":120,"OP_Modulo":121,"CONTENIDO_EXPRESION":122,"LOG_Not":123,"Entero":124,"Decimal":125,"R_True":126,"R_False":127,"R_Null":128,"OPCIONAL":129,"R_Length":130,"L_MET_STRING":131,"CONT_MET_STRING":132,"R_CharAt":133,"R_Tlower":134,"R_Touppper":135,"R_Concat":136,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"R_Funcion",11:"Identificador",12:"S_ParentesisAbre",14:"S_ParentesisCierra",15:"S_LlaveAbre",16:"S_LlaveCierra",17:"S_DosPuntos",39:"S_PuntoComa",40:"Cadena",41:"R_Break",42:"R_Continue",43:"R_Return",45:"R_Else",47:"R_If",48:"R_Switch",53:"R_Case",54:"R_Default",55:"R_Console",56:"S_Punto",57:"R_Log",60:"R_While",61:"R_Do",62:"R_For",65:"R_Let",66:"S_Igual",67:"OP_Incremento",68:"OP_Decremento",70:"R_Const",71:"R_In",73:"R_Of",78:"S_Coma",79:"S_CorcheteAbre",81:"S_CorcheteCierra",95:"T_Type",102:"T_Number",103:"T_Boolean",104:"T_String",105:"T_Void",108:"LOG_Concatenar",109:"LOG_OR",110:"REL_IgualIgual",111:"REL_MayorIgualQue",112:"REL_MayorQue",113:"REL_MenorIgualQue",114:"REL_MenorQue",115:"REL_Distinto",116:"OP_Mas",117:"OP_Menos",118:"OP_Multiplicacion",119:"OP_Division",120:"OP_Exponenciacion",121:"OP_Modulo",123:"LOG_Not",124:"Entero",125:"Decimal",126:"R_True",127:"R_False",128:"R_Null",130:"R_Length",133:"R_CharAt",134:"R_Tlower",135:"R_Touppper",136:"R_Concat"},
productions_: [0,[3,2],[4,1],[4,0],[6,2],[6,1],[7,1],[7,1],[7,1],[8,8],[8,10],[19,1],[19,0],[20,2],[20,1],[21,1],[21,1],[9,1],[9,1],[9,2],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[9,1],[36,3],[36,3],[33,2],[33,2],[33,2],[33,3],[24,3],[24,1],[46,7],[25,4],[25,0],[26,8],[49,1],[49,0],[51,2],[51,1],[52,4],[50,3],[50,0],[27,7],[59,1],[59,0],[28,7],[29,9],[30,10],[63,7],[63,2],[63,4],[64,3],[64,2],[64,2],[64,2],[64,2],[32,7],[69,4],[69,4],[69,3],[31,7],[72,4],[72,4],[72,3],[23,5],[23,4],[23,4],[23,4],[23,4],[75,1],[75,0],[76,2],[76,1],[77,4],[77,3],[77,3],[77,3],[77,3],[74,1],[74,3],[74,3],[83,1],[84,2],[84,1],[85,2],[86,1],[87,2],[87,1],[88,3],[80,1],[80,0],[89,3],[89,1],[90,1],[90,3],[90,3],[22,3],[22,3],[91,3],[91,1],[92,3],[92,5],[92,5],[92,4],[92,6],[92,7],[92,5],[34,5],[58,3],[58,1],[58,0],[13,1],[13,0],[93,3],[93,1],[94,3],[94,5],[94,4],[94,6],[35,6],[96,3],[96,1],[99,3],[99,4],[98,1],[98,1],[97,2],[97,1],[82,3],[82,1],[101,3],[100,1],[100,1],[18,1],[18,1],[18,1],[18,1],[18,1],[106,2],[106,0],[37,3],[37,1],[107,2],[107,1],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,2],[44,2],[44,2],[44,2],[44,2],[44,2],[44,1],[122,1],[122,1],[122,1],[122,1],[122,1],[122,1],[122,2],[122,2],[122,3],[122,4],[122,4],[122,5],[122,3],[122,4],[122,1],[122,3],[129,3],[129,1],[38,1],[131,2],[131,1],[132,5],[132,4],[132,4],[132,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
var tErr = tablaErrores;limpiarErrores();return {jsonInt : $$[$0-1] , err : tErr};
break;
case 3: case 41: case 44: case 49: case 52: case 78: case 118:
this.$ = [];
break;
case 4: case 13: case 79:
$$[$0-1].push($$[$0]);this.$ = $$[$0-1];
break;
case 5:
this.$=[$$[$0]];
break;
case 8: case 16:
this.$ ='';tablaErrores.push({ tipo  : ' Error_Sintactico ', Error  : yytext , Fila  : this._$.first_line , Columna  :  this._$.first_column });
break;
case 12:
this.$= [];
break;
case 14: case 80: case 107: case 137: case 149:
this.$ = [$$[$0]];
break;
case 19:
var vec = $$[$0-1]; vec = vec.concat($$[$0]);this.$ = {tipo : "LISTADO_IF" , contenido : vec};
break;
case 33:
this.$ = {tipo : "BREAK" , fila: this._$.first_line, columna: this._$.first_column};
break;
case 34:
this.$ = {tipo : "CONTINUE" , fila: this._$.first_line, columna: this._$.first_column};
break;
case 37:
var elsif = $$[$0];elsif.tipo = "ELSEIF";$$[$0-2].push(elsif);this.$ = $$[$0-2];
break;
case 38:
var json =[]; json.push($$[$0]); this.$ = json;
break;
case 39:
var exp;if(Array.isArray($$[$0-4])){exp = $$[$0-4];}else{exp = [$$[$0-4]];};this.$ = {tipo : "IF" , expresion : exp , instrucciones : $$[$0-1] , fila: this._$.first_line, columna: this._$.first_column};
break;
case 40:
this.$ = { tipo : "ELSE" , instrucciones : $$[$0-1] , fila: this._$.first_line, columna: this._$.first_column};
break;
case 42:
var vec = [];vec = vec.concat($$[$0-2]);vec = vec.concat($$[$0-1]) ; var exp;if(Array.isArray($$[$0-5])){exp = $$[$0-5];}else{exp = [$$[$0-5]];}; this.$ = {tipo : "SWITCH" , expresion : exp , instrucciones : vec , fila: this._$.first_line, columna: this._$.first_column};
break;
case 45:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 46:
var vec = []; vec.push($$[$0]);this.$ = vec
break;
case 47:
var exp;if(Array.isArray($$[$0-2])){exp = $$[$0-2];}else{exp = [$$[$0-2]];};this.$ = { tipo : "CASE" , expresion :exp , instrucciones : $$[$0] , fila: this._$.first_line, columna: this._$.first_column};
break;
case 48:
this.$ = [{tipo : "DEFAULT" , instrucciones : $$[$0] , fila: this._$.first_line, columna: this._$.first_column}];
break;
case 50:
this.$ = {tipo : "IMPRIMIR" , instruccion: "CONSOLE", contenido: $$[$0-2]};
break;
case 51:
var arr;if(Array.isArray($$[$0])){arr = $$[$0];}else{arr = [$$[$0]];} ;this.$ = arr;
break;
case 53:
var exp;if(Array.isArray($$[$0-4])){exp = $$[$0-4];}else{exp = [$$[$0-4]];}; this.$ = {tipo : "WHILE" , expresion : exp, instrucciones : $$[$0-1] , fila: this._$.first_line, columna: this._$.first_column};
break;
case 54:
var exp;if(Array.isArray($$[$0-2])){exp = $$[$0-2];}else{exp = [$$[$0-2]];};this.$ = {tipo : "DOWHILE" , instrucciones : $$[$0-6] , expresion : exp , fila: this._$.first_line, columna: this._$.first_column};
break;
case 55:
var exp;if(Array.isArray($$[$0-6])){exp = $$[$0-6];}else{exp = [$$[$0-6]];};this.$ = {tipo : "FOR" , inicio : $$[$0-7] , expresion : exp , fin: $$[$0-4] , instrucciones : $$[$0-1] , fila: this._$.first_line, columna: this._$.first_column};
break;
case 56:
var exp;if(Array.isArray($$[$0-1])){exp = $$[$0-1];}else{exp = [$$[$0-1]];};var cont = [{tipo : "VARIABLE", identificador : $$[$0-5], tipoDato: undefined,tipoDDV: $$[$0-3] , valor : exp , fila: this._$.first_line , columna: this._$.first_column}];this.$ = {tipo: "DECLARACION",modificador : $$[$0-6] , contenido : cont};
break;
case 57:
this.$ = {tipo : "VALOR" , tipoDato: "IDENTIFICADOR" , identificador : $$[$0-1], fila: this._$.first_line, columna: this._$.first_column};
break;
case 58:
var exp;if(Array.isArray($$[$0-1])){exp = $$[$0-1];}else{exp = [$$[$0-1]];};this.$ = exp;this.$ = {tipo : "ASIGNACION" , identificador : [{tipo : "VALOR" , tipoDato: "IDENTIFICADOR" , identificador : $$[$0-3], fila: this._$.first_line, columna: this._$.first_column}], ope : '=', valor: exp, fila: this._$.first_line, columna: this._$.first_column};
break;
case 59: case 81:
var exp;if(Array.isArray($$[$0])){exp = $$[$0];}else{exp = [$$[$0]];};this.$ = exp;this.$ = {tipo : "ASIGNACION" , identificador : [{tipo : "VALOR" , tipoDato: "IDENTIFICADOR" , identificador : $$[$0-2], fila: this._$.first_line, columna: this._$.first_column}], ope : '=', valor: exp, fila: this._$.first_line, columna: this._$.first_column};
break;
case 60: case 82:
this.$ = {tipo : "ASIGNACION" , identificador : [{tipo : "VALOR" , tipoDato: "IDENTIFICADOR" , identificador : $$[$0-1], fila: this._$.first_line, columna: this._$.first_column}] ,ope : '++D' , valor: undefined , fila: this._$.first_line, columna: this._$.first_column};
break;
case 61: case 83:
this.$ = {tipo : "ASIGNACION" , identificador : [{tipo : "VALOR" , tipoDato: "IDENTIFICADOR" , identificador : $$[$0], fila: this._$.first_line, columna: this._$.first_column}] ,ope : 'A++' , valor: undefined , fila: this._$.first_line, columna: this._$.first_column};
break;
case 62: case 84:
this.$ = {tipo : "ASIGNACION" , identificador : [{tipo : "VALOR" , tipoDato: "IDENTIFICADOR" , identificador : $$[$0-1], fila: this._$.first_line, columna: this._$.first_column}] ,ope : '--D' , valor: undefined , fila: this._$.first_line, columna: this._$.first_column};
break;
case 63: case 85:
this.$ = {tipo : "ASIGNACION" , identificador : [{tipo : "VALOR" , tipoDato: "IDENTIFICADOR" , identificador : $$[$0], fila: this._$.first_line, columna: this._$.first_column}] ,ope : 'A--' , valor: undefined , fila: this._$.first_line, columna: this._$.first_column};
break;
case 72:
var vector = [{tipo : "ASIGNACION" , identificador : $$[$0-4] , ope : '=' ,valor : $$[$0-2]}]; vector = vector.concat($$[$0-1]) ;this.$ = {tipo : "LISTA_ASIGNACION", contenido : vector };
break;
case 73:
this.$ = {tipo : "LISTA_ASIGNACION", contenido : [{tipo : "ASIGNACION" , identificador : $$[$0-3] , ope : '++D' , valor: undefined , fila: this._$.first_line, columna: this._$.first_column}].concat($$[$0-1])};
break;
case 74:
this.$ = {tipo : "LISTA_ASIGNACION", contenido : [{tipo : "ASIGNACION" , identificador : $$[$0-2] , ope : 'A++' , valor: undefined , fila: this._$.first_line, columna: this._$.first_column}].concat($$[$0-1])};
break;
case 75:
this.$ = {tipo : "LISTA_ASIGNACION", contenido : [{tipo : "ASIGNACION" , identificador : $$[$0-3] , ope : '--D' , valor: undefined , fila: this._$.first_line, columna: this._$.first_column}].concat($$[$0-1])};
break;
case 76:
this.$ = {tipo : "LISTA_ASIGNACION", contenido : [{tipo : "ASIGNACION" , identificador : $$[$0-2] , ope : 'A--' , valor: undefined , fila: this._$.first_line, columna: this._$.first_column}].concat($$[$0-1])};
break;
case 86: case 101: case 190:
var exp;if(Array.isArray($$[$0])){exp = $$[$0];}else{exp = [$$[$0]];};this.$ = exp;
break;
case 87: case 88: case 96: case 102: case 103: case 185:
this.$ = $$[$0-1];
break;
case 99:
var v = $$[$0-2].concat($$[$0]);this.$ = v;
break;
case 100: case 187:
this.$ = $$[$0];
break;
case 104: case 105:
this.$ = {tipo: "DECLARACION",modificador : $$[$0-2] , contenido : $$[$0-1]}; 
break;
case 106:
$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 108:
 this.$ = {tipo : "VARIABLE" , identificador : $$[$0-2] , tipoDato: undefined ,tipoDDV: $$[$0], valor : undefined , fila: this._$.first_line , columna: this._$.first_column};
break;
case 109:
var exp;if(Array.isArray($$[$0])){exp = $$[$0];}else{exp = [$$[$0]];};this.$ = {tipo : "VARIABLE", identificador : $$[$0-4], tipoDato: undefined,tipoDDV: $$[$0-2] , valor : exp , fila: this._$.first_line , columna: this._$.first_column};
break;
case 110:
this.$ = {tipo : "ARRAY" , identificador : $$[$0-4] , tipoDato: undefined , valor : $$[$0-1] , fila: this._$.first_line , columna: this._$.first_column};
break;
case 111:
this.$ = {tipo : "ARRAY" , identificador : $$[$0-3] , tipoDato: $$[$0-1] , valor : undefined , fila: this._$.first_line , columna: this._$.first_column};
break;
case 112:
this.$ = {tipo : "ARRAY" , identificador : $$[$0-5] , tipoDato: $$[$0-3] , valor : $$[$0] , fila: this._$.first_line , columna: this._$.first_column};
break;
case 113:
this.$ = {tipo : "TYPE" , identificador : $$[$0-6] , tipoDato: $$[$0-4] , valor : $$[$0-1] , fila: this._$.first_line , columna: this._$.first_column};
break;
case 114:
this.$ = {tipo : "TYPE" , identificador : $$[$0-4] , tipoDato: undefined , valor : $$[$0-1] , fila: this._$.first_line , columna: this._$.first_column};
break;
case 116:
var exp; var arr;if(Array.isArray($$[$0])){arr = $$[$0];}else{arr = [$$[$0]];}; exp = $$[$0-2].concat(arr);this.$ = exp;
break;
case 117:
var arr;if(Array.isArray($$[$0])){arr = $$[$0];}else{arr = [$$[$0]];};this.$ = arr;
break;
case 136: case 148:
$$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 138:
this.$ = {tipo : "TYPE" , identificador : [{tipo : "VALOR" , tipoDato: "IDE" , valor : $$[$0-2], fila: this._$.first_line, columna: this._$.first_column}] , valor : $$[$0]};
break;
case 141:
this.$ = "NUMERO";
break;
case 142:
this.$ = "BOOLEAN";
break;
case 143:
this.$ = "CADENA";
break;
case 144:
this.$ = "VOID";
break;
case 151:
this.$ = {tipo : "VALOR" , tipoDato: "IDENTIFICADOR" , identificador : $$[$0], fila: this._$.first_line, columna: this._$.first_column};
break;
case 152:
this.$ = expresionB($$[$0-2],'&&',$$[$0]);
break;
case 153:
this.$ = expresionB($$[$0-2],'||',$$[$0]);
break;
case 154:
this.$ = expresionB($$[$0-2],'==',$$[$0]);
break;
case 155:
this.$ = expresionB($$[$0-2],'>=',$$[$0]);
break;
case 156:
this.$ = expresionB($$[$0-2],'>',$$[$0]);
break;
case 157:
this.$ = expresionB($$[$0-2],'<=',$$[$0]);
break;
case 158:
this.$ = expresionB($$[$0-2],'<',$$[$0]);
break;
case 159:
this.$ = expresionB($$[$0-2],'!=',$$[$0]);
break;
case 160:
this.$ = expresionB($$[$0-2],'+',$$[$0]);
break;
case 161:
this.$ = expresionB($$[$0-2],'-',$$[$0]);
break;
case 162:
this.$ = expresionB($$[$0-2],'*',$$[$0]);
break;
case 163:
this.$ = expresionB($$[$0-2],'/',$$[$0]);
break;
case 164:
this.$ = expresionB($$[$0-2],'**',$$[$0]);
break;
case 165:
this.$ = expresionB($$[$0-2],'%',$$[$0]);
break;
case 166:
this.$ = expresionB($$[$0-1],'--',undefined);
break;
case 167:
this.$ = expresionB($$[$0-1],'++',undefined);
break;
case 168:
this.$ = expresionB(undefined,'--',$$[$0]);
break;
case 169:
this.$ = expresionB(undefined,'++',$$[$0]);
break;
case 170:
this.$ = expresionB(UND("ENTERO"),'-',$$[$0]);
break;
case 171:
this.$ = expresionB(UND("BOOLEAN"),'!' ,$$[$0]);
break;
case 173:
this.$ = {tipo:"PRIMITIVO" , tipoDato : "ENTERO" , valor: $$[$0] + ".0",fila: this._$.first_line , columna: this._$.first_column};
break;
case 174:
this.$ = {tipo:"PRIMITIVO" , tipoDato : "DECIMAL", valor: $$[$0],fila: this._$.first_line , columna: this._$.first_column};
break;
case 175: case 176:
this.$ = {tipo:"PRIMITIVO" , tipoDato : "BOOLEAN", valor: $$[$0],fila: this._$.first_line , columna: this._$.first_column};
break;
case 177:
this.$ = {tipo:"VALOR"     , tipoDato : "CADENA" , valor: $$[$0],fila: this._$.first_line , columna: this._$.first_column};
break;
case 178:
this.$ = {tipo:"VALOR"     , tipoDato : "NULL" , valor: $$[$0],fila: this._$.first_line , columna: this._$.first_column};
break;
case 181:
this.$ = {tipo : "LLAMADA_F" , identificador : $$[$0-2] , parametros : [] , fila : this._$.first_line, columna: this._$.first_column};
break;
case 183:
this.$ = {tipo : "LLAMADA_F" , identificador : $$[$0-3] , parametros : $$[$0-1] , fila : this._$.first_line, columna: this._$.first_column};
break;
case 189:
var exp;if(Array.isArray($$[$0])){exp = $$[$0];}else{exp = [$$[$0]];};var v; v = $$[$0-2].concat(exp);this.$=v;
break;
}
},
table: [{2:$V0,3:1,4:2,5:$V1,6:3,7:4,8:5,9:6,10:$V2,11:$V3,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi,107:40},{1:[3]},{5:[1,42]},o([5,16],[2,2],{8:5,9:6,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,46:28,107:40,7:43,2:$V0,10:$V2,11:$V3,40:$V4,41:$V5,42:$V6,43:$V7,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi}),o($Vj,[2,5]),o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),{11:[1,44]},o($Vk,[2,17]),o($Vk,[2,18]),o($Vk,[2,41],{25:45,45:[1,46]}),o($Vk,[2,20]),o($Vk,[2,21]),o($Vk,[2,22]),o($Vk,[2,23]),o($Vk,[2,24]),o($Vk,[2,25]),o($Vk,[2,26]),o($Vk,[2,27]),o($Vk,[2,28]),o($Vk,[2,29]),o($Vk,[2,30]),{11:$Vl,91:47,92:48},{11:$Vl,91:50,92:48},{38:54,56:[1,55],66:[1,51],67:[1,52],68:[1,53],131:56,132:57},{11:$Vm,37:58,107:40},{11:$Vm,37:60,107:40},o($Vn,[2,38]),{12:[1,61]},{56:[1,62]},{12:[1,63]},{15:[1,64]},{12:[1,65]},{39:[1,66]},{39:[1,67]},{11:$Vo,12:$Vp,37:81,39:[1,68],40:$Vq,44:69,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},o([56,66,67,68],$VA,{86:85,87:86,88:87,12:[1,84],79:$VB}),{11:[1,89]},{38:90,56:$VC,131:56,132:57},o($VD,[2,149]),{12:[1,92]},{1:[2,1]},o($Vj,[2,4]),{12:[1,93]},o($Vk,[2,19]),{15:[1,95],46:94,47:$V8},{39:[1,96],78:$VE},o($VF,[2,107]),{17:[1,98],66:[1,99]},{39:[1,100],78:$VE},{11:$Vo,12:$Vp,15:$VG,37:81,40:$Vq,44:102,67:$Vr,68:$Vs,74:101,79:$VH,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{39:$VI,75:105,76:106,77:107,78:$VJ},{39:$VI,75:109,76:106,77:107,78:$VJ},{39:[1,110]},{11:$Vm,107:111,133:$VK,134:$VL,135:$VM,136:$VN},o($VO,[2,191],{132:116,56:$VC}),o($VP,[2,193]),{39:$VI,56:$VQ,75:117,76:106,77:107,78:$VJ},o($VD,$VA,{86:85,87:86,88:87,79:$VB}),{39:$VI,56:$VQ,75:119,76:106,77:107,78:$VJ},{11:$Vo,12:$Vp,37:81,40:$Vq,44:120,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{57:[1,121]},{11:$Vo,12:$Vp,37:81,40:$Vq,44:122,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{2:$VR,9:126,11:$V3,16:$VS,19:123,20:124,21:125,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi,107:40},{11:[1,132],63:128,65:[1,131],69:130,70:[1,133],72:129},o($Vk,[2,33]),o($Vk,[2,34]),o($Vk,[2,35]),{39:[1,134],108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41},o($V51,[2,172],{67:[1,150],68:[1,149]}),{11:$Vo,12:$Vp,37:81,40:$Vq,107:40,122:151,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,107:40,122:152,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,107:40,122:153,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:154,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},o($VO,[2,173]),o($VO,[2,174]),o($VO,[2,175]),o($VO,[2,176]),o($VO,[2,177],{131:56,132:57,38:155,56:$VC}),o($VO,[2,178]),o($VO,[2,187],{131:56,132:57,38:156,56:[1,157]}),o($VP,$VA,{86:85,87:86,88:87,12:[1,158],79:$VB}),{11:$Vo,12:$Vp,37:81,40:$Vq,44:159,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},o($V61,$V71,{107:40,122:70,37:81,58:160,44:161,11:$Vo,12:$Vp,40:$Vq,67:$Vr,68:$Vs,117:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz}),o($VD,[2,150]),o($VD,[2,93],{88:162,79:$VB}),o($V81,[2,95]),{11:$Vo,12:$Vp,15:$V91,37:81,40:$Vq,44:166,67:$Vr,68:$Vs,79:$Va1,80:163,81:$Vb1,89:164,90:165,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{66:[1,169]},{39:[1,170]},{133:$VK,134:$VL,135:$VM,136:$VN},{11:$Vo,12:$Vp,37:81,40:$Vq,44:171,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vc1,13:172,14:[2,120],93:173,94:174},o($Vn,[2,37]),{2:$VR,9:126,11:$V3,16:$VS,19:176,20:124,21:125,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi,107:40},o($Vk,[2,104]),{11:$Vl,92:177},{11:$Vd1,18:178,102:$Ve1,103:$Vf1,104:$Vg1,105:$Vh1},{15:[1,185],79:[1,184]},o($Vk,[2,105]),{39:$VI,75:186,76:106,77:107,78:$VJ},o($Vi1,[2,86],{108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),{11:$Vo,12:$Vp,15:$V91,37:81,40:$Vq,44:166,67:$Vr,68:$Vs,79:$Va1,80:187,81:$Vb1,89:164,90:165,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vj1,82:188,101:189},{39:[1,191]},{39:[2,77],77:192,78:$VJ},o($VF,[2,80]),{11:[1,193],67:[1,194],68:[1,195]},{39:[1,196]},o($Vk,[2,31]),o($VD,[2,148]),{12:[1,197]},{12:[1,198]},{12:[1,199]},{12:[1,200]},o($VP,[2,192]),{39:[1,201]},{11:$Vm,107:111},{39:[1,202]},{14:[1,203],108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41},{12:[1,204]},{14:[1,205],108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41},{16:[1,206]},o($Vk1,[2,11],{22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,46:28,107:40,9:126,21:207,2:$VR,11:$V3,40:$V4,41:$V5,42:$V6,43:$V7,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi}),o($Vl1,[2,14]),o($Vl1,[2,15]),o($Vl1,[2,16]),{11:$Vo,12:$Vp,37:81,40:$Vq,44:208,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{14:[1,209]},{14:[1,210]},{11:[1,211]},{39:[1,212],66:[1,213],71:[1,215],73:[1,214]},{11:[1,216]},o($Vk,[2,36]),{11:$Vo,12:$Vp,37:81,40:$Vq,44:217,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:218,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:219,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:220,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:221,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:222,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:223,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:224,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:225,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:226,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:227,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:228,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:229,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:230,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},o($V51,[2,166]),o($V51,[2,167]),o($V51,[2,168]),o($V51,[2,169]),o($V51,[2,170]),o($V51,[2,171]),o($VO,[2,179]),o($VO,[2,180]),{11:$Vm,107:111,130:[1,231],133:$VK,134:$VL,135:$VM,136:$VN},{11:$Vo,12:$Vp,14:[1,232],37:81,40:$Vq,44:234,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:233},{14:[1,235],108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41},{14:[1,236],78:$Vm1},o($V61,[2,117],{108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($V81,[2,94]),{81:[1,238]},{78:[1,239],81:[2,97]},o($Vn1,[2,100]),o($Vn1,[2,101],{108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),{11:$Vo,12:$Vp,15:$V91,37:81,40:$Vq,44:166,67:$Vr,68:$Vs,79:$Va1,80:240,81:$Vb1,89:164,90:165,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vj1,82:241,101:189},{15:[1,242]},o($Vk,[2,32]),{14:[1,243],108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41},{14:[1,244]},{14:[2,119],78:[1,245]},o($V61,[2,122]),{17:[1,246]},{16:[1,247]},o($VF,[2,106]),o($VF,[2,108],{83:249,84:250,85:251,66:[1,248],79:$Vo1}),o($Vp1,[2,141]),o($Vp1,[2,142]),o($Vp1,[2,143]),o($Vp1,[2,144]),o($Vp1,[2,145]),{11:$Vo,12:$Vp,15:$V91,37:81,40:$Vq,44:166,67:$Vr,68:$Vs,79:$Va1,80:253,81:$Vb1,89:164,90:165,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vj1,82:254,101:189},{39:[1,255]},{81:[1,256]},{16:[1,257],39:$Vq1,78:$Vr1,100:258},o($Vs1,[2,137]),{17:[1,261]},o($Vk,[2,73]),o($VF,[2,79]),{66:[1,262],67:[1,263],68:[1,264]},{11:[1,265]},{11:[1,266]},o($Vk,[2,75]),{11:$Vo,12:$Vp,37:81,40:$Vq,44:267,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{14:[1,268]},{14:[1,269]},{11:$Vo,12:$Vp,37:81,40:$Vq,44:234,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz,129:270},o($Vk,[2,74]),o($Vk,[2,76]),{15:[1,271]},o($V61,$V71,{107:40,122:70,37:81,44:161,58:272,11:$Vo,12:$Vp,40:$Vq,67:$Vr,68:$Vs,117:$Vt,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz}),{15:[1,273]},{60:[1,274]},o($Vl1,[2,13]),{39:[1,275],108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41},{15:[1,276]},{15:[1,277]},{17:[1,278],71:[1,280],73:[1,279]},o($Vt1,[2,57]),{11:$Vo,12:$Vp,37:81,40:$Vq,44:281,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:[1,282]},{11:[1,283]},{71:[1,285],73:[1,284]},o($Vu1,[2,152],{110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($Vu1,[2,153],{110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($Vv1,[2,154],{116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($Vv1,[2,155],{116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($Vv1,[2,156],{116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($Vv1,[2,157],{116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($Vv1,[2,158],{116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($Vv1,[2,159],{116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($Vw1,[2,160],{118:$V11,119:$V21,120:$V31,121:$V41}),o($Vw1,[2,161],{118:$V11,119:$V21,120:$V31,121:$V41}),o($Vx1,[2,162],{120:$V31,121:$V41}),o($Vx1,[2,163],{120:$V31,121:$V41}),o($V51,[2,164]),o($V51,[2,165]),o($VO,[2,188]),o($VO,[2,181],{131:56,132:57,38:286,56:$VC}),{14:[1,287],78:$Vy1},o($V61,[2,190],{108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($VO,[2,185],{131:56,132:57,38:289,56:$VC}),{39:[1,290]},{11:$Vo,12:$Vp,37:81,40:$Vq,44:291,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},o($V81,[2,96]),{11:$Vo,12:$Vp,15:$V91,37:81,40:$Vq,44:166,67:$Vr,68:$Vs,79:$Va1,90:292,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{81:[1,293]},{16:[1,294],39:$Vq1,78:$Vr1,100:258},{11:$Vz1,96:295,99:296},{15:[1,298]},{15:[1,299],17:[1,300]},{11:$Vc1,94:301},{11:$Vd1,18:302,102:$Ve1,103:$Vf1,104:$Vg1,105:$Vh1},o($Vk,[2,40]),{11:$Vo,12:$Vp,15:[1,304],37:81,40:$Vq,44:303,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},o($VF,[2,111],{66:[1,305]}),o([14,16,39,66,78],[2,89],{85:306,79:$Vo1}),o($VA1,[2,91]),{81:[1,307]},{81:[1,308]},{16:[1,309],39:$Vq1,78:$Vr1,100:258},o($Vk,[2,72]),o($Vi1,[2,87]),o($Vi1,[2,88]),{11:$Vj1,101:310},{11:[2,139]},{11:[2,140]},{11:$Vo,12:$Vp,15:$VG,37:81,40:$Vq,44:102,67:$Vr,68:$Vs,74:311,79:$VH,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{11:$Vo,12:$Vp,37:81,40:$Vq,44:312,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},o($VF,[2,82]),o($VF,[2,84]),o($VF,[2,83]),o($VF,[2,85]),{14:[1,313],108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41},o($VP,[2,195]),o($VP,[2,196]),{14:[1,314],78:$Vy1},o($VB1,[2,44],{49:315,51:316,52:317,53:$VC1}),{14:[1,319],78:$Vm1},{2:$VR,9:126,11:$V3,16:$VS,19:320,20:124,21:125,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi,107:40},{12:[1,321]},{11:[1,323],64:322,67:[1,324],68:[1,325]},{2:$VR,9:126,11:$V3,16:$VS,19:326,20:124,21:125,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi,107:40},{2:$VR,9:126,11:$V3,16:$VS,19:327,20:124,21:125,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi,107:40},{11:$Vd1,18:328,102:$Ve1,103:$Vf1,104:$Vg1,105:$Vh1},{11:[1,329]},{11:[1,330]},{39:[1,331],108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41},{14:[2,71]},{14:[2,67]},{11:[1,332]},{11:[1,333]},o($VO,[2,182]),o($VO,[2,183],{131:56,132:57,38:334,56:$VC}),{11:$Vo,12:$Vp,37:81,40:$Vq,44:335,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},o($VO,[2,186]),o($Vk,[2,115]),o($V61,[2,116],{108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($Vn1,[2,99]),o($Vn1,[2,102]),o($Vn1,[2,103]),{16:[1,338],39:[1,340],78:[1,339],97:336,98:337},o($Vs1,[2,129]),{17:[1,341]},{2:$VR,9:126,11:$V3,16:$VS,19:342,20:124,21:125,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi,107:40},{2:$V0,4:343,6:3,7:4,8:5,9:6,10:$V2,11:$V3,16:$V1,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi,107:40},{11:$Vd1,18:344,102:$Ve1,103:$Vf1,104:$Vg1,105:$Vh1},o($V61,[2,121]),o($V61,[2,123],{84:250,85:251,83:346,66:[1,345],79:$Vo1}),o($VF,[2,109],{108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),{11:$Vj1,82:347,101:189},{79:$VB,86:348,87:86,88:87},o($VA1,[2,90]),o($VA1,[2,92]),o($VF,[2,110]),o($VF,[2,114]),o($Vs1,[2,136]),o($Vs1,[2,138]),o($VF,[2,81],{108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($VP,[2,194]),o($VP,[2,197]),{16:[2,49],50:349,54:[1,350]},o($VB1,[2,43],{52:351,53:$VC1}),o($Vk1,[2,46]),{11:$Vo,12:$Vp,37:81,40:$Vq,44:352,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{39:[1,353]},{16:[1,354]},{11:$Vo,12:$Vp,37:81,40:$Vq,44:355,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{14:[1,356]},{66:[1,357],67:[1,358],68:[1,359]},{11:[1,360]},{11:[1,361]},{16:[1,362]},{16:[1,363]},{66:[1,364]},{14:[2,70]},{14:[2,66]},o($Vt1,[2,58]),{14:[2,69]},{14:[2,65]},o($VO,[2,184]),o($V61,[2,189],{108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41}),o($Vk,[2,127]),{11:$Vz1,99:365},o($Vk,[2,135],{39:[1,366]}),{11:[2,132]},{11:[2,133]},{11:$Vd1,18:367,102:$Ve1,103:$Vf1,104:$Vg1,105:$Vh1},{16:[1,368]},{16:[1,369]},{15:[1,370]},{11:$Vo,12:$Vp,15:$VG,37:81,40:$Vq,44:102,67:$Vr,68:$Vs,74:371,79:$VH,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},o($V61,[2,125],{66:[1,372]}),{16:[1,373],39:$Vq1,78:$Vr1,100:258},o($VF,[2,112]),{16:[1,374]},{17:[1,375]},o($Vk1,[2,45]),{17:[1,376],108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41},o($Vk,[2,50]),o($Vk,[2,53]),{14:[1,377],108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41},{15:[1,378]},{11:$Vo,12:$Vp,37:81,40:$Vq,44:379,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},{14:[2,60]},{14:[2,62]},{14:[2,61]},{14:[2,63]},o($Vk,[2,68]),o($Vk,[2,64]),{11:$Vo,12:$Vp,37:81,40:$Vq,44:380,67:$Vr,68:$Vs,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},o($Vs1,[2,128]),o($Vk,[2,134]),o($Vs1,[2,130],{84:250,85:251,83:381,79:$Vo1}),o($Vn,[2,39]),o($Vj,[2,9]),{2:$V0,4:382,6:3,7:4,8:5,9:6,10:$V2,11:$V3,16:$V1,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi,107:40},o($V61,[2,124]),{11:$Vo,12:$Vp,15:$VG,37:81,40:$Vq,44:102,67:$Vr,68:$Vs,74:383,79:$VH,107:40,117:$Vt,122:70,123:$Vu,124:$Vv,125:$Vw,126:$Vx,127:$Vy,128:$Vz},o($VF,[2,113]),o($Vk,[2,42]),{2:$VR,9:126,11:$V3,16:$VS,19:384,20:124,21:125,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi,107:40},o($Vk1,$VS,{22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,46:28,107:40,20:124,21:125,9:126,19:385,2:$VR,11:$V3,40:$V4,41:$V5,42:$V6,43:$V7,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi}),{39:[1,386]},{2:$VR,9:126,11:$V3,16:$VS,19:387,20:124,21:125,22:9,23:10,24:11,26:12,27:13,28:14,29:15,30:16,31:17,32:18,33:19,34:20,35:21,36:22,37:25,40:$V4,41:$V5,42:$V6,43:$V7,46:28,47:$V8,48:$V9,55:$Va,60:$Vb,61:$Vc,62:$Vd,65:$Ve,67:$Vf,68:$Vg,70:$Vh,95:$Vi,107:40},{14:[2,59],108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41},{39:[1,388],108:$VT,109:$VU,110:$VV,111:$VW,112:$VX,113:$VY,114:$VZ,115:$V_,116:$V$,117:$V01,118:$V11,119:$V21,120:$V31,121:$V41},o($Vs1,[2,131]),{16:[1,389]},o($V61,[2,126]),{16:[2,48]},o($Vk1,[2,47]),o($Vk,[2,54]),{16:[1,390]},o($Vt1,[2,56]),o($Vj,[2,10]),o($Vk,[2,55])],
defaultActions: {42:[2,1],259:[2,139],260:[2,140],282:[2,71],283:[2,67],329:[2,70],330:[2,66],332:[2,69],333:[2,65],339:[2,132],340:[2,133],358:[2,60],359:[2,62],360:[2,61],361:[2,63],384:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var tablaErrores = [];

    function expresionB (OpI,operacion,opD){
        return {
            OpIzq : OpI,
            tipo: operacion,
            OpDer : opD,
        };
    }

    function expresionU (OpI,operacion){
        return {
            OpIzq : OpI,
            operacion: operacion,
        };
    }

    function limpiarErrores(){
        tablaErrores = [];
    }

    function UND(td){
        return {tipo : "PRIMITIVO" , tipoDato : td , valor:""};
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* salta espacios en blanco */
break;
case 1:/* comentario simple*/
break;
case 2:/*comentario multilinea*/
break;
case 3:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);  return 40; 
break;
case 4:yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2);  return 40; 
break;
case 5:  return 102;  
break;
case 6:  return 103; 
break;
case 7:  return 104;  
break;
case 8:  return 95;    
break;
case 9:  return 105;    
break;
case 10:  return 65;   
break;
case 11:  return 70; 
break;
case 12:  return 'R_Array'; 
break;
case 13:  return 'R_New'; 
break;
case 14:  return 133; 
break;
case 15:  return 134;
break;
case 16:  return 135;
break;
case 17:  return 136; 
break;
case 18:  return 130;
break;
case 19:  return 10;
break;
case 20:  return 128;
break;
case 21:return 47;
break;
case 22:return 45;
break;
case 23:return 48;
break;
case 24:return 53;
break;
case 25:return 54;
break;
case 26:return 62;
break;
case 27:return 71;
break;
case 28:return 73;
break;
case 29:return 60;
break;
case 30:return 61;
break;
case 31:return 41;
break;
case 32:return 42;
break;
case 33:return 43;
break;
case 34:return 55;
break;
case 35:return 57;
break;
case 36:return 126;
break;
case 37:return 127;
break;
case 38:return 'R_Undefined';
break;
case 39:return 67;
break;
case 40:return 68;
break;
case 41:return 120;
break;
case 42:return 116;
break;
case 43:return 117;
break;
case 44:return 118;
break;
case 45:return 119;
break;
case 46:return 121;
break;
case 47:return 113;
break;
case 48:return 111;
break;
case 49:return 110;
break;
case 50:return 66;
break;
case 51:return 115;
break;
case 52:return 114;
break;
case 53:return 112;
break;
case 54:return 123;
break;
case 55:return 108;
break;
case 56:return 109;
break;
case 57:return 17;
break;
case 58:return 39;
break;
case 59:return 15;
break;
case 60:return 16;
break;
case 61:return 12;
break;
case 62:return 14;
break;
case 63:return 56;
break;
case 64:return 'S_ComillaSimple';
break;
case 65:return 78;
break;
case 66:return 'S_ComillaDoble';
break;
case 67:return 'S_Interrogacion';
break;
case 68:return 79;
break;
case 69:return 81;
break;
case 70:return 125;
break;
case 71:return 124;
break;
case 72:return 11;
break;
case 73:  return 5; 
break;
case 74:tablaErrores.push({ tipo  : ' Error_Lexico ', Error  : yy_.yytext ,  Fila  : yy_.yylloc.first_line , Columna  :  yy_.yylloc.first_column });
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[\"][^\\\"]*([\\][\\\"'ntr][^\\\"]*)*[\"])/i,/^(?:[\'][^\\\']*([\\][\\\'"ntr][^\\\']*)*[\'])/i,/^(?:number\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:type\b)/i,/^(?:void\b)/i,/^(?:let\b)/i,/^(?:const\b)/i,/^(?:Array\b)/i,/^(?:new\b)/i,/^(?:CharAt\b)/i,/^(?:ToLowerCase\b)/i,/^(?:ToUpperCase\b)/i,/^(?:Concat\b)/i,/^(?:length\b)/i,/^(?:function\b)/i,/^(?:null\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:of\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:console\b)/i,/^(?:log\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:undefined\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:\*\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?::)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:\\')/i,/^(?:,)/i,/^(?:")/i,/^(?:\?)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Traduccion;
exports.Parser = Traduccion.Parser;
exports.parse = function () { return Traduccion.parse.apply(Traduccion, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}